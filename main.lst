                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14549 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___SMS__SDSC_signature
                                     12 	.globl ___SMS__SDSC_descr
                                     13 	.globl ___SMS__SDSC_name
                                     14 	.globl ___SMS__SDSC_author
                                     15 	.globl ___SMS__SEGA_signature
                                     16 	.globl _main
                                     17 	.globl _dibujaPajaros
                                     18 	.globl _loadGrapVRAM
                                     19 	.globl _inicializaPajaros
                                     20 	.globl _moveAlex
                                     21 	.globl _moveAlexAire
                                     22 	.globl _moveAlexSuelo
                                     23 	.globl _canRight
                                     24 	.globl _canLeft
                                     25 	.globl _canDown
                                     26 	.globl _canUp
                                     27 	.globl _SMS_VRAMmemsetW
                                     28 	.globl _SMS_VRAMmemcpy
                                     29 	.globl _SMS_resetPauseRequest
                                     30 	.globl _SMS_queryPauseRequested
                                     31 	.globl _SMS_getKeysHeld
                                     32 	.globl _SMS_loadSpritePalette
                                     33 	.globl _SMS_loadBGPalette
                                     34 	.globl _SMS_copySpritestoSAT
                                     35 	.globl _SMS_finalizeSprites
                                     36 	.globl _SMS_addSprite_f
                                     37 	.globl _SMS_initSprites
                                     38 	.globl _SMS_waitForVBlank
                                     39 	.globl _SMS_setSpriteMode
                                     40 	.globl _SMS_setBGScrollY
                                     41 	.globl _SMS_setBGScrollX
                                     42 	.globl _SMS_VDPturnOffFeature
                                     43 	.globl _SMS_VDPturnOnFeature
                                     44 	.globl _SMS_init
                                     45 	.globl _PSGFrame
                                     46 	.globl _PSGPlay
                                     47 	.globl _printf
                                     48 	.globl _spritePuno
                                     49 	.globl _spritePajaro
                                     50 	.globl _spriteAlex
                                     51 	.globl _alex
                                     52 	.globl _maxSalto
                                     53 	.globl _nextVRAMsprites
                                     54 	.globl _pajaros
                                     55 	.globl _SMS_SRAM
                                     56 	.globl _SRAM_bank_to_be_mapped_on_slot2
                                     57 	.globl _ROM_bank_to_be_mapped_on_slot0
                                     58 	.globl _ROM_bank_to_be_mapped_on_slot1
                                     59 	.globl _ROM_bank_to_be_mapped_on_slot2
                                     60 	.globl _generateSprite
                                     61 	.globl _generateSpriteNoRAM
                                     62 	.globl _draw_entidad
                                     63 ;--------------------------------------------------------
                                     64 ; special function registers
                                     65 ;--------------------------------------------------------
                                     66 ;--------------------------------------------------------
                                     67 ; ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area _DATA
                           00FFFF    70 _ROM_bank_to_be_mapped_on_slot2	=	0xffff
                           00FFFE    71 _ROM_bank_to_be_mapped_on_slot1	=	0xfffe
                           00FFFD    72 _ROM_bank_to_be_mapped_on_slot0	=	0xfffd
                           00FFFC    73 _SRAM_bank_to_be_mapped_on_slot2	=	0xfffc
                           008000    74 _SMS_SRAM	=	0x8000
      000000                         75 _pajaros::
      000000                         76 	.ds 60
                                     77 ;--------------------------------------------------------
                                     78 ; ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area _INITIALIZED
      000000                         81 _nextVRAMsprites::
      000000                         82 	.ds 2
      000002                         83 _maxSalto::
      000002                         84 	.ds 1
      000003                         85 _alex::
      000003                         86 	.ds 6
      000009                         87 _spriteAlex::
      000009                         88 	.ds 10
      000013                         89 _spritePajaro::
      000013                         90 	.ds 10
      00001D                         91 _spritePuno::
      00001D                         92 	.ds 10
                                     93 ;--------------------------------------------------------
                                     94 ; absolute external ram data
                                     95 ;--------------------------------------------------------
                                     96 	.area _DABS (ABS)
                                     97 ;--------------------------------------------------------
                                     98 ; global & static initialisations
                                     99 ;--------------------------------------------------------
                                    100 	.area _HOME
                                    101 	.area _GSINIT
                                    102 	.area _GSFINAL
                                    103 	.area _GSINIT
                                    104 ;--------------------------------------------------------
                                    105 ; Home
                                    106 ;--------------------------------------------------------
                                    107 	.area _HOME
                                    108 	.area _HOME
                                    109 ;--------------------------------------------------------
                                    110 ; code
                                    111 ;--------------------------------------------------------
                                    112 	.area _CODE
                                    113 ;./lib/./sprite.c:18: T_sprite generateSprite(unsigned char ancho, unsigned char alto, int tam,const unsigned char data[]) {
                                    114 ;	---------------------------------
                                    115 ; Function generateSprite
                                    116 ; ---------------------------------
      000000                        117 _generateSprite::
      000000 DD E5            [15]  118 	push	ix
      000002 DD 21 00 00      [14]  119 	ld	ix,#0
      000006 DD 39            [15]  120 	add	ix,sp
      000008 FD 21 F6 FF      [14]  121 	ld	iy, #-10
      00000C FD 39            [15]  122 	add	iy, sp
      00000E FD F9            [10]  123 	ld	sp, iy
      000010 5F               [ 4]  124 	ld	e, a
      000011 55               [ 4]  125 	ld	d, l
                                    126 ;./lib/./sprite.c:19: unsigned char tamano = alto*ancho*2;
      000012 D5               [11]  127 	push	de
      000013 62               [ 4]  128 	ld	h, d
                                    129 ;	spillPairReg hl
                                    130 ;	spillPairReg hl
      000014 2E 00            [ 7]  131 	ld	l, #0x00
      000016 55               [ 4]  132 	ld	d, l
      000017 06 08            [ 7]  133 	ld	b, #0x08
      000019                        134 00103$:
      000019 29               [11]  135 	add	hl, hl
      00001A 30 01            [12]  136 	jr	NC, 00104$
      00001C 19               [11]  137 	add	hl, de
      00001D                        138 00104$:
      00001D 10 FA            [13]  139 	djnz	00103$
      00001F D1               [10]  140 	pop	de
      000020 4D               [ 4]  141 	ld	c, l
      000021 CB 21            [ 8]  142 	sla	c
                                    143 ;./lib/./sprite.c:20: T_sprite sprite = {alto,ancho,tamano,tam/(tamano*32),nextVRAMsprites, 1,0};
      000023 DD 72 F6         [19]  144 	ld	-10 (ix), d
      000026 DD 73 F7         [19]  145 	ld	-9 (ix), e
      000029 DD 71 F8         [19]  146 	ld	-8 (ix), c
      00002C 69               [ 4]  147 	ld	l, c
                                    148 ;	spillPairReg hl
                                    149 ;	spillPairReg hl
      00002D 26 00            [ 7]  150 	ld	h, #0x00
                                    151 ;	spillPairReg hl
                                    152 ;	spillPairReg hl
      00002F 29               [11]  153 	add	hl, hl
      000030 29               [11]  154 	add	hl, hl
      000031 29               [11]  155 	add	hl, hl
      000032 29               [11]  156 	add	hl, hl
      000033 29               [11]  157 	add	hl, hl
      000034 C5               [11]  158 	push	bc
      000035 EB               [ 4]  159 	ex	de, hl
      000036 DD 6E 06         [19]  160 	ld	l, 6 (ix)
                                    161 ;	spillPairReg hl
                                    162 ;	spillPairReg hl
      000039 DD 66 07         [19]  163 	ld	h, 7 (ix)
                                    164 ;	spillPairReg hl
                                    165 ;	spillPairReg hl
      00003C CDr00r00         [17]  166 	call	__divsint
      00003F C1               [10]  167 	pop	bc
      000040 DD 73 F9         [19]  168 	ld	-7 (ix), e
      000043 3Ar00r00         [13]  169 	ld	a, (_nextVRAMsprites+0)
      000046 DD 77 FA         [19]  170 	ld	-6 (ix), a
      000049 3Ar01r00         [13]  171 	ld	a, (_nextVRAMsprites+1)
      00004C DD 77 FB         [19]  172 	ld	-5 (ix), a
      00004F DD 36 FC 01      [19]  173 	ld	-4 (ix), #0x01
      000053 AF               [ 4]  174 	xor	a, a
      000054 DD 77 FD         [19]  175 	ld	-3 (ix), a
      000057 DD 77 FE         [19]  176 	ld	-2 (ix), a
      00005A DD 36 FF 00      [19]  177 	ld	-1 (ix), #0x00
                                    178 ;./lib/./sprite.c:21: SMS_loadTiles(data,nextVRAMsprites,tam);
      00005E DD 5E 08         [19]  179 	ld	e, 8 (ix)
      000061 DD 56 09         [19]  180 	ld	d, 9 (ix)
      000064 2Ar00r00         [16]  181 	ld	hl, (_nextVRAMsprites)
      000067 29               [11]  182 	add	hl, hl
      000068 29               [11]  183 	add	hl, hl
      000069 29               [11]  184 	add	hl, hl
      00006A 29               [11]  185 	add	hl, hl
      00006B 29               [11]  186 	add	hl, hl
      00006C CB F4            [ 8]  187 	set	6, h
      00006E C5               [11]  188 	push	bc
      00006F E5               [11]  189 	push	hl
      000070 DD 6E 06         [19]  190 	ld	l, 6 (ix)
                                    191 ;	spillPairReg hl
                                    192 ;	spillPairReg hl
      000073 DD 66 07         [19]  193 	ld	h, 7 (ix)
                                    194 ;	spillPairReg hl
                                    195 ;	spillPairReg hl
      000076 E3               [19]  196 	ex	(sp), hl
      000077 CDr00r00         [17]  197 	call	_SMS_VRAMmemcpy
      00007A C1               [10]  198 	pop	bc
                                    199 ;./lib/./sprite.c:22: nextVRAMsprites = nextVRAMsprites + (tamano*sprite.numFrames);
      00007B DD 5E F9         [19]  200 	ld	e, -7 (ix)
      00007E 61               [ 4]  201 	ld	h, c
                                    202 ;	spillPairReg hl
                                    203 ;	spillPairReg hl
      00007F 2E 00            [ 7]  204 	ld	l, #0x00
      000081 55               [ 4]  205 	ld	d, l
      000082 06 08            [ 7]  206 	ld	b, #0x08
      000084                        207 00105$:
      000084 29               [11]  208 	add	hl, hl
      000085 30 01            [12]  209 	jr	NC, 00106$
      000087 19               [11]  210 	add	hl, de
      000088                        211 00106$:
      000088 10 FA            [13]  212 	djnz	00105$
      00008A EB               [ 4]  213 	ex	de, hl
      00008B 21r00r00         [10]  214 	ld	hl, #_nextVRAMsprites
      00008E 7E               [ 7]  215 	ld	a, (hl)
      00008F 83               [ 4]  216 	add	a, e
      000090 77               [ 7]  217 	ld	(hl), a
      000091 23               [ 6]  218 	inc	hl
      000092 7E               [ 7]  219 	ld	a, (hl)
      000093 8A               [ 4]  220 	adc	a, d
      000094 77               [ 7]  221 	ld	(hl), a
                                    222 ;./lib/./sprite.c:23: return sprite;
      000095 21 0E 00         [10]  223 	ld	hl, #14
      000098 39               [11]  224 	add	hl, sp
      000099 5E               [ 7]  225 	ld	e, (hl)
      00009A 23               [ 6]  226 	inc	hl
      00009B 56               [ 7]  227 	ld	d, (hl)
      00009C 21 00 00         [10]  228 	ld	hl, #0
      00009F 39               [11]  229 	add	hl, sp
      0000A0 01 0A 00         [10]  230 	ld	bc, #10
      0000A3 ED B0            [21]  231 	ldir
                                    232 ;./lib/./sprite.c:24: }
      0000A5 DD F9            [10]  233 	ld	sp, ix
      0000A7 DD E1            [14]  234 	pop	ix
      0000A9 C9               [10]  235 	ret
                                    236 ;./lib/./sprite.c:26: T_sprite generateSpriteNoRAM(unsigned char ancho, unsigned char alto, int tam,const unsigned char data[]) {
                                    237 ;	---------------------------------
                                    238 ; Function generateSpriteNoRAM
                                    239 ; ---------------------------------
      0000AA                        240 _generateSpriteNoRAM::
      0000AA DD E5            [15]  241 	push	ix
      0000AC DD 21 00 00      [14]  242 	ld	ix,#0
      0000B0 DD 39            [15]  243 	add	ix,sp
      0000B2 FD 21 F4 FF      [14]  244 	ld	iy, #-12
      0000B6 FD 39            [15]  245 	add	iy, sp
      0000B8 FD F9            [10]  246 	ld	sp, iy
      0000BA 5F               [ 4]  247 	ld	e, a
      0000BB 55               [ 4]  248 	ld	d, l
                                    249 ;./lib/./sprite.c:27: unsigned char tamano = alto*ancho*2;
      0000BC D5               [11]  250 	push	de
      0000BD 62               [ 4]  251 	ld	h, d
                                    252 ;	spillPairReg hl
                                    253 ;	spillPairReg hl
      0000BE 2E 00            [ 7]  254 	ld	l, #0x00
      0000C0 55               [ 4]  255 	ld	d, l
      0000C1 06 08            [ 7]  256 	ld	b, #0x08
      0000C3                        257 00103$:
      0000C3 29               [11]  258 	add	hl, hl
      0000C4 30 01            [12]  259 	jr	NC, 00104$
      0000C6 19               [11]  260 	add	hl, de
      0000C7                        261 00104$:
      0000C7 10 FA            [13]  262 	djnz	00103$
      0000C9 D1               [10]  263 	pop	de
      0000CA 4D               [ 4]  264 	ld	c, l
      0000CB CB 21            [ 8]  265 	sla	c
                                    266 ;./lib/./sprite.c:28: T_sprite sprite = {alto,ancho,tamano,tam/(tamano*32),nextVRAMsprites, 0,0};
      0000CD DD 72 F4         [19]  267 	ld	-12 (ix), d
      0000D0 DD 73 F5         [19]  268 	ld	-11 (ix), e
      0000D3 DD 71 F6         [19]  269 	ld	-10 (ix), c
                                    270 ;	spillPairReg hl
                                    271 ;	spillPairReg hl
      0000D6 DD 71 FE         [19]  272 	ld	-2 (ix), c
      0000D9 DD 36 FF 00      [19]  273 	ld	-1 (ix), #0x00
      0000DD 69               [ 4]  274 	ld	l, c
      0000DE 26 00            [ 7]  275 	ld	h, #0x00
                                    276 ;	spillPairReg hl
                                    277 ;	spillPairReg hl
      0000E0 29               [11]  278 	add	hl, hl
      0000E1 29               [11]  279 	add	hl, hl
      0000E2 29               [11]  280 	add	hl, hl
      0000E3 29               [11]  281 	add	hl, hl
      0000E4 29               [11]  282 	add	hl, hl
      0000E5 EB               [ 4]  283 	ex	de,hl
      0000E6 D5               [11]  284 	push	de
      0000E7 DD 6E 06         [19]  285 	ld	l, 6 (ix)
                                    286 ;	spillPairReg hl
                                    287 ;	spillPairReg hl
      0000EA DD 66 07         [19]  288 	ld	h, 7 (ix)
                                    289 ;	spillPairReg hl
                                    290 ;	spillPairReg hl
      0000ED CDr00r00         [17]  291 	call	__divsint
      0000F0 EB               [ 4]  292 	ex	de, hl
      0000F1 D1               [10]  293 	pop	de
      0000F2 DD 75 F7         [19]  294 	ld	-9 (ix), l
      0000F5 3Ar00r00         [13]  295 	ld	a, (_nextVRAMsprites+0)
      0000F8 DD 77 F8         [19]  296 	ld	-8 (ix), a
      0000FB 3Ar01r00         [13]  297 	ld	a, (_nextVRAMsprites+1)
      0000FE DD 77 F9         [19]  298 	ld	-7 (ix), a
      000101 DD 36 FA 00      [19]  299 	ld	-6 (ix), #0x00
      000105 AF               [ 4]  300 	xor	a, a
      000106 DD 77 FB         [19]  301 	ld	-5 (ix), a
      000109 DD 77 FC         [19]  302 	ld	-4 (ix), a
      00010C DD 36 FD 00      [19]  303 	ld	-3 (ix), #0x00
                                    304 ;./lib/./sprite.c:29: sprite.data = data;
      000110 DD 7E 08         [19]  305 	ld	a, 8 (ix)
      000113 DD 77 FB         [19]  306 	ld	-5 (ix), a
      000116 DD 7E 09         [19]  307 	ld	a, 9 (ix)
      000119 DD 77 FC         [19]  308 	ld	-4 (ix), a
                                    309 ;./lib/./sprite.c:30: sprite.frameInVRAM = 0;
      00011C DD 36 FD 00      [19]  310 	ld	-3 (ix), #0x00
                                    311 ;./lib/./sprite.c:31: SMS_loadTiles(data,nextVRAMsprites,tamano*32);
      000120 DD 4E 08         [19]  312 	ld	c, 8 (ix)
      000123 DD 46 09         [19]  313 	ld	b, 9 (ix)
      000126 2Ar00r00         [16]  314 	ld	hl, (_nextVRAMsprites)
      000129 29               [11]  315 	add	hl, hl
      00012A 29               [11]  316 	add	hl, hl
      00012B 29               [11]  317 	add	hl, hl
      00012C 29               [11]  318 	add	hl, hl
      00012D 29               [11]  319 	add	hl, hl
      00012E CB F4            [ 8]  320 	set	6, h
      000130 D5               [11]  321 	push	de
      000131 59               [ 4]  322 	ld	e, c
      000132 50               [ 4]  323 	ld	d, b
      000133 CDr00r00         [17]  324 	call	_SMS_VRAMmemcpy
                                    325 ;./lib/./sprite.c:32: nextVRAMsprites = nextVRAMsprites + (tamano);
      000136 21r00r00         [10]  326 	ld	hl, #_nextVRAMsprites
      000139 7E               [ 7]  327 	ld	a, (hl)
      00013A DD 86 FE         [19]  328 	add	a, -2 (ix)
      00013D 77               [ 7]  329 	ld	(hl), a
      00013E 23               [ 6]  330 	inc	hl
      00013F 7E               [ 7]  331 	ld	a, (hl)
      000140 DD 8E FF         [19]  332 	adc	a, -1 (ix)
      000143 77               [ 7]  333 	ld	(hl), a
                                    334 ;./lib/./sprite.c:33: return sprite;
      000144 21 10 00         [10]  335 	ld	hl, #16
      000147 39               [11]  336 	add	hl, sp
      000148 5E               [ 7]  337 	ld	e, (hl)
      000149 23               [ 6]  338 	inc	hl
      00014A 56               [ 7]  339 	ld	d, (hl)
      00014B 21 00 00         [10]  340 	ld	hl, #0
      00014E 39               [11]  341 	add	hl, sp
      00014F 01 0A 00         [10]  342 	ld	bc, #10
      000152 ED B0            [21]  343 	ldir
                                    344 ;./lib/./sprite.c:34: }
      000154 DD F9            [10]  345 	ld	sp, ix
      000156 DD E1            [14]  346 	pop	ix
      000158 C9               [10]  347 	ret
                                    348 ;./lib/entities.c:10: void draw_entidad(T_entidad *entidad, T_sprite *sprite){
                                    349 ;	---------------------------------
                                    350 ; Function draw_entidad
                                    351 ; ---------------------------------
      000159                        352 _draw_entidad::
      000159 DD E5            [15]  353 	push	ix
      00015B DD 21 00 00      [14]  354 	ld	ix,#0
      00015F DD 39            [15]  355 	add	ix,sp
      000161 FD 21 EF FF      [14]  356 	ld	iy, #-17
      000165 FD 39            [15]  357 	add	iy, sp
      000167 FD F9            [10]  358 	ld	sp, iy
      000169 DD 75 FC         [19]  359 	ld	-4 (ix), l
      00016C DD 74 FD         [19]  360 	ld	-3 (ix), h
                                    361 ;./lib/entities.c:12: if (sprite->allInRAM == 1){
      00016F DD 73 FA         [19]  362 	ld	-6 (ix), e
      000172 DD 72 FB         [19]  363 	ld	-5 (ix), d
      000175 4B               [ 4]  364 	ld	c, e
      000176 42               [ 4]  365 	ld	b, d
      000177 21 06 00         [10]  366 	ld	hl, #6
      00017A 09               [11]  367 	add	hl, bc
      00017B 4E               [ 7]  368 	ld	c, (hl)
                                    369 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      00017C DD 5E FA         [19]  370 	ld	e, -6 (ix)
      00017F DD 56 FB         [19]  371 	ld	d, -5 (ix)
      000182 DD 7E FC         [19]  372 	ld	a, -4 (ix)
      000185 C6 02            [ 7]  373 	add	a, #0x02
      000187 DD 77 F0         [19]  374 	ld	-16 (ix), a
      00018A DD 7E FD         [19]  375 	ld	a, -3 (ix)
      00018D CE 00            [ 7]  376 	adc	a, #0x00
      00018F DD 77 F1         [19]  377 	ld	-15 (ix), a
      000192 DD 7E FA         [19]  378 	ld	a, -6 (ix)
      000195 C6 04            [ 7]  379 	add	a, #0x04
      000197 DD 77 F2         [19]  380 	ld	-14 (ix), a
      00019A DD 7E FB         [19]  381 	ld	a, -5 (ix)
      00019D CE 00            [ 7]  382 	adc	a, #0x00
      00019F DD 77 F3         [19]  383 	ld	-13 (ix), a
                                    384 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      0001A2 DD 7E FC         [19]  385 	ld	a, -4 (ix)
      0001A5 C6 01            [ 7]  386 	add	a, #0x01
      0001A7 DD 77 F8         [19]  387 	ld	-8 (ix), a
      0001AA DD 7E FD         [19]  388 	ld	a, -3 (ix)
      0001AD CE 00            [ 7]  389 	adc	a, #0x00
      0001AF DD 77 F9         [19]  390 	ld	-7 (ix), a
      0001B2 DD 7E FA         [19]  391 	ld	a, -6 (ix)
      0001B5 C6 01            [ 7]  392 	add	a, #0x01
      0001B7 DD 77 FE         [19]  393 	ld	-2 (ix), a
      0001BA DD 7E FB         [19]  394 	ld	a, -5 (ix)
      0001BD CE 00            [ 7]  395 	adc	a, #0x00
      0001BF DD 77 FF         [19]  396 	ld	-1 (ix), a
                                    397 ;./lib/entities.c:23: int frame = sprite->tamano*entidad->frame*32;
      0001C2 DD 6E F0         [19]  398 	ld	l, -16 (ix)
      0001C5 DD 66 F1         [19]  399 	ld	h, -15 (ix)
      0001C8 7E               [ 7]  400 	ld	a, (hl)
      0001C9 DD 77 F4         [19]  401 	ld	-12 (ix), a
                                    402 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      0001CC 13               [ 6]  403 	inc	de
      0001CD 13               [ 6]  404 	inc	de
      0001CE 1A               [ 7]  405 	ld	a, (de)
      0001CF DD 77 F5         [19]  406 	ld	-11 (ix), a
                                    407 ;./lib/entities.c:12: if (sprite->allInRAM == 1){
      0001D2 0D               [ 4]  408 	dec	c
      0001D3 C2r98r02         [10]  409 	jp	NZ,00108$
                                    410 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      0001D6 DD 5E F5         [19]  411 	ld	e, -11 (ix)
      0001D9 DD 66 F4         [19]  412 	ld	h, -12 (ix)
                                    413 ;	spillPairReg hl
                                    414 ;	spillPairReg hl
      0001DC 2E 00            [ 7]  415 	ld	l, #0x00
      0001DE 55               [ 4]  416 	ld	d, l
      0001DF 06 08            [ 7]  417 	ld	b, #0x08
      0001E1                        418 00200$:
      0001E1 29               [11]  419 	add	hl, hl
      0001E2 30 01            [12]  420 	jr	NC, 00201$
      0001E4 19               [11]  421 	add	hl, de
      0001E5                        422 00201$:
      0001E5 10 FA            [13]  423 	djnz	00200$
      0001E7 4D               [ 4]  424 	ld	c, l
      0001E8 DD 6E F2         [19]  425 	ld	l, -14 (ix)
      0001EB DD 66 F3         [19]  426 	ld	h, -13 (ix)
      0001EE 7E               [ 7]  427 	ld	a, (hl)
      0001EF 81               [ 4]  428 	add	a, c
      0001F0 DD 77 EF         [19]  429 	ld	-17 (ix), a
                                    430 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      0001F3 DD 7E F8         [19]  431 	ld	a, -8 (ix)
      0001F6 DD 77 F0         [19]  432 	ld	-16 (ix), a
      0001F9 DD 7E F9         [19]  433 	ld	a, -7 (ix)
      0001FC DD 77 F1         [19]  434 	ld	-15 (ix), a
      0001FF DD 7E FE         [19]  435 	ld	a, -2 (ix)
      000202 DD 77 F2         [19]  436 	ld	-14 (ix), a
      000205 DD 7E FF         [19]  437 	ld	a, -1 (ix)
      000208 DD 77 F3         [19]  438 	ld	-13 (ix), a
      00020B DD 36 FE 00      [19]  439 	ld	-2 (ix), #0x00
      00020F                        440 00114$:
      00020F DD 6E FA         [19]  441 	ld	l, -6 (ix)
      000212 DD 66 FB         [19]  442 	ld	h, -5 (ix)
      000215 DD 7E FE         [19]  443 	ld	a,-2 (ix)
      000218 96               [ 7]  444 	sub	a,(hl)
      000219 D2r84r03         [10]  445 	jp	NC, 00122$
                                    446 ;./lib/entities.c:15: unsigned char desplazado = (j<<2);
      00021C DD 7E FE         [19]  447 	ld	a, -2 (ix)
      00021F 87               [ 4]  448 	add	a, a
      000220 87               [ 4]  449 	add	a, a
                                    450 ;./lib/entities.c:16: unsigned char jCalculated = desplazado + frame, y = entidad->y+(desplazado<<2);
      000221 47               [ 4]  451 	ld	b, a
      000222 DD 86 EF         [19]  452 	add	a, -17 (ix)
      000225 DD 77 F4         [19]  453 	ld	-12 (ix), a
      000228 DD 6E F0         [19]  454 	ld	l, -16 (ix)
      00022B DD 66 F1         [19]  455 	ld	h, -15 (ix)
      00022E 4E               [ 7]  456 	ld	c, (hl)
      00022F 78               [ 4]  457 	ld	a, b
      000230 87               [ 4]  458 	add	a, a
      000231 87               [ 4]  459 	add	a, a
      000232 81               [ 4]  460 	add	a, c
      000233 DD 77 F5         [19]  461 	ld	-11 (ix), a
                                    462 ;./lib/entities.c:17: for(i=0;i<sprite->ancho;i++) {
      000236 DD 36 FF 00      [19]  463 	ld	-1 (ix), #0x00
      00023A                        464 00111$:
      00023A DD 6E F2         [19]  465 	ld	l, -14 (ix)
      00023D DD 66 F3         [19]  466 	ld	h, -13 (ix)
      000240 DD 7E FF         [19]  467 	ld	a,-1 (ix)
      000243 96               [ 7]  468 	sub	a,(hl)
      000244 30 4C            [12]  469 	jr	NC, 00115$
                                    470 ;./lib/entities.c:18: SMS_addSprite(entidad->x+(i<<3),y, jCalculated + (i<<1) );  
      000246 DD 6E FC         [19]  471 	ld	l, -4 (ix)
      000249 DD 66 FD         [19]  472 	ld	h, -3 (ix)
      00024C 7E               [ 7]  473 	ld	a, (hl)
      00024D DD 77 F9         [19]  474 	ld	-7 (ix), a
      000250 DD 77 F6         [19]  475 	ld	-10 (ix), a
      000253 DD 36 F7 00      [19]  476 	ld	-9 (ix), #0x00
      000257 DD 7E FF         [19]  477 	ld	a, -1 (ix)
      00025A DD 77 F8         [19]  478 	ld	-8 (ix), a
      00025D DD 36 F9 00      [19]  479 	ld	-7 (ix), #0x00
      000261 6F               [ 4]  480 	ld	l, a
      000262 26 00            [ 7]  481 	ld	h, #0x00
      000264 29               [11]  482 	add	hl, hl
      000265 29               [11]  483 	add	hl, hl
      000266 29               [11]  484 	add	hl, hl
      000267 DD 5E F6         [19]  485 	ld	e, -10 (ix)
      00026A 16 00            [ 7]  486 	ld	d, #0x00
      00026C 19               [11]  487 	add	hl, de
      00026D 45               [ 4]  488 	ld	b, l
      00026E 0E 00            [ 7]  489 	ld	c, #0x00
      000270 DD 5E F4         [19]  490 	ld	e, -12 (ix)
      000273 16 00            [ 7]  491 	ld	d, #0x00
      000275 DD 6E F8         [19]  492 	ld	l, -8 (ix)
      000278 DD 66 F9         [19]  493 	ld	h, -7 (ix)
      00027B 29               [11]  494 	add	hl, hl
      00027C 19               [11]  495 	add	hl, de
      00027D 7D               [ 4]  496 	ld	a, l
      00027E 16 00            [ 7]  497 	ld	d, #0x00
      000280 B1               [ 4]  498 	or	a, c
      000281 5F               [ 4]  499 	ld	e, a
      000282 7A               [ 4]  500 	ld	a, d
      000283 B0               [ 4]  501 	or	a, b
      000284 57               [ 4]  502 	ld	d, a
      000285 DD 6E F5         [19]  503 	ld	l, -11 (ix)
                                    504 ;	spillPairReg hl
                                    505 ;	spillPairReg hl
      000288 26 00            [ 7]  506 	ld	h, #0x00
                                    507 ;	spillPairReg hl
                                    508 ;	spillPairReg hl
      00028A CDr00r00         [17]  509 	call	_SMS_addSprite_f
                                    510 ;./lib/entities.c:17: for(i=0;i<sprite->ancho;i++) {
      00028D DD 34 FF         [23]  511 	inc	-1 (ix)
      000290 18 A8            [12]  512 	jr	00111$
      000292                        513 00115$:
                                    514 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      000292 DD 34 FE         [23]  515 	inc	-2 (ix)
      000295 C3r0Fr02         [10]  516 	jp	00114$
      000298                        517 00108$:
                                    518 ;./lib/entities.c:23: int frame = sprite->tamano*entidad->frame*32;
      000298 DD 5E F4         [19]  519 	ld	e, -12 (ix)
      00029B DD 66 F5         [19]  520 	ld	h, -11 (ix)
                                    521 ;	spillPairReg hl
                                    522 ;	spillPairReg hl
      00029E 2E 00            [ 7]  523 	ld	l, #0x00
      0002A0 55               [ 4]  524 	ld	d, l
      0002A1 06 08            [ 7]  525 	ld	b, #0x08
      0002A3                        526 00202$:
      0002A3 29               [11]  527 	add	hl, hl
      0002A4 30 01            [12]  528 	jr	NC, 00203$
      0002A6 19               [11]  529 	add	hl, de
      0002A7                        530 00203$:
      0002A7 10 FA            [13]  531 	djnz	00202$
      0002A9 29               [11]  532 	add	hl, hl
      0002AA 29               [11]  533 	add	hl, hl
      0002AB 29               [11]  534 	add	hl, hl
      0002AC 29               [11]  535 	add	hl, hl
      0002AD 29               [11]  536 	add	hl, hl
      0002AE DD 75 F6         [19]  537 	ld	-10 (ix), l
      0002B1 DD 74 F7         [19]  538 	ld	-9 (ix), h
                                    539 ;./lib/entities.c:24: if (entidad->frame != sprite->frameInVRAM){
      0002B4 DD 7E FA         [19]  540 	ld	a, -6 (ix)
      0002B7 C6 09            [ 7]  541 	add	a, #0x09
      0002B9 4F               [ 4]  542 	ld	c, a
      0002BA DD 7E FB         [19]  543 	ld	a, -5 (ix)
      0002BD CE 00            [ 7]  544 	adc	a, #0x00
      0002BF 47               [ 4]  545 	ld	b, a
      0002C0 0A               [ 7]  546 	ld	a, (bc)
      0002C1 5F               [ 4]  547 	ld	e, a
      0002C2 DD 7E F4         [19]  548 	ld	a, -12 (ix)
      0002C5 93               [ 4]  549 	sub	a, e
      0002C6 28 42            [12]  550 	jr	Z, 00133$
                                    551 ;./lib/entities.c:25: SMS_loadTiles(sprite->data + frame,sprite->beginVRAM,sprite->tamano<<5);
      0002C8 DD 6E F5         [19]  552 	ld	l, -11 (ix)
                                    553 ;	spillPairReg hl
                                    554 ;	spillPairReg hl
      0002CB 26 00            [ 7]  555 	ld	h, #0x00
                                    556 ;	spillPairReg hl
                                    557 ;	spillPairReg hl
      0002CD 29               [11]  558 	add	hl, hl
      0002CE 29               [11]  559 	add	hl, hl
      0002CF 29               [11]  560 	add	hl, hl
      0002D0 29               [11]  561 	add	hl, hl
      0002D1 29               [11]  562 	add	hl, hl
      0002D2 E5               [11]  563 	push	hl
      0002D3 FD E1            [14]  564 	pop	iy
      0002D5 DD 5E FA         [19]  565 	ld	e, -6 (ix)
      0002D8 DD 56 FB         [19]  566 	ld	d, -5 (ix)
      0002DB 21 07 00         [10]  567 	ld	hl, #7
      0002DE 19               [11]  568 	add	hl, de
      0002DF 5E               [ 7]  569 	ld	e, (hl)
      0002E0 23               [ 6]  570 	inc	hl
      0002E1 56               [ 7]  571 	ld	d, (hl)
      0002E2 DD 6E F6         [19]  572 	ld	l, -10 (ix)
                                    573 ;	spillPairReg hl
                                    574 ;	spillPairReg hl
      0002E5 DD 66 F7         [19]  575 	ld	h, -9 (ix)
                                    576 ;	spillPairReg hl
                                    577 ;	spillPairReg hl
      0002E8 19               [11]  578 	add	hl, de
      0002E9 EB               [ 4]  579 	ex	de, hl
      0002EA DD 6E F2         [19]  580 	ld	l, -14 (ix)
      0002ED DD 66 F3         [19]  581 	ld	h, -13 (ix)
      0002F0 7E               [ 7]  582 	ld	a, (hl)
      0002F1 23               [ 6]  583 	inc	hl
      0002F2 66               [ 7]  584 	ld	h, (hl)
                                    585 ;	spillPairReg hl
      0002F3 6F               [ 4]  586 	ld	l, a
                                    587 ;	spillPairReg hl
                                    588 ;	spillPairReg hl
      0002F4 29               [11]  589 	add	hl, hl
      0002F5 29               [11]  590 	add	hl, hl
      0002F6 29               [11]  591 	add	hl, hl
      0002F7 29               [11]  592 	add	hl, hl
      0002F8 29               [11]  593 	add	hl, hl
      0002F9 CB F4            [ 8]  594 	set	6, h
      0002FB C5               [11]  595 	push	bc
      0002FC FD E5            [15]  596 	push	iy
      0002FE CDr00r00         [17]  597 	call	_SMS_VRAMmemcpy
      000301 C1               [10]  598 	pop	bc
                                    599 ;./lib/entities.c:26: sprite->frameInVRAM = entidad->frame;
      000302 DD 6E F0         [19]  600 	ld	l, -16 (ix)
      000305 DD 66 F1         [19]  601 	ld	h, -15 (ix)
      000308 7E               [ 7]  602 	ld	a, (hl)
      000309 02               [ 7]  603 	ld	(bc), a
                                    604 ;./lib/entities.c:28: for(j=0;j<sprite->alto;j++) {
      00030A                        605 00133$:
      00030A DD 7E FE         [19]  606 	ld	a, -2 (ix)
      00030D DD 77 F6         [19]  607 	ld	-10 (ix), a
      000310 DD 7E FF         [19]  608 	ld	a, -1 (ix)
      000313 DD 77 F7         [19]  609 	ld	-9 (ix), a
      000316 DD 36 FF 00      [19]  610 	ld	-1 (ix), #0x00
      00031A                        611 00120$:
      00031A DD 6E FA         [19]  612 	ld	l, -6 (ix)
      00031D DD 66 FB         [19]  613 	ld	h, -5 (ix)
      000320 DD 7E FF         [19]  614 	ld	a,-1 (ix)
      000323 96               [ 7]  615 	sub	a,(hl)
      000324 30 5E            [12]  616 	jr	NC, 00122$
                                    617 ;./lib/entities.c:29: for(i=0;i<sprite->ancho;i++) {
      000326 0E 00            [ 7]  618 	ld	c, #0x00
      000328                        619 00117$:
      000328 DD 6E F6         [19]  620 	ld	l, -10 (ix)
      00032B DD 66 F7         [19]  621 	ld	h, -9 (ix)
      00032E 46               [ 7]  622 	ld	b, (hl)
      00032F 79               [ 4]  623 	ld	a, c
      000330 90               [ 4]  624 	sub	a, b
      000331 30 4C            [12]  625 	jr	NC, 00121$
                                    626 ;./lib/entities.c:30: SMS_addSprite(entidad->x+(i<<3),entidad->y+(j<<4), (j<<2) + (i<<1) );  
      000333 DD 6E FC         [19]  627 	ld	l, -4 (ix)
      000336 DD 66 FD         [19]  628 	ld	h, -3 (ix)
      000339 7E               [ 7]  629 	ld	a, (hl)
      00033A 59               [ 4]  630 	ld	e, c
      00033B 16 00            [ 7]  631 	ld	d, #0x00
      00033D 6B               [ 4]  632 	ld	l, e
      00033E 62               [ 4]  633 	ld	h, d
      00033F 29               [11]  634 	add	hl, hl
      000340 29               [11]  635 	add	hl, hl
      000341 29               [11]  636 	add	hl, hl
      000342 85               [ 4]  637 	add	a, l
                                    638 ;	spillPairReg hl
                                    639 ;	spillPairReg hl
                                    640 ;	spillPairReg hl
                                    641 ;	spillPairReg hl
      000343 67               [ 4]  642 	ld	h, a
                                    643 ;	spillPairReg hl
                                    644 ;	spillPairReg hl
      000344 2E 00            [ 7]  645 	ld	l, #0x00
                                    646 ;	spillPairReg hl
                                    647 ;	spillPairReg hl
      000346 DD 7E FF         [19]  648 	ld	a, -1 (ix)
      000349 DD 77 F4         [19]  649 	ld	-12 (ix), a
      00034C DD 36 F5 00      [19]  650 	ld	-11 (ix), #0x00
      000350 87               [ 4]  651 	add	a, a
      000351 87               [ 4]  652 	add	a, a
      000352 EB               [ 4]  653 	ex	de, hl
      000353 29               [11]  654 	add	hl, hl
      000354 EB               [ 4]  655 	ex	de, hl
      000355 83               [ 4]  656 	add	a, e
      000356 5F               [ 4]  657 	ld	e, a
      000357 16 00            [ 7]  658 	ld	d, #0x00
      000359 7B               [ 4]  659 	ld	a, e
      00035A B5               [ 4]  660 	or	a, l
      00035B 5F               [ 4]  661 	ld	e, a
      00035C 7A               [ 4]  662 	ld	a, d
      00035D B4               [ 4]  663 	or	a, h
      00035E 57               [ 4]  664 	ld	d, a
      00035F DD 6E F8         [19]  665 	ld	l, -8 (ix)
      000362 DD 66 F9         [19]  666 	ld	h, -7 (ix)
      000365 7E               [ 7]  667 	ld	a, (hl)
      000366 06 00            [ 7]  668 	ld	b, #0x00
      000368 DD 6E F4         [19]  669 	ld	l, -12 (ix)
      00036B DD 66 F5         [19]  670 	ld	h, -11 (ix)
      00036E 29               [11]  671 	add	hl, hl
      00036F 29               [11]  672 	add	hl, hl
      000370 29               [11]  673 	add	hl, hl
      000371 29               [11]  674 	add	hl, hl
      000372 85               [ 4]  675 	add	a, l
      000373 6F               [ 4]  676 	ld	l, a
                                    677 ;	spillPairReg hl
                                    678 ;	spillPairReg hl
      000374 78               [ 4]  679 	ld	a, b
      000375 8C               [ 4]  680 	adc	a, h
      000376 67               [ 4]  681 	ld	h, a
                                    682 ;	spillPairReg hl
                                    683 ;	spillPairReg hl
      000377 C5               [11]  684 	push	bc
      000378 CDr00r00         [17]  685 	call	_SMS_addSprite_f
      00037B C1               [10]  686 	pop	bc
                                    687 ;./lib/entities.c:29: for(i=0;i<sprite->ancho;i++) {
      00037C 0C               [ 4]  688 	inc	c
      00037D 18 A9            [12]  689 	jr	00117$
      00037F                        690 00121$:
                                    691 ;./lib/entities.c:28: for(j=0;j<sprite->alto;j++) {
      00037F DD 34 FF         [23]  692 	inc	-1 (ix)
      000382 18 96            [12]  693 	jr	00120$
      000384                        694 00122$:
                                    695 ;./lib/entities.c:34: }
      000384 DD F9            [10]  696 	ld	sp, ix
      000386 DD E1            [14]  697 	pop	ix
      000388 C9               [10]  698 	ret
                                    699 ;./alex.c:17: unsigned char canUp(){
                                    700 ;	---------------------------------
                                    701 ; Function canUp
                                    702 ; ---------------------------------
      000389                        703 _canUp::
                                    704 ;./alex.c:18: if (alex.x < 2)
      000389 3Ar03r00         [13]  705 	ld	a, (#_alex + 0)
      00038C D6 02            [ 7]  706 	sub	a, #0x02
      00038E 30 02            [12]  707 	jr	NC, 00102$
                                    708 ;./alex.c:19: return 0;
      000390 AF               [ 4]  709 	xor	a, a
      000391 C9               [10]  710 	ret
      000392                        711 00102$:
                                    712 ;./alex.c:20: return 1;
      000392 3E 01            [ 7]  713 	ld	a, #0x01
                                    714 ;./alex.c:21: }
      000394 C9               [10]  715 	ret
                                    716 ;./alex.c:23: unsigned char canDown() {
                                    717 ;	---------------------------------
                                    718 ; Function canDown
                                    719 ; ---------------------------------
      000395                        720 _canDown::
                                    721 ;./alex.c:24: if (alex.y > 155)
      000395 21r04r00         [10]  722 	ld	hl, #_alex+1
      000398 4E               [ 7]  723 	ld	c, (hl)
      000399 3E 9B            [ 7]  724 	ld	a, #0x9b
      00039B 91               [ 4]  725 	sub	a, c
      00039C 30 02            [12]  726 	jr	NC, 00102$
                                    727 ;./alex.c:25: return 0;
      00039E AF               [ 4]  728 	xor	a, a
      00039F C9               [10]  729 	ret
      0003A0                        730 00102$:
                                    731 ;./alex.c:26: return 1;
      0003A0 3E 01            [ 7]  732 	ld	a, #0x01
                                    733 ;./alex.c:27: }
      0003A2 C9               [10]  734 	ret
                                    735 ;./alex.c:29: unsigned char canLeft() {
                                    736 ;	---------------------------------
                                    737 ; Function canLeft
                                    738 ; ---------------------------------
      0003A3                        739 _canLeft::
                                    740 ;./alex.c:30: if (alex.x < 9)
      0003A3 3Ar03r00         [13]  741 	ld	a, (#_alex + 0)
      0003A6 D6 09            [ 7]  742 	sub	a, #0x09
      0003A8 30 02            [12]  743 	jr	NC, 00102$
                                    744 ;./alex.c:31: return 0;
      0003AA AF               [ 4]  745 	xor	a, a
      0003AB C9               [10]  746 	ret
      0003AC                        747 00102$:
                                    748 ;./alex.c:32: return 1;
      0003AC 3E 01            [ 7]  749 	ld	a, #0x01
                                    750 ;./alex.c:33: }
      0003AE C9               [10]  751 	ret
                                    752 ;./alex.c:35: unsigned char canRight() {
                                    753 ;	---------------------------------
                                    754 ; Function canRight
                                    755 ; ---------------------------------
      0003AF                        756 _canRight::
                                    757 ;./alex.c:36: if (alex.x > 238)
      0003AF 21r03r00         [10]  758 	ld	hl, #_alex+0
      0003B2 4E               [ 7]  759 	ld	c, (hl)
      0003B3 3E EE            [ 7]  760 	ld	a, #0xee
      0003B5 91               [ 4]  761 	sub	a, c
      0003B6 30 02            [12]  762 	jr	NC, 00102$
                                    763 ;./alex.c:37: return 0;
      0003B8 AF               [ 4]  764 	xor	a, a
      0003B9 C9               [10]  765 	ret
      0003BA                        766 00102$:
                                    767 ;./alex.c:38: return 1;
      0003BA 3E 01            [ 7]  768 	ld	a, #0x01
                                    769 ;./alex.c:39: }
      0003BC C9               [10]  770 	ret
                                    771 ;./alex.c:41: void moveAlexSuelo(int keys) {
                                    772 ;	---------------------------------
                                    773 ; Function moveAlexSuelo
                                    774 ; ---------------------------------
      0003BD                        775 _moveAlexSuelo::
      0003BD DD E5            [15]  776 	push	ix
      0003BF DD 21 00 00      [14]  777 	ld	ix,#0
      0003C3 DD 39            [15]  778 	add	ix,sp
      0003C5 F5               [11]  779 	push	af
      0003C6 F5               [11]  780 	push	af
      0003C7 F5               [11]  781 	push	af
      0003C8 DD 75 FE         [19]  782 	ld	-2 (ix), l
      0003CB DD 74 FF         [19]  783 	ld	-1 (ix), h
                                    784 ;./alex.c:43: if (keys & PORT_A_KEY_LEFT)
      0003CE DD 7E FE         [19]  785 	ld	a, -2 (ix)
      0003D1 E6 04            [ 7]  786 	and	a, #0x04
      0003D3 DD 77 FA         [19]  787 	ld	-6 (ix), a
      0003D6 DD 36 FB 00      [19]  788 	ld	-5 (ix), #0x00
                                    789 ;./alex.c:45: if (keys & PORT_A_KEY_RIGHT)
      0003DA DD 7E FE         [19]  790 	ld	a, -2 (ix)
      0003DD E6 08            [ 7]  791 	and	a, #0x08
      0003DF DD 77 FC         [19]  792 	ld	-4 (ix), a
      0003E2 DD 36 FD 00      [19]  793 	ld	-3 (ix), #0x00
                                    794 ;./alex.c:42: if ((keys & PORT_A_KEY_DOWN)){
      0003E6 DD CB FE 4E      [20]  795 	bit	1, -2 (ix)
      0003EA 28 33            [12]  796 	jr	Z, 00109$
                                    797 ;./alex.c:43: if (keys & PORT_A_KEY_LEFT)
      0003EC AF               [ 4]  798 	xor	a, a
      0003ED DD B6 FA         [19]  799 	or	a, -6 (ix)
      0003F0 28 05            [12]  800 	jr	Z, 00102$
                                    801 ;./alex.c:44: alex.oriented = 1;
      0003F2 21r07r00         [10]  802 	ld	hl, #_alex+4
      0003F5 36 01            [10]  803 	ld	(hl), #0x01
      0003F7                        804 00102$:
                                    805 ;./alex.c:45: if (keys & PORT_A_KEY_RIGHT)
      0003F7 AF               [ 4]  806 	xor	a, a
      0003F8 DD B6 FC         [19]  807 	or	a, -4 (ix)
      0003FB 28 05            [12]  808 	jr	Z, 00104$
                                    809 ;./alex.c:46: alex.oriented = 0;
      0003FD 21r07r00         [10]  810 	ld	hl, #_alex+4
      000400 36 00            [10]  811 	ld	(hl), #0x00
      000402                        812 00104$:
                                    813 ;./alex.c:47: if (!alex.oriented)
      000402 3Ar07r00         [13]  814 	ld	a,(#_alex + 4)
                                    815 ;./alex.c:48: alex.frame = 7;
                                    816 ;./alex.c:47: if (!alex.oriented)
      000405 DD 77 FD         [19]  817 	ld	-3 (ix), a
      000408 B7               [ 4]  818 	or	a, a
      000409 20 07            [12]  819 	jr	NZ, 00106$
                                    820 ;./alex.c:48: alex.frame = 7;
      00040B 21r05r00         [10]  821 	ld	hl, #(_alex + 2)
      00040E 36 07            [10]  822 	ld	(hl), #0x07
      000410 18 05            [12]  823 	jr	00107$
      000412                        824 00106$:
                                    825 ;./alex.c:50: alex.frame = 15;
      000412 21r05r00         [10]  826 	ld	hl, #(_alex + 2)
      000415 36 0F            [10]  827 	ld	(hl), #0x0f
      000417                        828 00107$:
                                    829 ;./alex.c:51: alex.lastChangeFrame = 15;
      000417 21r06r00         [10]  830 	ld	hl, #_alex + 3
      00041A 36 0F            [10]  831 	ld	(hl), #0x0f
                                    832 ;./alex.c:52: return; // not move
      00041C C3rBBr04         [10]  833 	jp	00135$
      00041F                        834 00109$:
                                    835 ;./alex.c:55: if (keys & PORT_A_KEY_2) {
      00041F DD CB FE 6E      [20]  836 	bit	5, -2 (ix)
      000423 28 1D            [12]  837 	jr	Z, 00114$
                                    838 ;./alex.c:56: if (alex.y > 100)
      000425 01r04r00         [10]  839 	ld	bc, #_alex+1
      000428 0A               [ 7]  840 	ld	a, (bc)
      000429 5F               [ 4]  841 	ld	e, a
      00042A 3E 64            [ 7]  842 	ld	a, #0x64
      00042C 93               [ 4]  843 	sub	a, e
      00042D 30 09            [12]  844 	jr	NC, 00111$
                                    845 ;./alex.c:57: maxSalto = alex.y - 100;
      00042F 7B               [ 4]  846 	ld	a, e
      000430 21r02r00         [10]  847 	ld	hl, #_maxSalto
      000433 C6 9C            [ 7]  848 	add	a, #0x9c
      000435 77               [ 7]  849 	ld	(hl), a
      000436 18 05            [12]  850 	jr	00112$
      000438                        851 00111$:
                                    852 ;./alex.c:59: maxSalto = 0;
      000438 21r02r00         [10]  853 	ld	hl, #_maxSalto
      00043B 36 00            [10]  854 	ld	(hl), #0x00
      00043D                        855 00112$:
                                    856 ;./alex.c:60: alex.y--;
      00043D 0A               [ 7]  857 	ld	a, (bc)
      00043E 3D               [ 4]  858 	dec	a
      00043F 02               [ 7]  859 	ld	(bc), a
                                    860 ;./alex.c:61: return;
      000440 18 79            [12]  861 	jr	00135$
      000442                        862 00114$:
                                    863 ;./alex.c:63: if ((keys & PORT_A_KEY_LEFT) && alex.x > 8 )
      000442 AF               [ 4]  864 	xor	a, a
      000443 DD B6 FA         [19]  865 	or	a, -6 (ix)
      000446 28 31            [12]  866 	jr	Z, 00132$
      000448 21r03r00         [10]  867 	ld	hl, #_alex+0
      00044B 4E               [ 7]  868 	ld	c, (hl)
      00044C 3E 08            [ 7]  869 	ld	a, #0x08
      00044E 91               [ 4]  870 	sub	a, c
      00044F 30 28            [12]  871 	jr	NC, 00132$
                                    872 ;./alex.c:65: alex.x -= 1;
      000451 0D               [ 4]  873 	dec	c
      000452 71               [ 7]  874 	ld	(hl), c
                                    875 ;./alex.c:66: alex.oriented = 1;
      000453 21r07r00         [10]  876 	ld	hl, #_alex + 4
      000456 36 01            [10]  877 	ld	(hl), #0x01
                                    878 ;./alex.c:67: alex.lastChangeFrame++;
      000458 21r06r00         [10]  879 	ld	hl, #_alex + 3
      00045B 34               [11]  880 	inc	(hl)
      00045C 7E               [ 7]  881 	ld	a, (hl)
                                    882 ;./alex.c:70: alex.frame++;
      00045D 11r05r00         [10]  883 	ld	de, #_alex + 2
                                    884 ;./alex.c:68: if (alex.lastChangeFrame == 11) {
                                    885 ;./alex.c:69: alex.lastChangeFrame = 0;
      000460 D6 0B            [ 7]  886 	sub	a, #0x0b
      000462 20 04            [12]  887 	jr	NZ, 00116$
      000464 77               [ 7]  888 	ld	(hl), a
                                    889 ;./alex.c:70: alex.frame++;
      000465 1A               [ 7]  890 	ld	a, (de)
      000466 3C               [ 4]  891 	inc	a
      000467 12               [ 7]  892 	ld	(de), a
      000468                        893 00116$:
                                    894 ;./alex.c:72: if (alex.frame > 11 || alex.frame < 8)
      000468 1A               [ 7]  895 	ld	a, (de)
      000469 4F               [ 4]  896 	ld	c, a
      00046A 3E 0B            [ 7]  897 	ld	a, #0x0b
      00046C 91               [ 4]  898 	sub	a, c
      00046D 38 05            [12]  899 	jr	C, 00117$
      00046F 79               [ 4]  900 	ld	a, c
      000470 D6 08            [ 7]  901 	sub	a, #0x08
      000472 30 47            [12]  902 	jr	NC, 00135$
      000474                        903 00117$:
                                    904 ;./alex.c:73: alex.frame = 8;
      000474 3E 08            [ 7]  905 	ld	a, #0x08
      000476 12               [ 7]  906 	ld	(de), a
      000477 18 42            [12]  907 	jr	00135$
      000479                        908 00132$:
                                    909 ;./alex.c:75: else if ((keys & PORT_A_KEY_RIGHT) && alex.x <240)
      000479 AF               [ 4]  910 	xor	a, a
      00047A DD B6 FC         [19]  911 	or	a, -4 (ix)
      00047D 28 2A            [12]  912 	jr	Z, 00128$
      00047F 01r03r00         [10]  913 	ld	bc, #_alex+0
      000482 0A               [ 7]  914 	ld	a, (bc)
      000483 FE F0            [ 7]  915 	cp	a, #0xf0
      000485 30 22            [12]  916 	jr	NC, 00128$
                                    917 ;./alex.c:77: alex.x += 1;
      000487 3C               [ 4]  918 	inc	a
      000488 02               [ 7]  919 	ld	(bc), a
                                    920 ;./alex.c:78: alex.oriented = 0;
      000489 21r07r00         [10]  921 	ld	hl, #_alex + 4
      00048C 36 00            [10]  922 	ld	(hl), #0x00
                                    923 ;./alex.c:79: alex.lastChangeFrame++;
      00048E 21r06r00         [10]  924 	ld	hl, #_alex + 3
      000491 34               [11]  925 	inc	(hl)
      000492 7E               [ 7]  926 	ld	a, (hl)
                                    927 ;./alex.c:82: alex.frame++;
      000493 11r05r00         [10]  928 	ld	de, #_alex + 2
                                    929 ;./alex.c:80: if (alex.lastChangeFrame == 11) {
                                    930 ;./alex.c:81: alex.lastChangeFrame = 0;
      000496 D6 0B            [ 7]  931 	sub	a, #0x0b
      000498 20 04            [12]  932 	jr	NZ, 00121$
      00049A 77               [ 7]  933 	ld	(hl), a
                                    934 ;./alex.c:82: alex.frame++;
      00049B 1A               [ 7]  935 	ld	a, (de)
      00049C 3C               [ 4]  936 	inc	a
      00049D 12               [ 7]  937 	ld	(de), a
      00049E                        938 00121$:
                                    939 ;./alex.c:84: if (alex.frame > 3 || alex.frame < 0)
      00049E 1A               [ 7]  940 	ld	a, (de)
      00049F 4F               [ 4]  941 	ld	c, a
      0004A0 3E 03            [ 7]  942 	ld	a, #0x03
      0004A2 91               [ 4]  943 	sub	a, c
      0004A3 30 16            [12]  944 	jr	NC, 00135$
                                    945 ;./alex.c:85: alex.frame = 0;
      0004A5 AF               [ 4]  946 	xor	a, a
      0004A6 12               [ 7]  947 	ld	(de), a
      0004A7 18 12            [12]  948 	jr	00135$
      0004A9                        949 00128$:
                                    950 ;./alex.c:89: alex.frame = 4;
      0004A9 21r05r00         [10]  951 	ld	hl, #(_alex + 2)
      0004AC 36 04            [10]  952 	ld	(hl), #0x04
                                    953 ;./alex.c:90: if (alex.oriented)
      0004AE 3Ar07r00         [13]  954 	ld	a, (#_alex + 4)
      0004B1 B7               [ 4]  955 	or	a, a
      0004B2 28 02            [12]  956 	jr	Z, 00126$
                                    957 ;./alex.c:91: alex.frame = 12;
      0004B4 36 0C            [10]  958 	ld	(hl), #0x0c
      0004B6                        959 00126$:
                                    960 ;./alex.c:92: alex.lastChangeFrame = 10;
      0004B6 21r06r00         [10]  961 	ld	hl, #_alex + 3
      0004B9 36 0A            [10]  962 	ld	(hl), #0x0a
      0004BB                        963 00135$:
                                    964 ;./alex.c:94: }
      0004BB DD F9            [10]  965 	ld	sp, ix
      0004BD DD E1            [14]  966 	pop	ix
      0004BF C9               [10]  967 	ret
                                    968 ;./alex.c:96: void moveAlexAire(int keys, unsigned char puedeSubir, unsigned char puedeDerecha, unsigned char puedeIzquieda) {
                                    969 ;	---------------------------------
                                    970 ; Function moveAlexAire
                                    971 ; ---------------------------------
      0004C0                        972 _moveAlexAire::
      0004C0 DD E5            [15]  973 	push	ix
      0004C2 DD 21 00 00      [14]  974 	ld	ix,#0
      0004C6 DD 39            [15]  975 	add	ix,sp
      0004C8 F5               [11]  976 	push	af
      0004C9 3B               [ 6]  977 	dec	sp
      0004CA DD 75 FE         [19]  978 	ld	-2 (ix), l
      0004CD DD 74 FF         [19]  979 	ld	-1 (ix), h
                                    980 ;./alex.c:97: if (alex.y > maxSalto) {
      0004D0 21r04r00         [10]  981 	ld	hl, #(_alex + 1)
      0004D3 46               [ 7]  982 	ld	b, (hl)
                                    983 ;./alex.c:98: alex.y -= 2;
      0004D4 48               [ 4]  984 	ld	c, b
                                    985 ;./alex.c:97: if (alex.y > maxSalto) {
      0004D5 3Ar02r00         [13]  986 	ld	a, (_maxSalto+0)
      0004D8 90               [ 4]  987 	sub	a, b
      0004D9 30 08            [12]  988 	jr	NC, 00102$
                                    989 ;./alex.c:98: alex.y -= 2;
      0004DB 0D               [ 4]  990 	dec	c
      0004DC 0D               [ 4]  991 	dec	c
      0004DD 21r04r00         [10]  992 	ld	hl, #(_alex + 1)
      0004E0 71               [ 7]  993 	ld	(hl), c
      0004E1 18 0E            [12]  994 	jr	00103$
      0004E3                        995 00102$:
                                    996 ;./alex.c:101: alex.y += 2; // bajando
      0004E3 0C               [ 4]  997 	inc	c
      0004E4 0C               [ 4]  998 	inc	c
      0004E5 21r04r00         [10]  999 	ld	hl, #(_alex + 1)
      0004E8 71               [ 7] 1000 	ld	(hl), c
                                   1001 ;./alex.c:102: maxSalto = 255;
      0004E9 FD 21r02r00      [14] 1002 	ld	iy, #_maxSalto
      0004ED FD 36 00 FF      [19] 1003 	ld	0 (iy), #0xff
      0004F1                       1004 00103$:
                                   1005 ;./alex.c:105: if (alex.state != PUÑETAZO_SALTANDO)
                                   1006 ;./alex.c:106: alex.oriented = 1;
                                   1007 ;./alex.c:104: if (keys & PORT_A_KEY_LEFT) {
      0004F1 DD CB FE 56      [20] 1008 	bit	2, -2 (ix)
      0004F5 28 1A            [12] 1009 	jr	Z, 00109$
                                   1010 ;./alex.c:105: if (alex.state != PUÑETAZO_SALTANDO)
      0004F7 3Ar08r00         [13] 1011 	ld	a, (#(_alex + 5) + 0)
      0004FA D6 10            [ 7] 1012 	sub	a, #0x10
      0004FC 28 05            [12] 1013 	jr	Z, 00105$
                                   1014 ;./alex.c:106: alex.oriented = 1;
      0004FE 21r07r00         [10] 1015 	ld	hl, #(_alex + 4)
      000501 36 01            [10] 1016 	ld	(hl), #0x01
      000503                       1017 00105$:
                                   1018 ;./alex.c:107: if (puedeIzquieda)
      000503 DD 7E 06         [19] 1019 	ld	a, 6 (ix)
      000506 B7               [ 4] 1020 	or	a, a
      000507 28 08            [12] 1021 	jr	Z, 00109$
                                   1022 ;./alex.c:108: alex.x -= 2;
      000509 3Ar03r00         [13] 1023 	ld	a, (#_alex + 0)
      00050C 3D               [ 4] 1024 	dec	a
      00050D 3D               [ 4] 1025 	dec	a
      00050E 32r03r00         [13] 1026 	ld	(#_alex),a
      000511                       1027 00109$:
                                   1028 ;./alex.c:110: if (keys & PORT_A_KEY_RIGHT) {
      000511 DD CB FE 5E      [20] 1029 	bit	3, -2 (ix)
      000515 28 1A            [12] 1030 	jr	Z, 00115$
                                   1031 ;./alex.c:111: if (alex.state != PUÑETAZO_SALTANDO)
      000517 3Ar08r00         [13] 1032 	ld	a, (#(_alex + 5) + 0)
      00051A D6 10            [ 7] 1033 	sub	a, #0x10
      00051C 28 05            [12] 1034 	jr	Z, 00111$
                                   1035 ;./alex.c:112: alex.oriented = 0;
      00051E 21r07r00         [10] 1036 	ld	hl, #(_alex + 4)
      000521 36 00            [10] 1037 	ld	(hl), #0x00
      000523                       1038 00111$:
                                   1039 ;./alex.c:113: if (puedeDerecha)
      000523 DD 7E 05         [19] 1040 	ld	a, 5 (ix)
      000526 B7               [ 4] 1041 	or	a, a
      000527 28 08            [12] 1042 	jr	Z, 00115$
                                   1043 ;./alex.c:114: alex.x += 2;
      000529 3Ar03r00         [13] 1044 	ld	a, (#_alex + 0)
      00052C C6 02            [ 7] 1045 	add	a, #0x02
      00052E 32r03r00         [13] 1046 	ld	(#_alex),a
      000531                       1047 00115$:
                                   1048 ;./alex.c:116: if (alex.state == PUÑETAZO_SALTANDO) {
      000531 21r08r00         [10] 1049 	ld	hl, #(_alex + 5)
      000534 4E               [ 7] 1050 	ld	c, (hl)
                                   1051 ;./alex.c:117: alex.lastChangeFrame--;
                                   1052 ;./alex.c:122: alex.frame = 5;
                                   1053 ;./alex.c:116: if (alex.state == PUÑETAZO_SALTANDO) {
      000535 79               [ 4] 1054 	ld	a, c
      000536 D6 10            [ 7] 1055 	sub	a, #0x10
      000538 20 55            [12] 1056 	jr	NZ, 00127$
                                   1057 ;./alex.c:117: alex.lastChangeFrame--;
      00053A 21r06r00         [10] 1058 	ld	hl, #(_alex + 3)
      00053D 4E               [ 7] 1059 	ld	c, (hl)
      00053E 0D               [ 4] 1060 	dec	c
      00053F 21r06r00         [10] 1061 	ld	hl, #(_alex + 3)
                                   1062 ;./alex.c:118: if  (!alex.lastChangeFrame) {
      000542 79               [ 4] 1063 	ld	a,c
      000543 77               [ 7] 1064 	ld	(hl),a
      000544 B7               [ 4] 1065 	or	a, a
      000545 20 05            [12] 1066 	jr	NZ, 00117$
                                   1067 ;./alex.c:119: alex.state = 0;
      000547 21r08r00         [10] 1068 	ld	hl, #(_alex + 5)
      00054A 36 00            [10] 1069 	ld	(hl), #0x00
      00054C                       1070 00117$:
                                   1071 ;./alex.c:121: if (!alex.oriented) {
      00054C 3Ar07r00         [13] 1072 	ld	a, (#(_alex + 4) + 0)
      00054F B7               [ 4] 1073 	or	a, a
      000550 20 21            [12] 1074 	jr	NZ, 00119$
                                   1075 ;./alex.c:122: alex.frame = 5;
      000552 21r05r00         [10] 1076 	ld	hl, #(_alex + 2)
      000555 36 05            [10] 1077 	ld	(hl), #0x05
                                   1078 ;./alex.c:123: SMS_addSprite (alex.x + 16, alex.y + 9, 9);
      000557 21r03r00         [10] 1079 	ld	hl, #_alex
      00055A 4E               [ 7] 1080 	ld	c, (hl)
      00055B 06 00            [ 7] 1081 	ld	b, #0x00
      00055D 21 10 00         [10] 1082 	ld	hl, #0x0010
      000560 09               [11] 1083 	add	hl, bc
      000561 55               [ 4] 1084 	ld	d, l
      000562 1E 09            [ 7] 1085 	ld	e, #0x09
      000564 21r04r00         [10] 1086 	ld	hl, #(_alex + 1)
      000567 4E               [ 7] 1087 	ld	c, (hl)
      000568 06 00            [ 7] 1088 	ld	b, #0x00
      00056A 21 09 00         [10] 1089 	ld	hl, #0x0009
      00056D 09               [11] 1090 	add	hl, bc
      00056E CDr00r00         [17] 1091 	call	_SMS_addSprite_f
      000571 18 41            [12] 1092 	jr	00129$
      000573                       1093 00119$:
                                   1094 ;./alex.c:126: alex.frame = 13;
      000573 21r05r00         [10] 1095 	ld	hl, #(_alex + 2)
      000576 36 0D            [10] 1096 	ld	(hl), #0x0d
                                   1097 ;./alex.c:127: SMS_addSprite (alex.x - 8,  alex.y + 9, 11);
      000578 3Ar03r00         [13] 1098 	ld	a, (#_alex + 0)
      00057B C6 F8            [ 7] 1099 	add	a, #0xf8
      00057D 57               [ 4] 1100 	ld	d, a
      00057E 1E 0B            [ 7] 1101 	ld	e, #0x0b
      000580 21r04r00         [10] 1102 	ld	hl, #(_alex + 1)
      000583 4E               [ 7] 1103 	ld	c, (hl)
      000584 06 00            [ 7] 1104 	ld	b, #0x00
      000586 21 09 00         [10] 1105 	ld	hl, #0x0009
      000589 09               [11] 1106 	add	hl, bc
      00058A CDr00r00         [17] 1107 	call	_SMS_addSprite_f
      00058D 18 25            [12] 1108 	jr	00129$
      00058F                       1109 00127$:
                                   1110 ;./alex.c:131: if (!alex.oriented)
      00058F 3Ar07r00         [13] 1111 	ld	a, (#(_alex + 4) + 0)
      000592 DD 77 FD         [19] 1112 	ld	-3 (ix), a
      000595 B7               [ 4] 1113 	or	a, a
      000596 20 07            [12] 1114 	jr	NZ, 00122$
                                   1115 ;./alex.c:132: alex.frame = 6;
      000598 21r05r00         [10] 1116 	ld	hl, #(_alex + 2)
      00059B 36 06            [10] 1117 	ld	(hl), #0x06
      00059D 18 05            [12] 1118 	jr	00123$
      00059F                       1119 00122$:
                                   1120 ;./alex.c:134: alex.frame = 14;
      00059F 21r05r00         [10] 1121 	ld	hl, #(_alex + 2)
      0005A2 36 0E            [10] 1122 	ld	(hl), #0x0e
      0005A4                       1123 00123$:
                                   1124 ;./alex.c:135: if (keys & PORT_A_KEY_1) {
      0005A4 DD CB FE 66      [20] 1125 	bit	4, -2 (ix)
      0005A8 28 0A            [12] 1126 	jr	Z, 00129$
                                   1127 ;./alex.c:136: alex.state = PUÑETAZO_SALTANDO;
      0005AA 21r08r00         [10] 1128 	ld	hl, #(_alex + 5)
      0005AD 36 10            [10] 1129 	ld	(hl), #0x10
                                   1130 ;./alex.c:137: alex.lastChangeFrame = 20;
      0005AF 21r06r00         [10] 1131 	ld	hl, #(_alex + 3)
      0005B2 36 14            [10] 1132 	ld	(hl), #0x14
      0005B4                       1133 00129$:
                                   1134 ;./alex.c:141: }
      0005B4 DD F9            [10] 1135 	ld	sp, ix
      0005B6 DD E1            [14] 1136 	pop	ix
      0005B8 E1               [10] 1137 	pop	hl
      0005B9 F1               [10] 1138 	pop	af
      0005BA 33               [ 6] 1139 	inc	sp
      0005BB E9               [ 4] 1140 	jp	(hl)
                                   1141 ;./alex.c:144: void moveAlex(int keys) {
                                   1142 ;	---------------------------------
                                   1143 ; Function moveAlex
                                   1144 ; ---------------------------------
      0005BC                       1145 _moveAlex::
      0005BC DD E5            [15] 1146 	push	ix
      0005BE DD 21 00 00      [14] 1147 	ld	ix,#0
      0005C2 DD 39            [15] 1148 	add	ix,sp
      0005C4 3B               [ 6] 1149 	dec	sp
                                   1150 ;./alex.c:145: unsigned char puedeBajar = canDown();
      0005C5 E5               [11] 1151 	push	hl
      0005C6 CDr95r03         [17] 1152 	call	_canDown
      0005C9 4F               [ 4] 1153 	ld	c, a
      0005CA C5               [11] 1154 	push	bc
      0005CB CDr89r03         [17] 1155 	call	_canUp
      0005CE DD 77 FF         [19] 1156 	ld	-1 (ix), a
      0005D1 CDrAFr03         [17] 1157 	call	_canRight
      0005D4 5F               [ 4] 1158 	ld	e, a
      0005D5 D5               [11] 1159 	push	de
      0005D6 CDrA3r03         [17] 1160 	call	_canLeft
      0005D9 D1               [10] 1161 	pop	de
      0005DA C1               [10] 1162 	pop	bc
      0005DB E1               [10] 1163 	pop	hl
                                   1164 ;./alex.c:149: if (puedeBajar)
      0005DC 0C               [ 4] 1165 	inc	c
      0005DD 0D               [ 4] 1166 	dec	c
      0005DE 28 0C            [12] 1167 	jr	Z, 00102$
                                   1168 ;./alex.c:150: moveAlexAire(keys, puedeSubir, puedeDerecha, puedeIzquierda);
      0005E0 57               [ 4] 1169 	ld	d,a
      0005E1 D5               [11] 1170 	push	de
      0005E2 DD 7E FF         [19] 1171 	ld	a, -1 (ix)
      0005E5 F5               [11] 1172 	push	af
      0005E6 33               [ 6] 1173 	inc	sp
      0005E7 CDrC0r04         [17] 1174 	call	_moveAlexAire
      0005EA 18 03            [12] 1175 	jr	00104$
      0005EC                       1176 00102$:
                                   1177 ;./alex.c:152: moveAlexSuelo(keys);
      0005EC CDrBDr03         [17] 1178 	call	_moveAlexSuelo
      0005EF                       1179 00104$:
                                   1180 ;./alex.c:153: }
      0005EF 33               [ 6] 1181 	inc	sp
      0005F0 DD E1            [14] 1182 	pop	ix
      0005F2 C9               [10] 1183 	ret
                                   1184 ;main.c:18: void inicializaPajaros()
                                   1185 ;	---------------------------------
                                   1186 ; Function inicializaPajaros
                                   1187 ; ---------------------------------
      0005F3                       1188 _inicializaPajaros::
      0005F3 DD E5            [15] 1189 	push	ix
      0005F5 DD 21 00 00      [14] 1190 	ld	ix,#0
      0005F9 DD 39            [15] 1191 	add	ix,sp
      0005FB F5               [11] 1192 	push	af
                                   1193 ;main.c:21: for (i = 0; i < NUM_PAJAROS; i++)
      0005FC 0E 00            [ 7] 1194 	ld	c, #0x00
      0005FE                       1195 00102$:
                                   1196 ;main.c:23: pajaros[i].x = 15 + 32 * i;
      0005FE 06 00            [ 7] 1197 	ld	b, #0x00
      000600 69               [ 4] 1198 	ld	l, c
      000601 60               [ 4] 1199 	ld	h, b
      000602 29               [11] 1200 	add	hl, hl
      000603 09               [11] 1201 	add	hl, bc
      000604 29               [11] 1202 	add	hl, hl
      000605 EB               [ 4] 1203 	ex	de, hl
      000606 21r00r00         [10] 1204 	ld	hl, #_pajaros
      000609 19               [11] 1205 	add	hl, de
      00060A EB               [ 4] 1206 	ex	de, hl
      00060B 79               [ 4] 1207 	ld	a, c
      00060C 0F               [ 4] 1208 	rrca
      00060D 0F               [ 4] 1209 	rrca
      00060E 0F               [ 4] 1210 	rrca
      00060F E6 E0            [ 7] 1211 	and	a, #0xe0
      000611 C6 0F            [ 7] 1212 	add	a, #0x0f
      000613 12               [ 7] 1213 	ld	(de), a
                                   1214 ;main.c:24: pajaros[i].y = 15 + 16 * (i / 2);
      000614 6B               [ 4] 1215 	ld	l, e
      000615 62               [ 4] 1216 	ld	h, d
      000616 23               [ 6] 1217 	inc	hl
      000617 E3               [19] 1218 	ex	(sp), hl
      000618 69               [ 4] 1219 	ld	l, c
                                   1220 ;	spillPairReg hl
                                   1221 ;	spillPairReg hl
      000619 26 00            [ 7] 1222 	ld	h, #0x00
                                   1223 ;	spillPairReg hl
                                   1224 ;	spillPairReg hl
      00061B CB 2C            [ 8] 1225 	sra	h
      00061D CB 1D            [ 8] 1226 	rr	l
      00061F 7D               [ 4] 1227 	ld	a, l
      000620 87               [ 4] 1228 	add	a, a
      000621 87               [ 4] 1229 	add	a, a
      000622 87               [ 4] 1230 	add	a, a
      000623 87               [ 4] 1231 	add	a, a
      000624 C6 0F            [ 7] 1232 	add	a, #0x0f
      000626 E1               [10] 1233 	pop	hl
      000627 E5               [11] 1234 	push	hl
      000628 77               [ 7] 1235 	ld	(hl), a
                                   1236 ;main.c:25: pajaros[i].lastChangeFrame = i * 3;
      000629 13               [ 6] 1237 	inc	de
      00062A 13               [ 6] 1238 	inc	de
      00062B 13               [ 6] 1239 	inc	de
      00062C 79               [ 4] 1240 	ld	a, c
      00062D 87               [ 4] 1241 	add	a, a
      00062E 81               [ 4] 1242 	add	a, c
      00062F 12               [ 7] 1243 	ld	(de), a
                                   1244 ;main.c:21: for (i = 0; i < NUM_PAJAROS; i++)
      000630 0C               [ 4] 1245 	inc	c
      000631 79               [ 4] 1246 	ld	a, c
      000632 D6 0A            [ 7] 1247 	sub	a, #0x0a
      000634 38 C8            [12] 1248 	jr	C, 00102$
                                   1249 ;main.c:27: }
      000636 DD F9            [10] 1250 	ld	sp, ix
      000638 DD E1            [14] 1251 	pop	ix
      00063A C9               [10] 1252 	ret
                                   1253 ;main.c:29: void loadGrapVRAM()
                                   1254 ;	---------------------------------
                                   1255 ; Function loadGrapVRAM
                                   1256 ; ---------------------------------
      00063B                       1257 _loadGrapVRAM::
      00063B DD E5            [15] 1258 	push	ix
      00063D DD 21 00 00      [14] 1259 	ld	ix,#0
      000641 DD 39            [15] 1260 	add	ix,sp
      000643 21 E2 FF         [10] 1261 	ld	hl, #-30
      000646 39               [11] 1262 	add	hl, sp
      000647 F9               [ 6] 1263 	ld	sp, hl
                                   1264 ;main.c:31: SMS_init();
      000648 CDr00r00         [17] 1265 	call	_SMS_init
                                   1266 ;main.c:32: inicializaPajaros();
      00064B CDrF3r05         [17] 1267 	call	_inicializaPajaros
                                   1268 ;main.c:34: SMS_setSpriteMode(SPRITEMODE_TALL);
      00064E 2E 01            [ 7] 1269 	ld	l, #0x01
                                   1270 ;	spillPairReg hl
                                   1271 ;	spillPairReg hl
      000650 CDr00r00         [17] 1272 	call	_SMS_setSpriteMode
                                   1273 ;main.c:35: SMS_displayOn();
      000653 21 40 01         [10] 1274 	ld	hl, #0x0140
      000656 CDr00r00         [17] 1275 	call	_SMS_VDPturnOnFeature
                                   1276 ;main.c:36: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      000659 21 20 00         [10] 1277 	ld	hl, #0x0020
      00065C CDr00r00         [17] 1278 	call	_SMS_VDPturnOnFeature
                                   1279 ;main.c:37: SMS_loadBGPalette(sonicpalette_inc);
      00065F 21r00r00         [10] 1280 	ld	hl, #_sonicpalette_inc
      000662 CDr00r00         [17] 1281 	call	_SMS_loadBGPalette
                                   1282 ;main.c:38: SMS_loadSpritePalette(palleteAlex_inc);
      000665 21r00r00         [10] 1283 	ld	hl, #_palleteAlex_inc
      000668 CDr00r00         [17] 1284 	call	_SMS_loadSpritePalette
                                   1285 ;main.c:39: SMS_loadTiles(sonictiles_inc, 0, sonictiles_inc_size);
      00066B 21 C0 14         [10] 1286 	ld	hl, #0x14c0
      00066E E5               [11] 1287 	push	hl
      00066F 11r00r00         [10] 1288 	ld	de, #_sonictiles_inc
      000672 21 00 40         [10] 1289 	ld	hl, #0x4000
      000675 CDr00r00         [17] 1290 	call	_SMS_VRAMmemcpy
                                   1291 ;main.c:40: spriteAlex = generateSpriteNoRAM(2, 2, spriteAlex_inc_size, spriteAlex_inc);
      000678 21r00r00         [10] 1292 	ld	hl, #_spriteAlex_inc
      00067B E5               [11] 1293 	push	hl
      00067C 21 00 10         [10] 1294 	ld	hl, #0x1000
      00067F E5               [11] 1295 	push	hl
                                   1296 ;	spillPairReg hl
                                   1297 ;	spillPairReg hl
      000680 3E 02            [ 7] 1298 	ld	a,#0x02
      000682 6F               [ 4] 1299 	ld	l,a
      000683 E5               [11] 1300 	push	hl
      000684 21 06 00         [10] 1301 	ld	hl, #0x0006
      000687 39               [11] 1302 	add	hl, sp
      000688 EB               [ 4] 1303 	ex	de,hl
      000689 E1               [10] 1304 	pop	hl
      00068A D5               [11] 1305 	push	de
      00068B CDrAAr00         [17] 1306 	call	_generateSpriteNoRAM
      00068E F1               [10] 1307 	pop	af
      00068F F1               [10] 1308 	pop	af
      000690 F1               [10] 1309 	pop	af
      000691 11r09r00         [10] 1310 	ld	de, #_spriteAlex
      000694 21 00 00         [10] 1311 	ld	hl, #0
      000697 39               [11] 1312 	add	hl, sp
      000698 01 0A 00         [10] 1313 	ld	bc, #0x000a
      00069B ED B0            [21] 1314 	ldir
                                   1315 ;main.c:41: spritePuno = generateSprite(1, 2, puno_inc_size, puno_inc);
      00069D 21r00r00         [10] 1316 	ld	hl, #_puno_inc
      0006A0 E5               [11] 1317 	push	hl
      0006A1 21 80 00         [10] 1318 	ld	hl, #0x0080
      0006A4 E5               [11] 1319 	push	hl
      0006A5 2E 02            [ 7] 1320 	ld	l, #0x02
                                   1321 ;	spillPairReg hl
                                   1322 ;	spillPairReg hl
      0006A7 3E 01            [ 7] 1323 	ld	a, #0x01
      0006A9 E5               [11] 1324 	push	hl
      0006AA 21 10 00         [10] 1325 	ld	hl, #0x0010
      0006AD 39               [11] 1326 	add	hl, sp
      0006AE EB               [ 4] 1327 	ex	de,hl
      0006AF E1               [10] 1328 	pop	hl
      0006B0 D5               [11] 1329 	push	de
      0006B1 CDr00r00         [17] 1330 	call	_generateSprite
      0006B4 F1               [10] 1331 	pop	af
      0006B5 F1               [10] 1332 	pop	af
      0006B6 F1               [10] 1333 	pop	af
      0006B7 11r1Dr00         [10] 1334 	ld	de, #_spritePuno
      0006BA 21 0A 00         [10] 1335 	ld	hl, #10
      0006BD 39               [11] 1336 	add	hl, sp
      0006BE 01 0A 00         [10] 1337 	ld	bc, #0x000a
      0006C1 ED B0            [21] 1338 	ldir
                                   1339 ;main.c:42: spritePajaro = generateSprite(3, 1, spritePajaro_inc_size, spritePajaro_inc);
      0006C3 21r00r00         [10] 1340 	ld	hl, #_spritePajaro_inc
      0006C6 E5               [11] 1341 	push	hl
      0006C7 21 80 01         [10] 1342 	ld	hl, #0x0180
      0006CA E5               [11] 1343 	push	hl
      0006CB 2E 01            [ 7] 1344 	ld	l, #0x01
                                   1345 ;	spillPairReg hl
                                   1346 ;	spillPairReg hl
      0006CD 3E 03            [ 7] 1347 	ld	a, #0x03
      0006CF E5               [11] 1348 	push	hl
      0006D0 21 1A 00         [10] 1349 	ld	hl, #0x001a
      0006D3 39               [11] 1350 	add	hl, sp
      0006D4 EB               [ 4] 1351 	ex	de,hl
      0006D5 E1               [10] 1352 	pop	hl
      0006D6 D5               [11] 1353 	push	de
      0006D7 CDr00r00         [17] 1354 	call	_generateSprite
      0006DA F1               [10] 1355 	pop	af
      0006DB F1               [10] 1356 	pop	af
      0006DC F1               [10] 1357 	pop	af
      0006DD 11r13r00         [10] 1358 	ld	de, #_spritePajaro
      0006E0 21 14 00         [10] 1359 	ld	hl, #20
      0006E3 39               [11] 1360 	add	hl, sp
      0006E4 01 0A 00         [10] 1361 	ld	bc, #0x000a
      0006E7 ED B0            [21] 1362 	ldir
                                   1363 ;main.c:44: SMS_loadTileMap(0, 0, sonictilemap_inc, sonictilemap_inc_size);
      0006E9 21 00 06         [10] 1364 	ld	hl, #0x0600
      0006EC E5               [11] 1365 	push	hl
      0006ED 11r00r00         [10] 1366 	ld	de, #_sonictilemap_inc
      0006F0 26 78            [ 7] 1367 	ld	h, #0x78
      0006F2 CDr00r00         [17] 1368 	call	_SMS_VRAMmemcpy
                                   1369 ;main.c:45: }
      0006F5 DD F9            [10] 1370 	ld	sp, ix
      0006F7 DD E1            [14] 1371 	pop	ix
      0006F9 C9               [10] 1372 	ret
                                   1373 ;main.c:47: void dibujaPajaros()
                                   1374 ;	---------------------------------
                                   1375 ; Function dibujaPajaros
                                   1376 ; ---------------------------------
      0006FA                       1377 _dibujaPajaros::
      0006FA DD E5            [15] 1378 	push	ix
      0006FC DD 21 00 00      [14] 1379 	ld	ix,#0
      000700 DD 39            [15] 1380 	add	ix,sp
      000702 F5               [11] 1381 	push	af
                                   1382 ;main.c:50: for (i = 0; i < NUM_PAJAROS; i++)
      000703 DD 36 FF 00      [19] 1383 	ld	-1 (ix), #0x00
      000707                       1384 00106$:
                                   1385 ;main.c:52: pajaros[i].x++;
      000707 DD 4E FF         [19] 1386 	ld	c, -1 (ix)
      00070A 06 00            [ 7] 1387 	ld	b, #0x00
      00070C 69               [ 4] 1388 	ld	l, c
      00070D 60               [ 4] 1389 	ld	h, b
      00070E 29               [11] 1390 	add	hl, hl
      00070F 09               [11] 1391 	add	hl, bc
      000710 29               [11] 1392 	add	hl, hl
      000711 EB               [ 4] 1393 	ex	de, hl
      000712 21r00r00         [10] 1394 	ld	hl, #_pajaros
      000715 19               [11] 1395 	add	hl, de
      000716 EB               [ 4] 1396 	ex	de, hl
      000717 1A               [ 7] 1397 	ld	a, (de)
      000718 3C               [ 4] 1398 	inc	a
      000719 12               [ 7] 1399 	ld	(de), a
                                   1400 ;main.c:53: pajaros[i].lastChangeFrame++;
      00071A 4B               [ 4] 1401 	ld	c, e
      00071B 42               [ 4] 1402 	ld	b, d
      00071C 03               [ 6] 1403 	inc	bc
      00071D 03               [ 6] 1404 	inc	bc
      00071E 03               [ 6] 1405 	inc	bc
      00071F 0A               [ 7] 1406 	ld	a, (bc)
      000720 3C               [ 4] 1407 	inc	a
      000721 02               [ 7] 1408 	ld	(bc), a
                                   1409 ;main.c:54: if (pajaros[i].lastChangeFrame == 20)
      000722 D6 14            [ 7] 1410 	sub	a, #0x14
      000724 20 15            [12] 1411 	jr	NZ, 00104$
                                   1412 ;main.c:56: pajaros[i].frame++;
      000726 6B               [ 4] 1413 	ld	l, e
                                   1414 ;	spillPairReg hl
                                   1415 ;	spillPairReg hl
      000727 62               [ 4] 1416 	ld	h, d
                                   1417 ;	spillPairReg hl
                                   1418 ;	spillPairReg hl
      000728 23               [ 6] 1419 	inc	hl
      000729 23               [ 6] 1420 	inc	hl
      00072A 7E               [ 7] 1421 	ld	a, (hl)
      00072B 3C               [ 4] 1422 	inc	a
      00072C DD 77 FE         [19] 1423 	ld	-2 (ix), a
      00072F 77               [ 7] 1424 	ld	(hl), a
                                   1425 ;main.c:57: if (pajaros[i].frame > 1)
      000730 3E 01            [ 7] 1426 	ld	a, #0x01
      000732 DD 96 FE         [19] 1427 	sub	a, -2 (ix)
      000735 30 02            [12] 1428 	jr	NC, 00102$
                                   1429 ;main.c:58: pajaros[i].frame = 0;
      000737 36 00            [10] 1430 	ld	(hl), #0x00
      000739                       1431 00102$:
                                   1432 ;main.c:59: pajaros[i].lastChangeFrame = 0;
      000739 AF               [ 4] 1433 	xor	a, a
      00073A 02               [ 7] 1434 	ld	(bc), a
      00073B                       1435 00104$:
                                   1436 ;main.c:61: draw_entidad(&(pajaros[i]), &spritePajaro);
      00073B EB               [ 4] 1437 	ex	de, hl
      00073C 11r13r00         [10] 1438 	ld	de, #_spritePajaro
      00073F CDr59r01         [17] 1439 	call	_draw_entidad
                                   1440 ;main.c:50: for (i = 0; i < NUM_PAJAROS; i++)
      000742 DD 34 FF         [23] 1441 	inc	-1 (ix)
      000745 DD 7E FF         [19] 1442 	ld	a, -1 (ix)
      000748 D6 0A            [ 7] 1443 	sub	a, #0x0a
      00074A 38 BB            [12] 1444 	jr	C, 00106$
                                   1445 ;main.c:63: }
      00074C DD F9            [10] 1446 	ld	sp, ix
      00074E DD E1            [14] 1447 	pop	ix
      000750 C9               [10] 1448 	ret
                                   1449 ;main.c:66: void main(void)
                                   1450 ;	---------------------------------
                                   1451 ; Function main
                                   1452 ; ---------------------------------
      000751                       1453 _main::
      000751 DD E5            [15] 1454 	push	ix
      000753 DD 21 00 00      [14] 1455 	ld	ix,#0
      000757 DD 39            [15] 1456 	add	ix,sp
      000759 F5               [11] 1457 	push	af
                                   1458 ;main.c:71: SMS_VRAMmemsetW(0, 0x0000, 16384);
      00075A DD 36 FF 00      [19] 1459 	ld	-1 (ix), #0x00
      00075E DD 36 FE 00      [19] 1460 	ld	-2 (ix), #0x00
      000762 21 00 40         [10] 1461 	ld	hl, #0x4000
      000765 E5               [11] 1462 	push	hl
      000766 11 00 00         [10] 1463 	ld	de, #0x0000
      000769 65               [ 4] 1464 	ld	h, l
      00076A CDr00r00         [17] 1465 	call	_SMS_VRAMmemsetW
                                   1466 ;main.c:81: printf("Hello, World! [1/3]");
      00076D 21r0Er08         [10] 1467 	ld	hl, #___str_0
      000770 E5               [11] 1468 	push	hl
      000771 CDr00r00         [17] 1469 	call	_printf
      000774 F1               [10] 1470 	pop	af
                                   1471 ;main.c:85: loadGrapVRAM();
      000775 CDr3Br06         [17] 1472 	call	_loadGrapVRAM
                                   1473 ;main.c:87: SMS_displayOn();
      000778 21 40 01         [10] 1474 	ld	hl, #0x0140
      00077B CDr00r00         [17] 1475 	call	_SMS_VDPturnOnFeature
                                   1476 ;main.c:88: SMS_setBGScrollX(scroll_x);
      00077E 2E 00            [ 7] 1477 	ld	l, #0x00
                                   1478 ;	spillPairReg hl
                                   1479 ;	spillPairReg hl
      000780 CDr00r00         [17] 1480 	call	_SMS_setBGScrollX
                                   1481 ;main.c:89: SMS_setBGScrollY(scroll_y);
      000783 2E 00            [ 7] 1482 	ld	l, #0x00
                                   1483 ;	spillPairReg hl
                                   1484 ;	spillPairReg hl
      000785 CDr00r00         [17] 1485 	call	_SMS_setBGScrollY
                                   1486 ;main.c:90: SMS_init();
      000788 CDr00r00         [17] 1487 	call	_SMS_init
                                   1488 ;main.c:96: PSGPlay(titulo_psg);
      00078B 21r00r00         [10] 1489 	ld	hl, #_titulo_psg
      00078E CDr00r00         [17] 1490 	call	_PSGPlay
                                   1491 ;main.c:97: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      000791 21 20 00         [10] 1492 	ld	hl, #0x0020
      000794 CDr00r00         [17] 1493 	call	_SMS_VDPturnOnFeature
      000797                       1494 00111$:
                                   1495 ;main.c:102: if (SMS_queryPauseRequested())
      000797 CDr00r00         [17] 1496 	call	_SMS_queryPauseRequested
      00079A CB 47            [ 8] 1497 	bit	0,a
      00079C 28 21            [12] 1498 	jr	Z, 00105$
                                   1499 ;main.c:104: PSGPlay(emeraldhill_psg);
      00079E 21r00r00         [10] 1500 	ld	hl, #_emeraldhill_psg
      0007A1 CDr00r00         [17] 1501 	call	_PSGPlay
                                   1502 ;main.c:105: SMS_resetPauseRequest();
      0007A4 CDr00r00         [17] 1503 	call	_SMS_resetPauseRequest
                                   1504 ;main.c:106: while (!SMS_queryPauseRequested())
      0007A7                       1505 00101$:
      0007A7 CDr00r00         [17] 1506 	call	_SMS_queryPauseRequested
      0007AA CB 47            [ 8] 1507 	bit	0,a
      0007AC 20 08            [12] 1508 	jr	NZ, 00103$
                                   1509 ;main.c:108: SMS_waitForVBlank();
      0007AE CDr00r00         [17] 1510 	call	_SMS_waitForVBlank
                                   1511 ;main.c:109: PSGFrame();
      0007B1 CDr00r00         [17] 1512 	call	_PSGFrame
      0007B4 18 F1            [12] 1513 	jr	00101$
      0007B6                       1514 00103$:
                                   1515 ;main.c:111: SMS_resetPauseRequest();
      0007B6 CDr00r00         [17] 1516 	call	_SMS_resetPauseRequest
                                   1517 ;main.c:112: PSGPlay(titulo_psg);
      0007B9 21r00r00         [10] 1518 	ld	hl, #_titulo_psg
      0007BC CDr00r00         [17] 1519 	call	_PSGPlay
      0007BF                       1520 00105$:
                                   1521 ;main.c:116: int keys = SMS_getKeysHeld();
      0007BF CDr00r00         [17] 1522 	call	_SMS_getKeysHeld
                                   1523 ;main.c:118: SMS_initSprites();
      0007C2 D5               [11] 1524 	push	de
      0007C3 CDr00r00         [17] 1525 	call	_SMS_initSprites
      0007C6 D1               [10] 1526 	pop	de
                                   1527 ;main.c:119: moveAlex(keys);
      0007C7 EB               [ 4] 1528 	ex	de, hl
      0007C8 CDrBCr05         [17] 1529 	call	_moveAlex
                                   1530 ;main.c:120: draw_entidad(&alex, &spriteAlex);
      0007CB 11r09r00         [10] 1531 	ld	de, #_spriteAlex
      0007CE 21r03r00         [10] 1532 	ld	hl, #_alex
      0007D1 CDr59r01         [17] 1533 	call	_draw_entidad
                                   1534 ;main.c:121: dibujaPajaros();
      0007D4 CDrFAr06         [17] 1535 	call	_dibujaPajaros
                                   1536 ;main.c:123: SMS_finalizeSprites();
      0007D7 CDr00r00         [17] 1537 	call	_SMS_finalizeSprites
                                   1538 ;main.c:126: SMS_waitForVBlank();
      0007DA CDr00r00         [17] 1539 	call	_SMS_waitForVBlank
                                   1540 ;main.c:127: SMS_copySpritestoSAT();
      0007DD CDr00r00         [17] 1541 	call	_SMS_copySpritestoSAT
                                   1542 ;main.c:128: PSGFrame();
      0007E0 CDr00r00         [17] 1543 	call	_PSGFrame
                                   1544 ;main.c:129: SMS_displayOff();
      0007E3 21 40 01         [10] 1545 	ld	hl, #0x0140
      0007E6 CDr00r00         [17] 1546 	call	_SMS_VDPturnOffFeature
                                   1547 ;main.c:130: if (scroll_y % 2 == 0)
      0007E9 DD CB FF 46      [20] 1548 	bit	0, -1 (ix)
      0007ED 20 03            [12] 1549 	jr	NZ, 00107$
                                   1550 ;main.c:131: scroll_x += 1;
      0007EF DD 34 FE         [23] 1551 	inc	-2 (ix)
      0007F2                       1552 00107$:
                                   1553 ;main.c:132: scroll_y++;
      0007F2 DD 34 FF         [23] 1554 	inc	-1 (ix)
                                   1555 ;main.c:133: if (scroll_y == 224)
      0007F5 DD 7E FF         [19] 1556 	ld	a, -1 (ix)
      0007F8 D6 E0            [ 7] 1557 	sub	a, #0xe0
      0007FA 20 04            [12] 1558 	jr	NZ, 00109$
                                   1559 ;main.c:134: scroll_y = 0;
      0007FC DD 36 FF 00      [19] 1560 	ld	-1 (ix), #0x00
      000800                       1561 00109$:
                                   1562 ;main.c:136: SMS_setBGScrollX(scroll_x);
      000800 DD 6E FE         [19] 1563 	ld	l, -2 (ix)
                                   1564 ;	spillPairReg hl
                                   1565 ;	spillPairReg hl
      000803 CDr00r00         [17] 1566 	call	_SMS_setBGScrollX
                                   1567 ;main.c:138: SMS_displayOn();
      000806 21 40 01         [10] 1568 	ld	hl, #0x0140
      000809 CDr00r00         [17] 1569 	call	_SMS_VDPturnOnFeature
                                   1570 ;main.c:140: }
      00080C 18 89            [12] 1571 	jr	00111$
      00080E                       1572 ___str_0:
      00080E 48 65 6C 6C 6F 2C 20  1573 	.ascii "Hello, World! [1/3]"
             57 6F 72 6C 64 21 20
             5B 31 2F 33 5D
      000821 00                    1574 	.db 0x00
                                   1575 	.area _CODE
      000822                       1576 __str_1:
      000822 72 61 70 68 6E 65 74  1577 	.ascii "raphnet"
      000829 00                    1578 	.db 0x00
      00082A                       1579 __str_2:
      00082A 62 61 73 69 63 20 65  1580 	.ascii "basic example"
             78 61 6D 70 6C 65
      000837 00                    1581 	.db 0x00
      000838                       1582 __str_3:
      000838 41 20 73 69 6D 70 6C  1583 	.ascii "A simple example"
             65 20 65 78 61 6D 70
             6C 65
      000848 00                    1584 	.db 0x00
                                   1585 	.area _INITIALIZER
      000000                       1586 __xinit__nextVRAMsprites:
      000000 00 01                 1587 	.dw #0x0100
      000002                       1588 __xinit__maxSalto:
      000002 FF                    1589 	.db #0xff	; 255
      000003                       1590 __xinit__alex:
      000003 1E                    1591 	.db #0x1e	; 30
      000004 14                    1592 	.db #0x14	; 20
      000005 00                    1593 	.db #0x00	; 0
      000006 00                    1594 	.db #0x00	; 0
      000007 00                    1595 	.db #0x00	; 0
      000008 00                    1596 	.db #0x00	; 0
      000009                       1597 __xinit__spriteAlex:
      000009 02                    1598 	.db #0x02	; 2
      00000A 02                    1599 	.db #0x02	; 2
      00000B 08                    1600 	.db #0x08	; 8
      00000C 00                    1601 	.db #0x00	; 0
      00000D 00 00                 1602 	.dw #0x0000
      00000F 00                    1603 	.db #0x00	; 0
      000010 00 00                 1604 	.dw #0x0000
      000012 00                    1605 	.db #0x00	; 0
      000013                       1606 __xinit__spritePajaro:
      000013 02                    1607 	.db #0x02	; 2
      000014 02                    1608 	.db #0x02	; 2
      000015 08                    1609 	.db #0x08	; 8
      000016 00                    1610 	.db #0x00	; 0
      000017 00 00                 1611 	.dw #0x0000
      000019 00                    1612 	.db #0x00	; 0
      00001A 00 00                 1613 	.dw #0x0000
      00001C 00                    1614 	.db #0x00	; 0
      00001D                       1615 __xinit__spritePuno:
      00001D 02                    1616 	.db #0x02	; 2
      00001E 02                    1617 	.db #0x02	; 2
      00001F 08                    1618 	.db #0x08	; 8
      000020 00                    1619 	.db #0x00	; 0
      000021 00 00                 1620 	.dw #0x0000
      000023 00                    1621 	.db #0x00	; 0
      000024 00 00                 1622 	.dw #0x0000
      000026 00                    1623 	.db #0x00	; 0
                                   1624 	.area _CABS (ABS)
      007FF0                       1625 	.org 0x7FF0
      007FF0                       1626 ___SMS__SEGA_signature:
      007FF0 54                    1627 	.db #0x54	; 84	'T'
      007FF1 4D                    1628 	.db #0x4d	; 77	'M'
      007FF2 52                    1629 	.db #0x52	; 82	'R'
      007FF3 20                    1630 	.db #0x20	; 32
      007FF4 53                    1631 	.db #0x53	; 83	'S'
      007FF5 45                    1632 	.db #0x45	; 69	'E'
      007FF6 47                    1633 	.db #0x47	; 71	'G'
      007FF7 41                    1634 	.db #0x41	; 65	'A'
      007FF8 FF                    1635 	.db #0xff	; 255
      007FF9 FF                    1636 	.db #0xff	; 255
      007FFA FF                    1637 	.db #0xff	; 255
      007FFB FF                    1638 	.db #0xff	; 255
      007FFC 99                    1639 	.db #0x99	; 153
      007FFD 99                    1640 	.db #0x99	; 153
      007FFE 00                    1641 	.db #0x00	; 0
      007FFF 4C                    1642 	.db #0x4c	; 76	'L'
      007FD8                       1643 	.org 0x7FD8
      007FD8                       1644 ___SMS__SDSC_author:
      007FD8 72 61 70 68 6E 65 74  1645 	.ascii "raphnet"
      007FDF 00                    1646 	.db 0x00
      007FCA                       1647 	.org 0x7FCA
      007FCA                       1648 ___SMS__SDSC_name:
      007FCA 62 61 73 69 63 20 65  1649 	.ascii "basic example"
             78 61 6D 70 6C 65
      007FD7 00                    1650 	.db 0x00
      007FB9                       1651 	.org 0x7FB9
      007FB9                       1652 ___SMS__SDSC_descr:
      007FB9 41 20 73 69 6D 70 6C  1653 	.ascii "A simple example"
             65 20 65 78 61 6D 70
             6C 65
      007FC9 00                    1654 	.db 0x00
      007FE0                       1655 	.org 0x7FE0
      007FE0                       1656 ___SMS__SDSC_signature:
      007FE0 53                    1657 	.db #0x53	; 83	'S'
      007FE1 44                    1658 	.db #0x44	; 68	'D'
      007FE2 53                    1659 	.db #0x53	; 83	'S'
      007FE3 43                    1660 	.db #0x43	; 67	'C'
      007FE4 01                    1661 	.db #0x01	; 1
      007FE5 00                    1662 	.db #0x00	; 0
      007FE6 00                    1663 	.db #0x00	; 0
      007FE7 00                    1664 	.db #0x00	; 0
      007FE8 00                    1665 	.db #0x00	; 0
      007FE9 00                    1666 	.db #0x00	; 0
      007FEA D8                    1667 	.db #0xd8	; 216
      007FEB 7F                    1668 	.db #0x7f	; 127
      007FEC CA                    1669 	.db #0xca	; 202
      007FED 7F                    1670 	.db #0x7f	; 127
      007FEE B9                    1671 	.db #0xb9	; 185
      007FEF 7F                    1672 	.db #0x7f	; 127
