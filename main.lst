                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14549 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___SMS__SDSC_signature
                                     12 	.globl ___SMS__SDSC_descr
                                     13 	.globl ___SMS__SDSC_name
                                     14 	.globl ___SMS__SDSC_author
                                     15 	.globl ___SMS__SEGA_signature
                                     16 	.globl _main
                                     17 	.globl _dibujaPajaros
                                     18 	.globl _loadGrapVRAM
                                     19 	.globl _inicializaPajaros
                                     20 	.globl _moveAlex
                                     21 	.globl _SMS_VRAMmemsetW
                                     22 	.globl _SMS_VRAMmemcpy
                                     23 	.globl _SMS_resetPauseRequest
                                     24 	.globl _SMS_queryPauseRequested
                                     25 	.globl _SMS_getKeysHeld
                                     26 	.globl _SMS_loadSpritePalette
                                     27 	.globl _SMS_loadBGPalette
                                     28 	.globl _SMS_copySpritestoSAT
                                     29 	.globl _SMS_finalizeSprites
                                     30 	.globl _SMS_initSprites
                                     31 	.globl _SMS_waitForVBlank
                                     32 	.globl _SMS_setSpriteMode
                                     33 	.globl _SMS_setBGScrollY
                                     34 	.globl _SMS_setBGScrollX
                                     35 	.globl _SMS_VDPturnOffFeature
                                     36 	.globl _SMS_VDPturnOnFeature
                                     37 	.globl _SMS_init
                                     38 	.globl _PSGFrame
                                     39 	.globl _PSGPlay
                                     40 	.globl _printf
                                     41 	.globl _spritePajaro
                                     42 	.globl _spriteAlex
                                     43 	.globl _alex
                                     44 	.globl _vY
                                     45 	.globl _nextVRAMsprites
                                     46 	.globl _pajaros
                                     47 	.globl _finSalto
                                     48 	.globl _SMS_SRAM
                                     49 	.globl _SRAM_bank_to_be_mapped_on_slot2
                                     50 	.globl _ROM_bank_to_be_mapped_on_slot0
                                     51 	.globl _ROM_bank_to_be_mapped_on_slot1
                                     52 	.globl _ROM_bank_to_be_mapped_on_slot2
                                     53 	.globl _generateSprite
                                     54 	.globl _generateSpriteNoRAM
                                     55 	.globl _draw_entidad
                                     56 ;--------------------------------------------------------
                                     57 ; special function registers
                                     58 ;--------------------------------------------------------
                                     59 ;--------------------------------------------------------
                                     60 ; ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area _DATA
                           00FFFF    63 _ROM_bank_to_be_mapped_on_slot2	=	0xffff
                           00FFFE    64 _ROM_bank_to_be_mapped_on_slot1	=	0xfffe
                           00FFFD    65 _ROM_bank_to_be_mapped_on_slot0	=	0xfffd
                           00FFFC    66 _SRAM_bank_to_be_mapped_on_slot2	=	0xfffc
                           008000    67 _SMS_SRAM	=	0x8000
      000000                         68 _finSalto::
      000000                         69 	.ds 2
      000002                         70 _pajaros::
      000002                         71 	.ds 84
                                     72 ;--------------------------------------------------------
                                     73 ; ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area _INITIALIZED
      000000                         76 _nextVRAMsprites::
      000000                         77 	.ds 2
      000002                         78 _vY::
      000002                         79 	.ds 2
      000004                         80 _alex::
      000004                         81 	.ds 6
      00000A                         82 _spriteAlex::
      00000A                         83 	.ds 10
      000014                         84 _spritePajaro::
      000014                         85 	.ds 10
                                     86 ;--------------------------------------------------------
                                     87 ; absolute external ram data
                                     88 ;--------------------------------------------------------
                                     89 	.area _DABS (ABS)
                                     90 ;--------------------------------------------------------
                                     91 ; global & static initialisations
                                     92 ;--------------------------------------------------------
                                     93 	.area _HOME
                                     94 	.area _GSINIT
                                     95 	.area _GSFINAL
                                     96 	.area _GSINIT
                                     97 ;--------------------------------------------------------
                                     98 ; Home
                                     99 ;--------------------------------------------------------
                                    100 	.area _HOME
                                    101 	.area _HOME
                                    102 ;--------------------------------------------------------
                                    103 ; code
                                    104 ;--------------------------------------------------------
                                    105 	.area _CODE
                                    106 ;./lib/./sprite.c:18: T_sprite generateSprite(unsigned char ancho, unsigned char alto, int tam,const unsigned char data[]) {
                                    107 ;	---------------------------------
                                    108 ; Function generateSprite
                                    109 ; ---------------------------------
      000000                        110 _generateSprite::
      000000 DD E5            [15]  111 	push	ix
      000002 DD 21 00 00      [14]  112 	ld	ix,#0
      000006 DD 39            [15]  113 	add	ix,sp
      000008 FD 21 F6 FF      [14]  114 	ld	iy, #-10
      00000C FD 39            [15]  115 	add	iy, sp
      00000E FD F9            [10]  116 	ld	sp, iy
      000010 5F               [ 4]  117 	ld	e, a
      000011 55               [ 4]  118 	ld	d, l
                                    119 ;./lib/./sprite.c:19: unsigned char tamano = alto*ancho*2;
      000012 D5               [11]  120 	push	de
      000013 62               [ 4]  121 	ld	h, d
                                    122 ;	spillPairReg hl
                                    123 ;	spillPairReg hl
      000014 2E 00            [ 7]  124 	ld	l, #0x00
      000016 55               [ 4]  125 	ld	d, l
      000017 06 08            [ 7]  126 	ld	b, #0x08
      000019                        127 00103$:
      000019 29               [11]  128 	add	hl, hl
      00001A 30 01            [12]  129 	jr	NC, 00104$
      00001C 19               [11]  130 	add	hl, de
      00001D                        131 00104$:
      00001D 10 FA            [13]  132 	djnz	00103$
      00001F D1               [10]  133 	pop	de
      000020 4D               [ 4]  134 	ld	c, l
      000021 CB 21            [ 8]  135 	sla	c
                                    136 ;./lib/./sprite.c:20: T_sprite sprite = {alto,ancho,tamano,tam/(tamano*32),nextVRAMsprites, 1,0};
      000023 DD 72 F6         [19]  137 	ld	-10 (ix), d
      000026 DD 73 F7         [19]  138 	ld	-9 (ix), e
      000029 DD 71 F8         [19]  139 	ld	-8 (ix), c
      00002C 69               [ 4]  140 	ld	l, c
                                    141 ;	spillPairReg hl
                                    142 ;	spillPairReg hl
      00002D 26 00            [ 7]  143 	ld	h, #0x00
                                    144 ;	spillPairReg hl
                                    145 ;	spillPairReg hl
      00002F 29               [11]  146 	add	hl, hl
      000030 29               [11]  147 	add	hl, hl
      000031 29               [11]  148 	add	hl, hl
      000032 29               [11]  149 	add	hl, hl
      000033 29               [11]  150 	add	hl, hl
      000034 C5               [11]  151 	push	bc
      000035 EB               [ 4]  152 	ex	de, hl
      000036 DD 6E 06         [19]  153 	ld	l, 6 (ix)
                                    154 ;	spillPairReg hl
                                    155 ;	spillPairReg hl
      000039 DD 66 07         [19]  156 	ld	h, 7 (ix)
                                    157 ;	spillPairReg hl
                                    158 ;	spillPairReg hl
      00003C CDr00r00         [17]  159 	call	__divsint
      00003F C1               [10]  160 	pop	bc
      000040 DD 73 F9         [19]  161 	ld	-7 (ix), e
      000043 3Ar00r00         [13]  162 	ld	a, (_nextVRAMsprites+0)
      000046 DD 77 FA         [19]  163 	ld	-6 (ix), a
      000049 3Ar01r00         [13]  164 	ld	a, (_nextVRAMsprites+1)
      00004C DD 77 FB         [19]  165 	ld	-5 (ix), a
      00004F DD 36 FC 01      [19]  166 	ld	-4 (ix), #0x01
      000053 AF               [ 4]  167 	xor	a, a
      000054 DD 77 FD         [19]  168 	ld	-3 (ix), a
      000057 DD 77 FE         [19]  169 	ld	-2 (ix), a
      00005A DD 36 FF 00      [19]  170 	ld	-1 (ix), #0x00
                                    171 ;./lib/./sprite.c:21: SMS_loadTiles(data,nextVRAMsprites,tam);
      00005E DD 5E 08         [19]  172 	ld	e, 8 (ix)
      000061 DD 56 09         [19]  173 	ld	d, 9 (ix)
      000064 2Ar00r00         [16]  174 	ld	hl, (_nextVRAMsprites)
      000067 29               [11]  175 	add	hl, hl
      000068 29               [11]  176 	add	hl, hl
      000069 29               [11]  177 	add	hl, hl
      00006A 29               [11]  178 	add	hl, hl
      00006B 29               [11]  179 	add	hl, hl
      00006C CB F4            [ 8]  180 	set	6, h
      00006E C5               [11]  181 	push	bc
      00006F E5               [11]  182 	push	hl
      000070 DD 6E 06         [19]  183 	ld	l, 6 (ix)
                                    184 ;	spillPairReg hl
                                    185 ;	spillPairReg hl
      000073 DD 66 07         [19]  186 	ld	h, 7 (ix)
                                    187 ;	spillPairReg hl
                                    188 ;	spillPairReg hl
      000076 E3               [19]  189 	ex	(sp), hl
      000077 CDr00r00         [17]  190 	call	_SMS_VRAMmemcpy
      00007A C1               [10]  191 	pop	bc
                                    192 ;./lib/./sprite.c:22: nextVRAMsprites = nextVRAMsprites + (tamano*sprite.numFrames);
      00007B DD 5E F9         [19]  193 	ld	e, -7 (ix)
      00007E 61               [ 4]  194 	ld	h, c
                                    195 ;	spillPairReg hl
                                    196 ;	spillPairReg hl
      00007F 2E 00            [ 7]  197 	ld	l, #0x00
      000081 55               [ 4]  198 	ld	d, l
      000082 06 08            [ 7]  199 	ld	b, #0x08
      000084                        200 00105$:
      000084 29               [11]  201 	add	hl, hl
      000085 30 01            [12]  202 	jr	NC, 00106$
      000087 19               [11]  203 	add	hl, de
      000088                        204 00106$:
      000088 10 FA            [13]  205 	djnz	00105$
      00008A EB               [ 4]  206 	ex	de, hl
      00008B 21r00r00         [10]  207 	ld	hl, #_nextVRAMsprites
      00008E 7E               [ 7]  208 	ld	a, (hl)
      00008F 83               [ 4]  209 	add	a, e
      000090 77               [ 7]  210 	ld	(hl), a
      000091 23               [ 6]  211 	inc	hl
      000092 7E               [ 7]  212 	ld	a, (hl)
      000093 8A               [ 4]  213 	adc	a, d
      000094 77               [ 7]  214 	ld	(hl), a
                                    215 ;./lib/./sprite.c:23: return sprite;
      000095 21 0E 00         [10]  216 	ld	hl, #14
      000098 39               [11]  217 	add	hl, sp
      000099 5E               [ 7]  218 	ld	e, (hl)
      00009A 23               [ 6]  219 	inc	hl
      00009B 56               [ 7]  220 	ld	d, (hl)
      00009C 21 00 00         [10]  221 	ld	hl, #0
      00009F 39               [11]  222 	add	hl, sp
      0000A0 01 0A 00         [10]  223 	ld	bc, #10
      0000A3 ED B0            [21]  224 	ldir
                                    225 ;./lib/./sprite.c:24: }
      0000A5 DD F9            [10]  226 	ld	sp, ix
      0000A7 DD E1            [14]  227 	pop	ix
      0000A9 C9               [10]  228 	ret
                                    229 ;./lib/./sprite.c:26: T_sprite generateSpriteNoRAM(unsigned char ancho, unsigned char alto, int tam,const unsigned char data[]) {
                                    230 ;	---------------------------------
                                    231 ; Function generateSpriteNoRAM
                                    232 ; ---------------------------------
      0000AA                        233 _generateSpriteNoRAM::
      0000AA DD E5            [15]  234 	push	ix
      0000AC DD 21 00 00      [14]  235 	ld	ix,#0
      0000B0 DD 39            [15]  236 	add	ix,sp
      0000B2 FD 21 F4 FF      [14]  237 	ld	iy, #-12
      0000B6 FD 39            [15]  238 	add	iy, sp
      0000B8 FD F9            [10]  239 	ld	sp, iy
      0000BA 5F               [ 4]  240 	ld	e, a
      0000BB 55               [ 4]  241 	ld	d, l
                                    242 ;./lib/./sprite.c:27: unsigned char tamano = alto*ancho*2;
      0000BC D5               [11]  243 	push	de
      0000BD 62               [ 4]  244 	ld	h, d
                                    245 ;	spillPairReg hl
                                    246 ;	spillPairReg hl
      0000BE 2E 00            [ 7]  247 	ld	l, #0x00
      0000C0 55               [ 4]  248 	ld	d, l
      0000C1 06 08            [ 7]  249 	ld	b, #0x08
      0000C3                        250 00103$:
      0000C3 29               [11]  251 	add	hl, hl
      0000C4 30 01            [12]  252 	jr	NC, 00104$
      0000C6 19               [11]  253 	add	hl, de
      0000C7                        254 00104$:
      0000C7 10 FA            [13]  255 	djnz	00103$
      0000C9 D1               [10]  256 	pop	de
      0000CA 4D               [ 4]  257 	ld	c, l
      0000CB CB 21            [ 8]  258 	sla	c
                                    259 ;./lib/./sprite.c:28: T_sprite sprite = {alto,ancho,tamano,tam/(tamano*32),nextVRAMsprites, 0,0};
      0000CD DD 72 F4         [19]  260 	ld	-12 (ix), d
      0000D0 DD 73 F5         [19]  261 	ld	-11 (ix), e
      0000D3 DD 71 F6         [19]  262 	ld	-10 (ix), c
                                    263 ;	spillPairReg hl
                                    264 ;	spillPairReg hl
      0000D6 DD 71 FE         [19]  265 	ld	-2 (ix), c
      0000D9 DD 36 FF 00      [19]  266 	ld	-1 (ix), #0x00
      0000DD 69               [ 4]  267 	ld	l, c
      0000DE 26 00            [ 7]  268 	ld	h, #0x00
                                    269 ;	spillPairReg hl
                                    270 ;	spillPairReg hl
      0000E0 29               [11]  271 	add	hl, hl
      0000E1 29               [11]  272 	add	hl, hl
      0000E2 29               [11]  273 	add	hl, hl
      0000E3 29               [11]  274 	add	hl, hl
      0000E4 29               [11]  275 	add	hl, hl
      0000E5 EB               [ 4]  276 	ex	de,hl
      0000E6 D5               [11]  277 	push	de
      0000E7 DD 6E 06         [19]  278 	ld	l, 6 (ix)
                                    279 ;	spillPairReg hl
                                    280 ;	spillPairReg hl
      0000EA DD 66 07         [19]  281 	ld	h, 7 (ix)
                                    282 ;	spillPairReg hl
                                    283 ;	spillPairReg hl
      0000ED CDr00r00         [17]  284 	call	__divsint
      0000F0 EB               [ 4]  285 	ex	de, hl
      0000F1 D1               [10]  286 	pop	de
      0000F2 DD 75 F7         [19]  287 	ld	-9 (ix), l
      0000F5 3Ar00r00         [13]  288 	ld	a, (_nextVRAMsprites+0)
      0000F8 DD 77 F8         [19]  289 	ld	-8 (ix), a
      0000FB 3Ar01r00         [13]  290 	ld	a, (_nextVRAMsprites+1)
      0000FE DD 77 F9         [19]  291 	ld	-7 (ix), a
      000101 DD 36 FA 00      [19]  292 	ld	-6 (ix), #0x00
      000105 AF               [ 4]  293 	xor	a, a
      000106 DD 77 FB         [19]  294 	ld	-5 (ix), a
      000109 DD 77 FC         [19]  295 	ld	-4 (ix), a
      00010C DD 36 FD 00      [19]  296 	ld	-3 (ix), #0x00
                                    297 ;./lib/./sprite.c:29: sprite.data = data;
      000110 DD 7E 08         [19]  298 	ld	a, 8 (ix)
      000113 DD 77 FB         [19]  299 	ld	-5 (ix), a
      000116 DD 7E 09         [19]  300 	ld	a, 9 (ix)
      000119 DD 77 FC         [19]  301 	ld	-4 (ix), a
                                    302 ;./lib/./sprite.c:30: sprite.frameInVRAM = 0;
      00011C DD 36 FD 00      [19]  303 	ld	-3 (ix), #0x00
                                    304 ;./lib/./sprite.c:31: SMS_loadTiles(data,nextVRAMsprites,tamano*32);
      000120 DD 4E 08         [19]  305 	ld	c, 8 (ix)
      000123 DD 46 09         [19]  306 	ld	b, 9 (ix)
      000126 2Ar00r00         [16]  307 	ld	hl, (_nextVRAMsprites)
      000129 29               [11]  308 	add	hl, hl
      00012A 29               [11]  309 	add	hl, hl
      00012B 29               [11]  310 	add	hl, hl
      00012C 29               [11]  311 	add	hl, hl
      00012D 29               [11]  312 	add	hl, hl
      00012E CB F4            [ 8]  313 	set	6, h
      000130 D5               [11]  314 	push	de
      000131 59               [ 4]  315 	ld	e, c
      000132 50               [ 4]  316 	ld	d, b
      000133 CDr00r00         [17]  317 	call	_SMS_VRAMmemcpy
                                    318 ;./lib/./sprite.c:32: nextVRAMsprites = nextVRAMsprites + (tamano);
      000136 21r00r00         [10]  319 	ld	hl, #_nextVRAMsprites
      000139 7E               [ 7]  320 	ld	a, (hl)
      00013A DD 86 FE         [19]  321 	add	a, -2 (ix)
      00013D 77               [ 7]  322 	ld	(hl), a
      00013E 23               [ 6]  323 	inc	hl
      00013F 7E               [ 7]  324 	ld	a, (hl)
      000140 DD 8E FF         [19]  325 	adc	a, -1 (ix)
      000143 77               [ 7]  326 	ld	(hl), a
                                    327 ;./lib/./sprite.c:33: return sprite;
      000144 21 10 00         [10]  328 	ld	hl, #16
      000147 39               [11]  329 	add	hl, sp
      000148 5E               [ 7]  330 	ld	e, (hl)
      000149 23               [ 6]  331 	inc	hl
      00014A 56               [ 7]  332 	ld	d, (hl)
      00014B 21 00 00         [10]  333 	ld	hl, #0
      00014E 39               [11]  334 	add	hl, sp
      00014F 01 0A 00         [10]  335 	ld	bc, #10
      000152 ED B0            [21]  336 	ldir
                                    337 ;./lib/./sprite.c:34: }
      000154 DD F9            [10]  338 	ld	sp, ix
      000156 DD E1            [14]  339 	pop	ix
      000158 C9               [10]  340 	ret
                                    341 ;./lib/entities.c:10: void draw_entidad(T_entidad *entidad, T_sprite *sprite){
                                    342 ;	---------------------------------
                                    343 ; Function draw_entidad
                                    344 ; ---------------------------------
      000159                        345 _draw_entidad::
      000159 DD E5            [15]  346 	push	ix
      00015B DD 21 00 00      [14]  347 	ld	ix,#0
      00015F DD 39            [15]  348 	add	ix,sp
      000161 FD 21 EF FF      [14]  349 	ld	iy, #-17
      000165 FD 39            [15]  350 	add	iy, sp
      000167 FD F9            [10]  351 	ld	sp, iy
      000169 DD 75 FC         [19]  352 	ld	-4 (ix), l
      00016C DD 74 FD         [19]  353 	ld	-3 (ix), h
                                    354 ;./lib/entities.c:12: if (sprite->allInRAM == 1){
      00016F DD 73 FA         [19]  355 	ld	-6 (ix), e
      000172 DD 72 FB         [19]  356 	ld	-5 (ix), d
      000175 4B               [ 4]  357 	ld	c, e
      000176 42               [ 4]  358 	ld	b, d
      000177 21 06 00         [10]  359 	ld	hl, #6
      00017A 09               [11]  360 	add	hl, bc
      00017B 4E               [ 7]  361 	ld	c, (hl)
                                    362 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      00017C DD 5E FA         [19]  363 	ld	e, -6 (ix)
      00017F DD 56 FB         [19]  364 	ld	d, -5 (ix)
      000182 DD 7E FC         [19]  365 	ld	a, -4 (ix)
      000185 C6 02            [ 7]  366 	add	a, #0x02
      000187 DD 77 F0         [19]  367 	ld	-16 (ix), a
      00018A DD 7E FD         [19]  368 	ld	a, -3 (ix)
      00018D CE 00            [ 7]  369 	adc	a, #0x00
      00018F DD 77 F1         [19]  370 	ld	-15 (ix), a
      000192 DD 7E FA         [19]  371 	ld	a, -6 (ix)
      000195 C6 04            [ 7]  372 	add	a, #0x04
      000197 DD 77 F2         [19]  373 	ld	-14 (ix), a
      00019A DD 7E FB         [19]  374 	ld	a, -5 (ix)
      00019D CE 00            [ 7]  375 	adc	a, #0x00
      00019F DD 77 F3         [19]  376 	ld	-13 (ix), a
                                    377 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      0001A2 DD 7E FC         [19]  378 	ld	a, -4 (ix)
      0001A5 C6 01            [ 7]  379 	add	a, #0x01
      0001A7 DD 77 F8         [19]  380 	ld	-8 (ix), a
      0001AA DD 7E FD         [19]  381 	ld	a, -3 (ix)
      0001AD CE 00            [ 7]  382 	adc	a, #0x00
      0001AF DD 77 F9         [19]  383 	ld	-7 (ix), a
      0001B2 DD 7E FA         [19]  384 	ld	a, -6 (ix)
      0001B5 C6 01            [ 7]  385 	add	a, #0x01
      0001B7 DD 77 FE         [19]  386 	ld	-2 (ix), a
      0001BA DD 7E FB         [19]  387 	ld	a, -5 (ix)
      0001BD CE 00            [ 7]  388 	adc	a, #0x00
      0001BF DD 77 FF         [19]  389 	ld	-1 (ix), a
                                    390 ;./lib/entities.c:23: int frame = sprite->tamano*entidad->frame*32;
      0001C2 DD 6E F0         [19]  391 	ld	l, -16 (ix)
      0001C5 DD 66 F1         [19]  392 	ld	h, -15 (ix)
      0001C8 7E               [ 7]  393 	ld	a, (hl)
      0001C9 DD 77 F4         [19]  394 	ld	-12 (ix), a
                                    395 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      0001CC 13               [ 6]  396 	inc	de
      0001CD 13               [ 6]  397 	inc	de
      0001CE 1A               [ 7]  398 	ld	a, (de)
      0001CF DD 77 F5         [19]  399 	ld	-11 (ix), a
                                    400 ;./lib/entities.c:12: if (sprite->allInRAM == 1){
      0001D2 0D               [ 4]  401 	dec	c
      0001D3 C2r98r02         [10]  402 	jp	NZ,00108$
                                    403 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      0001D6 DD 5E F5         [19]  404 	ld	e, -11 (ix)
      0001D9 DD 66 F4         [19]  405 	ld	h, -12 (ix)
                                    406 ;	spillPairReg hl
                                    407 ;	spillPairReg hl
      0001DC 2E 00            [ 7]  408 	ld	l, #0x00
      0001DE 55               [ 4]  409 	ld	d, l
      0001DF 06 08            [ 7]  410 	ld	b, #0x08
      0001E1                        411 00200$:
      0001E1 29               [11]  412 	add	hl, hl
      0001E2 30 01            [12]  413 	jr	NC, 00201$
      0001E4 19               [11]  414 	add	hl, de
      0001E5                        415 00201$:
      0001E5 10 FA            [13]  416 	djnz	00200$
      0001E7 4D               [ 4]  417 	ld	c, l
      0001E8 DD 6E F2         [19]  418 	ld	l, -14 (ix)
      0001EB DD 66 F3         [19]  419 	ld	h, -13 (ix)
      0001EE 7E               [ 7]  420 	ld	a, (hl)
      0001EF 81               [ 4]  421 	add	a, c
      0001F0 DD 77 EF         [19]  422 	ld	-17 (ix), a
                                    423 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      0001F3 DD 7E F8         [19]  424 	ld	a, -8 (ix)
      0001F6 DD 77 F0         [19]  425 	ld	-16 (ix), a
      0001F9 DD 7E F9         [19]  426 	ld	a, -7 (ix)
      0001FC DD 77 F1         [19]  427 	ld	-15 (ix), a
      0001FF DD 7E FE         [19]  428 	ld	a, -2 (ix)
      000202 DD 77 F2         [19]  429 	ld	-14 (ix), a
      000205 DD 7E FF         [19]  430 	ld	a, -1 (ix)
      000208 DD 77 F3         [19]  431 	ld	-13 (ix), a
      00020B DD 36 FE 00      [19]  432 	ld	-2 (ix), #0x00
      00020F                        433 00114$:
      00020F DD 6E FA         [19]  434 	ld	l, -6 (ix)
      000212 DD 66 FB         [19]  435 	ld	h, -5 (ix)
      000215 DD 7E FE         [19]  436 	ld	a,-2 (ix)
      000218 96               [ 7]  437 	sub	a,(hl)
      000219 D2r84r03         [10]  438 	jp	NC, 00122$
                                    439 ;./lib/entities.c:15: unsigned char desplazado = (j<<2);
      00021C DD 7E FE         [19]  440 	ld	a, -2 (ix)
      00021F 87               [ 4]  441 	add	a, a
      000220 87               [ 4]  442 	add	a, a
                                    443 ;./lib/entities.c:16: unsigned char jCalculated = desplazado + frame, y = entidad->y+(desplazado<<2);
      000221 47               [ 4]  444 	ld	b, a
      000222 DD 86 EF         [19]  445 	add	a, -17 (ix)
      000225 DD 77 F4         [19]  446 	ld	-12 (ix), a
      000228 DD 6E F0         [19]  447 	ld	l, -16 (ix)
      00022B DD 66 F1         [19]  448 	ld	h, -15 (ix)
      00022E 4E               [ 7]  449 	ld	c, (hl)
      00022F 78               [ 4]  450 	ld	a, b
      000230 87               [ 4]  451 	add	a, a
      000231 87               [ 4]  452 	add	a, a
      000232 81               [ 4]  453 	add	a, c
      000233 DD 77 F5         [19]  454 	ld	-11 (ix), a
                                    455 ;./lib/entities.c:17: for(i=0;i<sprite->ancho;i++) {
      000236 DD 36 FF 00      [19]  456 	ld	-1 (ix), #0x00
      00023A                        457 00111$:
      00023A DD 6E F2         [19]  458 	ld	l, -14 (ix)
      00023D DD 66 F3         [19]  459 	ld	h, -13 (ix)
      000240 DD 7E FF         [19]  460 	ld	a,-1 (ix)
      000243 96               [ 7]  461 	sub	a,(hl)
      000244 30 4C            [12]  462 	jr	NC, 00115$
                                    463 ;./lib/entities.c:18: SMS_addSprite(entidad->x+(i<<3),y, jCalculated + (i<<1) );  
      000246 DD 6E FC         [19]  464 	ld	l, -4 (ix)
      000249 DD 66 FD         [19]  465 	ld	h, -3 (ix)
      00024C 7E               [ 7]  466 	ld	a, (hl)
      00024D DD 77 F9         [19]  467 	ld	-7 (ix), a
      000250 DD 77 F6         [19]  468 	ld	-10 (ix), a
      000253 DD 36 F7 00      [19]  469 	ld	-9 (ix), #0x00
      000257 DD 7E FF         [19]  470 	ld	a, -1 (ix)
      00025A DD 77 F8         [19]  471 	ld	-8 (ix), a
      00025D DD 36 F9 00      [19]  472 	ld	-7 (ix), #0x00
      000261 6F               [ 4]  473 	ld	l, a
      000262 26 00            [ 7]  474 	ld	h, #0x00
      000264 29               [11]  475 	add	hl, hl
      000265 29               [11]  476 	add	hl, hl
      000266 29               [11]  477 	add	hl, hl
      000267 DD 5E F6         [19]  478 	ld	e, -10 (ix)
      00026A 16 00            [ 7]  479 	ld	d, #0x00
      00026C 19               [11]  480 	add	hl, de
      00026D 45               [ 4]  481 	ld	b, l
      00026E 0E 00            [ 7]  482 	ld	c, #0x00
      000270 DD 5E F4         [19]  483 	ld	e, -12 (ix)
      000273 16 00            [ 7]  484 	ld	d, #0x00
      000275 DD 6E F8         [19]  485 	ld	l, -8 (ix)
      000278 DD 66 F9         [19]  486 	ld	h, -7 (ix)
      00027B 29               [11]  487 	add	hl, hl
      00027C 19               [11]  488 	add	hl, de
      00027D 7D               [ 4]  489 	ld	a, l
      00027E 16 00            [ 7]  490 	ld	d, #0x00
      000280 B1               [ 4]  491 	or	a, c
      000281 5F               [ 4]  492 	ld	e, a
      000282 7A               [ 4]  493 	ld	a, d
      000283 B0               [ 4]  494 	or	a, b
      000284 57               [ 4]  495 	ld	d, a
      000285 DD 6E F5         [19]  496 	ld	l, -11 (ix)
                                    497 ;	spillPairReg hl
                                    498 ;	spillPairReg hl
      000288 26 00            [ 7]  499 	ld	h, #0x00
                                    500 ;	spillPairReg hl
                                    501 ;	spillPairReg hl
      00028A CDr00r00         [17]  502 	call	_SMS_addSprite_f
                                    503 ;./lib/entities.c:17: for(i=0;i<sprite->ancho;i++) {
      00028D DD 34 FF         [23]  504 	inc	-1 (ix)
      000290 18 A8            [12]  505 	jr	00111$
      000292                        506 00115$:
                                    507 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      000292 DD 34 FE         [23]  508 	inc	-2 (ix)
      000295 C3r0Fr02         [10]  509 	jp	00114$
      000298                        510 00108$:
                                    511 ;./lib/entities.c:23: int frame = sprite->tamano*entidad->frame*32;
      000298 DD 5E F4         [19]  512 	ld	e, -12 (ix)
      00029B DD 66 F5         [19]  513 	ld	h, -11 (ix)
                                    514 ;	spillPairReg hl
                                    515 ;	spillPairReg hl
      00029E 2E 00            [ 7]  516 	ld	l, #0x00
      0002A0 55               [ 4]  517 	ld	d, l
      0002A1 06 08            [ 7]  518 	ld	b, #0x08
      0002A3                        519 00202$:
      0002A3 29               [11]  520 	add	hl, hl
      0002A4 30 01            [12]  521 	jr	NC, 00203$
      0002A6 19               [11]  522 	add	hl, de
      0002A7                        523 00203$:
      0002A7 10 FA            [13]  524 	djnz	00202$
      0002A9 29               [11]  525 	add	hl, hl
      0002AA 29               [11]  526 	add	hl, hl
      0002AB 29               [11]  527 	add	hl, hl
      0002AC 29               [11]  528 	add	hl, hl
      0002AD 29               [11]  529 	add	hl, hl
      0002AE DD 75 F6         [19]  530 	ld	-10 (ix), l
      0002B1 DD 74 F7         [19]  531 	ld	-9 (ix), h
                                    532 ;./lib/entities.c:24: if (entidad->frame != sprite->frameInVRAM){
      0002B4 DD 7E FA         [19]  533 	ld	a, -6 (ix)
      0002B7 C6 09            [ 7]  534 	add	a, #0x09
      0002B9 4F               [ 4]  535 	ld	c, a
      0002BA DD 7E FB         [19]  536 	ld	a, -5 (ix)
      0002BD CE 00            [ 7]  537 	adc	a, #0x00
      0002BF 47               [ 4]  538 	ld	b, a
      0002C0 0A               [ 7]  539 	ld	a, (bc)
      0002C1 5F               [ 4]  540 	ld	e, a
      0002C2 DD 7E F4         [19]  541 	ld	a, -12 (ix)
      0002C5 93               [ 4]  542 	sub	a, e
      0002C6 28 42            [12]  543 	jr	Z, 00133$
                                    544 ;./lib/entities.c:25: SMS_loadTiles(sprite->data + frame,sprite->beginVRAM,sprite->tamano<<5);
      0002C8 DD 6E F5         [19]  545 	ld	l, -11 (ix)
                                    546 ;	spillPairReg hl
                                    547 ;	spillPairReg hl
      0002CB 26 00            [ 7]  548 	ld	h, #0x00
                                    549 ;	spillPairReg hl
                                    550 ;	spillPairReg hl
      0002CD 29               [11]  551 	add	hl, hl
      0002CE 29               [11]  552 	add	hl, hl
      0002CF 29               [11]  553 	add	hl, hl
      0002D0 29               [11]  554 	add	hl, hl
      0002D1 29               [11]  555 	add	hl, hl
      0002D2 E5               [11]  556 	push	hl
      0002D3 FD E1            [14]  557 	pop	iy
      0002D5 DD 5E FA         [19]  558 	ld	e, -6 (ix)
      0002D8 DD 56 FB         [19]  559 	ld	d, -5 (ix)
      0002DB 21 07 00         [10]  560 	ld	hl, #7
      0002DE 19               [11]  561 	add	hl, de
      0002DF 5E               [ 7]  562 	ld	e, (hl)
      0002E0 23               [ 6]  563 	inc	hl
      0002E1 56               [ 7]  564 	ld	d, (hl)
      0002E2 DD 6E F6         [19]  565 	ld	l, -10 (ix)
                                    566 ;	spillPairReg hl
                                    567 ;	spillPairReg hl
      0002E5 DD 66 F7         [19]  568 	ld	h, -9 (ix)
                                    569 ;	spillPairReg hl
                                    570 ;	spillPairReg hl
      0002E8 19               [11]  571 	add	hl, de
      0002E9 EB               [ 4]  572 	ex	de, hl
      0002EA DD 6E F2         [19]  573 	ld	l, -14 (ix)
      0002ED DD 66 F3         [19]  574 	ld	h, -13 (ix)
      0002F0 7E               [ 7]  575 	ld	a, (hl)
      0002F1 23               [ 6]  576 	inc	hl
      0002F2 66               [ 7]  577 	ld	h, (hl)
                                    578 ;	spillPairReg hl
      0002F3 6F               [ 4]  579 	ld	l, a
                                    580 ;	spillPairReg hl
                                    581 ;	spillPairReg hl
      0002F4 29               [11]  582 	add	hl, hl
      0002F5 29               [11]  583 	add	hl, hl
      0002F6 29               [11]  584 	add	hl, hl
      0002F7 29               [11]  585 	add	hl, hl
      0002F8 29               [11]  586 	add	hl, hl
      0002F9 CB F4            [ 8]  587 	set	6, h
      0002FB C5               [11]  588 	push	bc
      0002FC FD E5            [15]  589 	push	iy
      0002FE CDr00r00         [17]  590 	call	_SMS_VRAMmemcpy
      000301 C1               [10]  591 	pop	bc
                                    592 ;./lib/entities.c:26: sprite->frameInVRAM = entidad->frame;
      000302 DD 6E F0         [19]  593 	ld	l, -16 (ix)
      000305 DD 66 F1         [19]  594 	ld	h, -15 (ix)
      000308 7E               [ 7]  595 	ld	a, (hl)
      000309 02               [ 7]  596 	ld	(bc), a
                                    597 ;./lib/entities.c:28: for(j=0;j<sprite->alto;j++) {
      00030A                        598 00133$:
      00030A DD 7E FE         [19]  599 	ld	a, -2 (ix)
      00030D DD 77 F6         [19]  600 	ld	-10 (ix), a
      000310 DD 7E FF         [19]  601 	ld	a, -1 (ix)
      000313 DD 77 F7         [19]  602 	ld	-9 (ix), a
      000316 DD 36 FF 00      [19]  603 	ld	-1 (ix), #0x00
      00031A                        604 00120$:
      00031A DD 6E FA         [19]  605 	ld	l, -6 (ix)
      00031D DD 66 FB         [19]  606 	ld	h, -5 (ix)
      000320 DD 7E FF         [19]  607 	ld	a,-1 (ix)
      000323 96               [ 7]  608 	sub	a,(hl)
      000324 30 5E            [12]  609 	jr	NC, 00122$
                                    610 ;./lib/entities.c:29: for(i=0;i<sprite->ancho;i++) {
      000326 0E 00            [ 7]  611 	ld	c, #0x00
      000328                        612 00117$:
      000328 DD 6E F6         [19]  613 	ld	l, -10 (ix)
      00032B DD 66 F7         [19]  614 	ld	h, -9 (ix)
      00032E 46               [ 7]  615 	ld	b, (hl)
      00032F 79               [ 4]  616 	ld	a, c
      000330 90               [ 4]  617 	sub	a, b
      000331 30 4C            [12]  618 	jr	NC, 00121$
                                    619 ;./lib/entities.c:30: SMS_addSprite(entidad->x+(i<<3),entidad->y+(j<<4), (j<<2) + (i<<1) );  
      000333 DD 6E FC         [19]  620 	ld	l, -4 (ix)
      000336 DD 66 FD         [19]  621 	ld	h, -3 (ix)
      000339 7E               [ 7]  622 	ld	a, (hl)
      00033A 59               [ 4]  623 	ld	e, c
      00033B 16 00            [ 7]  624 	ld	d, #0x00
      00033D 6B               [ 4]  625 	ld	l, e
      00033E 62               [ 4]  626 	ld	h, d
      00033F 29               [11]  627 	add	hl, hl
      000340 29               [11]  628 	add	hl, hl
      000341 29               [11]  629 	add	hl, hl
      000342 85               [ 4]  630 	add	a, l
                                    631 ;	spillPairReg hl
                                    632 ;	spillPairReg hl
                                    633 ;	spillPairReg hl
                                    634 ;	spillPairReg hl
      000343 67               [ 4]  635 	ld	h, a
                                    636 ;	spillPairReg hl
                                    637 ;	spillPairReg hl
      000344 2E 00            [ 7]  638 	ld	l, #0x00
                                    639 ;	spillPairReg hl
                                    640 ;	spillPairReg hl
      000346 DD 7E FF         [19]  641 	ld	a, -1 (ix)
      000349 DD 77 F4         [19]  642 	ld	-12 (ix), a
      00034C DD 36 F5 00      [19]  643 	ld	-11 (ix), #0x00
      000350 87               [ 4]  644 	add	a, a
      000351 87               [ 4]  645 	add	a, a
      000352 EB               [ 4]  646 	ex	de, hl
      000353 29               [11]  647 	add	hl, hl
      000354 EB               [ 4]  648 	ex	de, hl
      000355 83               [ 4]  649 	add	a, e
      000356 5F               [ 4]  650 	ld	e, a
      000357 16 00            [ 7]  651 	ld	d, #0x00
      000359 7B               [ 4]  652 	ld	a, e
      00035A B5               [ 4]  653 	or	a, l
      00035B 5F               [ 4]  654 	ld	e, a
      00035C 7A               [ 4]  655 	ld	a, d
      00035D B4               [ 4]  656 	or	a, h
      00035E 57               [ 4]  657 	ld	d, a
      00035F DD 6E F8         [19]  658 	ld	l, -8 (ix)
      000362 DD 66 F9         [19]  659 	ld	h, -7 (ix)
      000365 7E               [ 7]  660 	ld	a, (hl)
      000366 06 00            [ 7]  661 	ld	b, #0x00
      000368 DD 6E F4         [19]  662 	ld	l, -12 (ix)
      00036B DD 66 F5         [19]  663 	ld	h, -11 (ix)
      00036E 29               [11]  664 	add	hl, hl
      00036F 29               [11]  665 	add	hl, hl
      000370 29               [11]  666 	add	hl, hl
      000371 29               [11]  667 	add	hl, hl
      000372 85               [ 4]  668 	add	a, l
      000373 6F               [ 4]  669 	ld	l, a
                                    670 ;	spillPairReg hl
                                    671 ;	spillPairReg hl
      000374 78               [ 4]  672 	ld	a, b
      000375 8C               [ 4]  673 	adc	a, h
      000376 67               [ 4]  674 	ld	h, a
                                    675 ;	spillPairReg hl
                                    676 ;	spillPairReg hl
      000377 C5               [11]  677 	push	bc
      000378 CDr00r00         [17]  678 	call	_SMS_addSprite_f
      00037B C1               [10]  679 	pop	bc
                                    680 ;./lib/entities.c:29: for(i=0;i<sprite->ancho;i++) {
      00037C 0C               [ 4]  681 	inc	c
      00037D 18 A9            [12]  682 	jr	00117$
      00037F                        683 00121$:
                                    684 ;./lib/entities.c:28: for(j=0;j<sprite->alto;j++) {
      00037F DD 34 FF         [23]  685 	inc	-1 (ix)
      000382 18 96            [12]  686 	jr	00120$
      000384                        687 00122$:
                                    688 ;./lib/entities.c:34: }
      000384 DD F9            [10]  689 	ld	sp, ix
      000386 DD E1            [14]  690 	pop	ix
      000388 C9               [10]  691 	ret
                                    692 ;./alex.c:7: void moveAlex(int keys)
                                    693 ;	---------------------------------
                                    694 ; Function moveAlex
                                    695 ; ---------------------------------
      000389                        696 _moveAlex::
      000389 DD E5            [15]  697 	push	ix
      00038B DD 21 00 00      [14]  698 	ld	ix,#0
      00038F DD 39            [15]  699 	add	ix,sp
      000391 F5               [11]  700 	push	af
      000392 F5               [11]  701 	push	af
      000393 F5               [11]  702 	push	af
      000394 DD 75 FE         [19]  703 	ld	-2 (ix), l
      000397 DD 74 FF         [19]  704 	ld	-1 (ix), h
                                    705 ;./alex.c:10: if (keys & PORT_A_KEY_LEFT)
      00039A DD 7E FE         [19]  706 	ld	a, -2 (ix)
      00039D E6 04            [ 7]  707 	and	a, #0x04
      00039F DD 77 FA         [19]  708 	ld	-6 (ix), a
      0003A2 DD 36 FB 00      [19]  709 	ld	-5 (ix), #0x00
                                    710 ;./alex.c:12: if (keys & PORT_A_KEY_RIGHT)
      0003A6 DD 7E FE         [19]  711 	ld	a, -2 (ix)
      0003A9 E6 08            [ 7]  712 	and	a, #0x08
      0003AB DD 77 FC         [19]  713 	ld	-4 (ix), a
      0003AE DD 36 FD 00      [19]  714 	ld	-3 (ix), #0x00
                                    715 ;./alex.c:9: if ((keys & PORT_A_KEY_DOWN) && alex.state == 0){
      0003B2 DD CB FE 4E      [20]  716 	bit	1, -2 (ix)
      0003B6 28 34            [12]  717 	jr	Z, 00109$
      0003B8 3Ar09r00         [13]  718 	ld	a, (#_alex + 5)
      0003BB B7               [ 4]  719 	or	a, a
      0003BC 20 2E            [12]  720 	jr	NZ, 00109$
                                    721 ;./alex.c:11: alex.oriented = 1;
      0003BE 21r08r00         [10]  722 	ld	hl, #_alex + 4
                                    723 ;./alex.c:10: if (keys & PORT_A_KEY_LEFT)
      0003C1 AF               [ 4]  724 	xor	a, a
      0003C2 DD B6 FA         [19]  725 	or	a, -6 (ix)
      0003C5 28 02            [12]  726 	jr	Z, 00102$
                                    727 ;./alex.c:11: alex.oriented = 1;
      0003C7 36 01            [10]  728 	ld	(hl), #0x01
      0003C9                        729 00102$:
                                    730 ;./alex.c:12: if (keys & PORT_A_KEY_RIGHT)
      0003C9 AF               [ 4]  731 	xor	a, a
      0003CA DD B6 FC         [19]  732 	or	a, -4 (ix)
      0003CD 28 02            [12]  733 	jr	Z, 00104$
                                    734 ;./alex.c:13: alex.oriented = 0;
      0003CF 36 00            [10]  735 	ld	(hl), #0x00
      0003D1                        736 00104$:
                                    737 ;./alex.c:14: if (!alex.oriented)
      0003D1 7E               [ 7]  738 	ld	a, (hl)
                                    739 ;./alex.c:15: alex.frame = 7;
                                    740 ;./alex.c:14: if (!alex.oriented)
      0003D2 DD 77 FD         [19]  741 	ld	-3 (ix), a
      0003D5 B7               [ 4]  742 	or	a, a
      0003D6 20 07            [12]  743 	jr	NZ, 00106$
                                    744 ;./alex.c:15: alex.frame = 7;
      0003D8 21r06r00         [10]  745 	ld	hl, #(_alex + 2)
      0003DB 36 07            [10]  746 	ld	(hl), #0x07
      0003DD 18 05            [12]  747 	jr	00107$
      0003DF                        748 00106$:
                                    749 ;./alex.c:17: alex.frame = 15;
      0003DF 21r06r00         [10]  750 	ld	hl, #(_alex + 2)
      0003E2 36 0F            [10]  751 	ld	(hl), #0x0f
      0003E4                        752 00107$:
                                    753 ;./alex.c:18: alex.lastChangeFrame = 15;
      0003E4 21r07r00         [10]  754 	ld	hl, #_alex + 3
      0003E7 36 0F            [10]  755 	ld	(hl), #0x0f
                                    756 ;./alex.c:19: return; // not move
      0003E9 C3r1Ar05         [10]  757 	jp	00150$
      0003EC                        758 00109$:
                                    759 ;./alex.c:23: if ((keys & PORT_A_KEY_LEFT) && alex.x > 8 )
      0003EC AF               [ 4]  760 	xor	a, a
      0003ED DD B6 FA         [19]  761 	or	a, -6 (ix)
      0003F0 28 24            [12]  762 	jr	Z, 00121$
      0003F2 21r04r00         [10]  763 	ld	hl, #_alex+0
      0003F5 4E               [ 7]  764 	ld	c, (hl)
      0003F6 3E 08            [ 7]  765 	ld	a, #0x08
      0003F8 91               [ 4]  766 	sub	a, c
      0003F9 30 1B            [12]  767 	jr	NC, 00121$
                                    768 ;./alex.c:25: player_v_x = -1;
      0003FB DD 36 FD FF      [19]  769 	ld	-3 (ix), #0xff
                                    770 ;./alex.c:26: alex.oriented = 1;
      0003FF 21r08r00         [10]  771 	ld	hl, #_alex + 4
      000402 36 01            [10]  772 	ld	(hl), #0x01
                                    773 ;./alex.c:27: if (alex.frame < 8 || alex.frame > 11)
      000404 21r06r00         [10]  774 	ld	hl, #_alex + 2
      000407 4E               [ 7]  775 	ld	c, (hl)
      000408 79               [ 4]  776 	ld	a, c
      000409 D6 08            [ 7]  777 	sub	a, #0x08
      00040B 38 05            [12]  778 	jr	C, 00111$
      00040D 3E 0B            [ 7]  779 	ld	a, #0x0b
      00040F 91               [ 4]  780 	sub	a, c
      000410 30 34            [12]  781 	jr	NC, 00122$
      000412                        782 00111$:
                                    783 ;./alex.c:28: alex.frame = 8;
      000412 36 08            [10]  784 	ld	(hl), #0x08
      000414 18 30            [12]  785 	jr	00122$
      000416                        786 00121$:
                                    787 ;./alex.c:31: else if ((keys & PORT_A_KEY_RIGHT) && alex.x <240)
      000416 AF               [ 4]  788 	xor	a, a
      000417 DD B6 FC         [19]  789 	or	a, -4 (ix)
      00041A 28 12            [12]  790 	jr	Z, 00117$
      00041C 3Ar04r00         [13]  791 	ld	a, (#_alex + 0)
      00041F D6 F0            [ 7]  792 	sub	a, #0xf0
      000421 30 0B            [12]  793 	jr	NC, 00117$
                                    794 ;./alex.c:33: player_v_x = 1;
      000423 DD 36 FD 01      [19]  795 	ld	-3 (ix), #0x01
                                    796 ;./alex.c:34: alex.oriented = 0;
      000427 21r08r00         [10]  797 	ld	hl, #_alex+4
      00042A 36 00            [10]  798 	ld	(hl), #0x00
      00042C 18 18            [12]  799 	jr	00122$
      00042E                        800 00117$:
                                    801 ;./alex.c:37: player_v_x = 0;
      00042E DD 36 FD 00      [19]  802 	ld	-3 (ix), #0x00
                                    803 ;./alex.c:38: alex.frame = 4;
      000432 11r06r00         [10]  804 	ld	de, #_alex + 2
      000435 3E 04            [ 7]  805 	ld	a, #0x04
      000437 12               [ 7]  806 	ld	(de), a
                                    807 ;./alex.c:39: if (alex.oriented)
      000438 3Ar08r00         [13]  808 	ld	a, (#_alex + 4)
      00043B B7               [ 4]  809 	or	a, a
      00043C 28 03            [12]  810 	jr	Z, 00115$
                                    811 ;./alex.c:40: alex.frame = 12;
      00043E 3E 0C            [ 7]  812 	ld	a, #0x0c
      000440 12               [ 7]  813 	ld	(de), a
      000441                        814 00115$:
                                    815 ;./alex.c:41: alex.lastChangeFrame = 15;
      000441 21r07r00         [10]  816 	ld	hl, #_alex + 3
      000444 36 0F            [10]  817 	ld	(hl), #0x0f
      000446                        818 00122$:
                                    819 ;./alex.c:43: alex.x = alex.x + player_v_x;
      000446 01r04r00         [10]  820 	ld	bc, #_alex+0
      000449 0A               [ 7]  821 	ld	a, (bc)
      00044A DD 5E FD         [19]  822 	ld	e, -3 (ix)
      00044D 83               [ 4]  823 	add	a, e
      00044E 02               [ 7]  824 	ld	(bc), a
                                    825 ;./alex.c:44: if (player_v_x != 0){
      00044F DD 7E FD         [19]  826 	ld	a, -3 (ix)
      000452 B7               [ 4]  827 	or	a, a
      000453 28 2D            [12]  828 	jr	Z, 00133$
                                    829 ;./alex.c:45: alex.lastChangeFrame++;
      000455 01r07r00         [10]  830 	ld	bc, #_alex + 3
      000458 0A               [ 7]  831 	ld	a, (bc)
      000459 3C               [ 4]  832 	inc	a
      00045A 02               [ 7]  833 	ld	(bc), a
                                    834 ;./alex.c:46: if (alex.lastChangeFrame % 16 == 0)
      00045B E6 0F            [ 7]  835 	and	a, #0x0f
      00045D 20 23            [12]  836 	jr	NZ, 00133$
                                    837 ;./alex.c:48: alex.frame++;
      00045F 01r06r00         [10]  838 	ld	bc, #_alex + 2
      000462 0A               [ 7]  839 	ld	a, (bc)
      000463 3C               [ 4]  840 	inc	a
      000464 5F               [ 4]  841 	ld	e, a
      000465 02               [ 7]  842 	ld	(bc), a
                                    843 ;./alex.c:49: if (alex.frame > 3 && !alex.oriented)
      000466 3E 03            [ 7]  844 	ld	a, #0x03
      000468 93               [ 4]  845 	sub	a, e
      000469 30 07            [12]  846 	jr	NC, 00125$
      00046B 3Ar08r00         [13]  847 	ld	a, (#(_alex + 4) + 0)
                                    848 ;./alex.c:50: alex.frame = 0;
      00046E B7               [ 4]  849 	or	a,a
      00046F 20 01            [12]  850 	jr	NZ, 00125$
      000471 02               [ 7]  851 	ld	(bc), a
      000472                        852 00125$:
                                    853 ;./alex.c:51: if (alex.frame > 11 && alex.oriented)
      000472 0A               [ 7]  854 	ld	a, (bc)
      000473 5F               [ 4]  855 	ld	e, a
      000474 3E 0B            [ 7]  856 	ld	a, #0x0b
      000476 93               [ 4]  857 	sub	a, e
      000477 30 09            [12]  858 	jr	NC, 00133$
      000479 3Ar08r00         [13]  859 	ld	a, (#(_alex + 4) + 0)
      00047C B7               [ 4]  860 	or	a, a
      00047D 28 03            [12]  861 	jr	Z, 00133$
                                    862 ;./alex.c:52: alex.frame = 8;
      00047F 3E 08            [ 7]  863 	ld	a, #0x08
      000481 02               [ 7]  864 	ld	(bc), a
      000482                        865 00133$:
                                    866 ;./alex.c:56: if ((keys & PORT_A_KEY_1) && alex.state == 0) {
      000482 DD CB FE 66      [20]  867 	bit	4, -2 (ix)
      000486 28 21            [12]  868 	jr	Z, 00135$
      000488 21r09r00         [10]  869 	ld	hl, #_alex + 5
      00048B 7E               [ 7]  870 	ld	a, (hl)
      00048C B7               [ 4]  871 	or	a, a
      00048D 20 1A            [12]  872 	jr	NZ, 00135$
                                    873 ;./alex.c:57: alex.state = 1;
      00048F 36 01            [10]  874 	ld	(hl), #0x01
                                    875 ;./alex.c:58: finSalto = alex.y - 70;
      000491 21r05r00         [10]  876 	ld	hl, #_alex + 1
      000494 4E               [ 7]  877 	ld	c, (hl)
      000495 06 00            [ 7]  878 	ld	b, #0x00
      000497 21r00r00         [10]  879 	ld	hl, #_finSalto
      00049A 79               [ 4]  880 	ld	a, c
      00049B C6 BA            [ 7]  881 	add	a, #0xba
      00049D 77               [ 7]  882 	ld	(hl), a
      00049E 23               [ 6]  883 	inc	hl
      00049F 78               [ 4]  884 	ld	a, b
      0004A0 CE FF            [ 7]  885 	adc	a, #0xff
      0004A2 77               [ 7]  886 	ld	(hl), a
                                    887 ;./alex.c:59: vY = -2;
      0004A3 21 FE FF         [10]  888 	ld	hl, #0xfffe
      0004A6 22r02r00         [16]  889 	ld	(_vY), hl
      0004A9                        890 00135$:
                                    891 ;./alex.c:61: if (alex.state == 1) {
      0004A9 21r09r00         [10]  892 	ld	hl, #(_alex + 5)
      0004AC 4E               [ 7]  893 	ld	c, (hl)
                                    894 ;./alex.c:66: if(alex.y == 0 || alex.y == 1 || alex.y < finSalto) {
                                    895 ;./alex.c:61: if (alex.state == 1) {
      0004AD 0D               [ 4]  896 	dec	c
      0004AE 20 5F            [12]  897 	jr	NZ, 00149$
                                    898 ;./alex.c:62: if (!alex.oriented)
      0004B0 3Ar08r00         [13]  899 	ld	a, (#_alex + 4)
                                    900 ;./alex.c:63: alex.frame = 6; //salto
      0004B3 01r06r00         [10]  901 	ld	bc, #_alex + 2
                                    902 ;./alex.c:62: if (!alex.oriented)
      0004B6 B7               [ 4]  903 	or	a, a
      0004B7 20 05            [12]  904 	jr	NZ, 00138$
                                    905 ;./alex.c:63: alex.frame = 6; //salto
      0004B9 3E 06            [ 7]  906 	ld	a, #0x06
      0004BB 02               [ 7]  907 	ld	(bc), a
      0004BC 18 03            [12]  908 	jr	00139$
      0004BE                        909 00138$:
                                    910 ;./alex.c:65: alex.frame = 14;
      0004BE 3E 0E            [ 7]  911 	ld	a, #0x0e
      0004C0 02               [ 7]  912 	ld	(bc), a
      0004C1                        913 00139$:
                                    914 ;./alex.c:66: if(alex.y == 0 || alex.y == 1 || alex.y < finSalto) {
      0004C1 3Ar05r00         [13]  915 	ld	a, (#(_alex + 1) + 0)
      0004C4 B7               [ 4]  916 	or	a, a
      0004C5 28 17            [12]  917 	jr	Z, 00140$
      0004C7 FE 01            [ 7]  918 	cp	a, #0x01
      0004C9 28 13            [12]  919 	jr	Z, 00140$
      0004CB 5F               [ 4]  920 	ld	e, a
      0004CC 16 00            [ 7]  921 	ld	d, #0x00
      0004CE 21r00r00         [10]  922 	ld	hl, #_finSalto
      0004D1 7B               [ 4]  923 	ld	a, e
      0004D2 96               [ 7]  924 	sub	a, (hl)
      0004D3 23               [ 6]  925 	inc	hl
      0004D4 7A               [ 4]  926 	ld	a, d
      0004D5 9E               [ 7]  927 	sbc	a, (hl)
      0004D6 E2rDBr04         [10]  928 	jp	PO, 00334$
      0004D9 EE 80            [ 7]  929 	xor	a, #0x80
      0004DB                        930 00334$:
      0004DB F2rE4r04         [10]  931 	jp	P, 00141$
      0004DE                        932 00140$:
                                    933 ;./alex.c:67: vY = 2;
      0004DE 21 02 00         [10]  934 	ld	hl, #0x0002
      0004E1 22r02r00         [16]  935 	ld	(_vY), hl
      0004E4                        936 00141$:
                                    937 ;./alex.c:69: if ((alex.y == 150 || alex.y == 151) && vY > 0) {
      0004E4 3Ar05r00         [13]  938 	ld	a, (#(_alex + 1) + 0)
      0004E7 FE 96            [ 7]  939 	cp	a, #0x96
      0004E9 28 04            [12]  940 	jr	Z, 00147$
      0004EB D6 97            [ 7]  941 	sub	a, #0x97
      0004ED 20 20            [12]  942 	jr	NZ, 00149$
      0004EF                        943 00147$:
      0004EF AF               [ 4]  944 	xor	a, a
      0004F0 FD 21r02r00      [14]  945 	ld	iy, #_vY
      0004F4 FD BE 00         [19]  946 	cp	a, 0 (iy)
      0004F7 FD 9E 01         [19]  947 	sbc	a, 1 (iy)
      0004FA E2rFFr04         [10]  948 	jp	PO, 00338$
      0004FD EE 80            [ 7]  949 	xor	a, #0x80
      0004FF                        950 00338$:
      0004FF F2r0Fr05         [10]  951 	jp	P, 00149$
                                    952 ;./alex.c:70: alex.state = 0;
      000502 21r09r00         [10]  953 	ld	hl, #(_alex + 5)
      000505 36 00            [10]  954 	ld	(hl), #0x00
                                    955 ;./alex.c:71: vY = 0;
      000507 21 00 00         [10]  956 	ld	hl, #0x0000
      00050A 22r02r00         [16]  957 	ld	(_vY), hl
                                    958 ;./alex.c:72: alex.frame = 0;
      00050D AF               [ 4]  959 	xor	a, a
      00050E 02               [ 7]  960 	ld	(bc), a
      00050F                        961 00149$:
                                    962 ;./alex.c:75: alex.y += vY;
      00050F 21r05r00         [10]  963 	ld	hl, #(_alex + 1)
      000512 4E               [ 7]  964 	ld	c, (hl)
      000513 3Ar02r00         [13]  965 	ld	a, (_vY+0)
      000516 81               [ 4]  966 	add	a, c
      000517 32r05r00         [13]  967 	ld	(#(_alex + 1)),a
      00051A                        968 00150$:
                                    969 ;./alex.c:77: }
      00051A DD F9            [10]  970 	ld	sp, ix
      00051C DD E1            [14]  971 	pop	ix
      00051E C9               [10]  972 	ret
                                    973 ;main.c:15: void inicializaPajaros()
                                    974 ;	---------------------------------
                                    975 ; Function inicializaPajaros
                                    976 ; ---------------------------------
      00051F                        977 _inicializaPajaros::
      00051F DD E5            [15]  978 	push	ix
      000521 DD 21 00 00      [14]  979 	ld	ix,#0
      000525 DD 39            [15]  980 	add	ix,sp
      000527 F5               [11]  981 	push	af
                                    982 ;main.c:18: for (i = 0; i < NUM_PAJAROS; i++)
      000528 0E 00            [ 7]  983 	ld	c, #0x00
      00052A                        984 00102$:
                                    985 ;main.c:20: pajaros[i].x = 15 + 32 * i;
      00052A 06 00            [ 7]  986 	ld	b, #0x00
      00052C 69               [ 4]  987 	ld	l, c
      00052D 60               [ 4]  988 	ld	h, b
      00052E 29               [11]  989 	add	hl, hl
      00052F 09               [11]  990 	add	hl, bc
      000530 29               [11]  991 	add	hl, hl
      000531 EB               [ 4]  992 	ex	de, hl
      000532 21r02r00         [10]  993 	ld	hl, #_pajaros
      000535 19               [11]  994 	add	hl, de
      000536 EB               [ 4]  995 	ex	de, hl
      000537 79               [ 4]  996 	ld	a, c
      000538 0F               [ 4]  997 	rrca
      000539 0F               [ 4]  998 	rrca
      00053A 0F               [ 4]  999 	rrca
      00053B E6 E0            [ 7] 1000 	and	a, #0xe0
      00053D C6 0F            [ 7] 1001 	add	a, #0x0f
      00053F 12               [ 7] 1002 	ld	(de), a
                                   1003 ;main.c:21: pajaros[i].y = 15 + 16 * (i / 2);
      000540 6B               [ 4] 1004 	ld	l, e
      000541 62               [ 4] 1005 	ld	h, d
      000542 23               [ 6] 1006 	inc	hl
      000543 E3               [19] 1007 	ex	(sp), hl
      000544 69               [ 4] 1008 	ld	l, c
                                   1009 ;	spillPairReg hl
                                   1010 ;	spillPairReg hl
      000545 26 00            [ 7] 1011 	ld	h, #0x00
                                   1012 ;	spillPairReg hl
                                   1013 ;	spillPairReg hl
      000547 CB 2C            [ 8] 1014 	sra	h
      000549 CB 1D            [ 8] 1015 	rr	l
      00054B 7D               [ 4] 1016 	ld	a, l
      00054C 87               [ 4] 1017 	add	a, a
      00054D 87               [ 4] 1018 	add	a, a
      00054E 87               [ 4] 1019 	add	a, a
      00054F 87               [ 4] 1020 	add	a, a
      000550 C6 0F            [ 7] 1021 	add	a, #0x0f
      000552 E1               [10] 1022 	pop	hl
      000553 E5               [11] 1023 	push	hl
      000554 77               [ 7] 1024 	ld	(hl), a
                                   1025 ;main.c:22: pajaros[i].lastChangeFrame = i * 3;
      000555 13               [ 6] 1026 	inc	de
      000556 13               [ 6] 1027 	inc	de
      000557 13               [ 6] 1028 	inc	de
      000558 79               [ 4] 1029 	ld	a, c
      000559 87               [ 4] 1030 	add	a, a
      00055A 81               [ 4] 1031 	add	a, c
      00055B 12               [ 7] 1032 	ld	(de), a
                                   1033 ;main.c:18: for (i = 0; i < NUM_PAJAROS; i++)
      00055C 0C               [ 4] 1034 	inc	c
      00055D 79               [ 4] 1035 	ld	a, c
      00055E D6 0E            [ 7] 1036 	sub	a, #0x0e
      000560 38 C8            [12] 1037 	jr	C, 00102$
                                   1038 ;main.c:24: }
      000562 DD F9            [10] 1039 	ld	sp, ix
      000564 DD E1            [14] 1040 	pop	ix
      000566 C9               [10] 1041 	ret
                                   1042 ;main.c:26: void loadGrapVRAM()
                                   1043 ;	---------------------------------
                                   1044 ; Function loadGrapVRAM
                                   1045 ; ---------------------------------
      000567                       1046 _loadGrapVRAM::
      000567 DD E5            [15] 1047 	push	ix
      000569 DD 21 00 00      [14] 1048 	ld	ix,#0
      00056D DD 39            [15] 1049 	add	ix,sp
      00056F 21 EC FF         [10] 1050 	ld	hl, #-20
      000572 39               [11] 1051 	add	hl, sp
      000573 F9               [ 6] 1052 	ld	sp, hl
                                   1053 ;main.c:28: SMS_init();
      000574 CDr00r00         [17] 1054 	call	_SMS_init
                                   1055 ;main.c:29: inicializaPajaros();
      000577 CDr1Fr05         [17] 1056 	call	_inicializaPajaros
                                   1057 ;main.c:31: SMS_setSpriteMode(SPRITEMODE_TALL);
      00057A 2E 01            [ 7] 1058 	ld	l, #0x01
                                   1059 ;	spillPairReg hl
                                   1060 ;	spillPairReg hl
      00057C CDr00r00         [17] 1061 	call	_SMS_setSpriteMode
                                   1062 ;main.c:32: SMS_displayOn();
      00057F 21 40 01         [10] 1063 	ld	hl, #0x0140
      000582 CDr00r00         [17] 1064 	call	_SMS_VDPturnOnFeature
                                   1065 ;main.c:33: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      000585 21 20 00         [10] 1066 	ld	hl, #0x0020
      000588 CDr00r00         [17] 1067 	call	_SMS_VDPturnOnFeature
                                   1068 ;main.c:34: SMS_loadBGPalette(sonicpalette_inc);
      00058B 21r00r00         [10] 1069 	ld	hl, #_sonicpalette_inc
      00058E CDr00r00         [17] 1070 	call	_SMS_loadBGPalette
                                   1071 ;main.c:35: SMS_loadSpritePalette(palleteAlex_inc);
      000591 21r00r00         [10] 1072 	ld	hl, #_palleteAlex_inc
      000594 CDr00r00         [17] 1073 	call	_SMS_loadSpritePalette
                                   1074 ;main.c:36: SMS_loadTiles(sonictiles_inc, 0, sonictiles_inc_size);
      000597 21 C0 14         [10] 1075 	ld	hl, #0x14c0
      00059A E5               [11] 1076 	push	hl
      00059B 11r00r00         [10] 1077 	ld	de, #_sonictiles_inc
      00059E 21 00 40         [10] 1078 	ld	hl, #0x4000
      0005A1 CDr00r00         [17] 1079 	call	_SMS_VRAMmemcpy
                                   1080 ;main.c:37: spriteAlex = generateSpriteNoRAM(2, 2, spriteAlex_inc_size, spriteAlex_inc);
      0005A4 21r00r00         [10] 1081 	ld	hl, #_spriteAlex_inc
      0005A7 E5               [11] 1082 	push	hl
      0005A8 21 00 10         [10] 1083 	ld	hl, #0x1000
      0005AB E5               [11] 1084 	push	hl
                                   1085 ;	spillPairReg hl
                                   1086 ;	spillPairReg hl
      0005AC 3E 02            [ 7] 1087 	ld	a,#0x02
      0005AE 6F               [ 4] 1088 	ld	l,a
      0005AF E5               [11] 1089 	push	hl
      0005B0 21 06 00         [10] 1090 	ld	hl, #0x0006
      0005B3 39               [11] 1091 	add	hl, sp
      0005B4 EB               [ 4] 1092 	ex	de,hl
      0005B5 E1               [10] 1093 	pop	hl
      0005B6 D5               [11] 1094 	push	de
      0005B7 CDrAAr00         [17] 1095 	call	_generateSpriteNoRAM
      0005BA F1               [10] 1096 	pop	af
      0005BB F1               [10] 1097 	pop	af
      0005BC F1               [10] 1098 	pop	af
      0005BD 11r0Ar00         [10] 1099 	ld	de, #_spriteAlex
      0005C0 21 00 00         [10] 1100 	ld	hl, #0
      0005C3 39               [11] 1101 	add	hl, sp
      0005C4 01 0A 00         [10] 1102 	ld	bc, #0x000a
      0005C7 ED B0            [21] 1103 	ldir
                                   1104 ;main.c:38: spritePajaro = generateSprite(3, 1, spritePajaro_inc_size, spritePajaro_inc);
      0005C9 21r00r00         [10] 1105 	ld	hl, #_spritePajaro_inc
      0005CC E5               [11] 1106 	push	hl
      0005CD 21 80 01         [10] 1107 	ld	hl, #0x0180
      0005D0 E5               [11] 1108 	push	hl
      0005D1 2E 01            [ 7] 1109 	ld	l, #0x01
                                   1110 ;	spillPairReg hl
                                   1111 ;	spillPairReg hl
      0005D3 3E 03            [ 7] 1112 	ld	a, #0x03
      0005D5 E5               [11] 1113 	push	hl
      0005D6 21 10 00         [10] 1114 	ld	hl, #0x0010
      0005D9 39               [11] 1115 	add	hl, sp
      0005DA EB               [ 4] 1116 	ex	de,hl
      0005DB E1               [10] 1117 	pop	hl
      0005DC D5               [11] 1118 	push	de
      0005DD CDr00r00         [17] 1119 	call	_generateSprite
      0005E0 F1               [10] 1120 	pop	af
      0005E1 F1               [10] 1121 	pop	af
      0005E2 F1               [10] 1122 	pop	af
      0005E3 11r14r00         [10] 1123 	ld	de, #_spritePajaro
      0005E6 21 0A 00         [10] 1124 	ld	hl, #10
      0005E9 39               [11] 1125 	add	hl, sp
      0005EA 01 0A 00         [10] 1126 	ld	bc, #0x000a
      0005ED ED B0            [21] 1127 	ldir
                                   1128 ;main.c:39: SMS_loadTileMap(0, 0, sonictilemap_inc, sonictilemap_inc_size);
      0005EF 21 00 06         [10] 1129 	ld	hl, #0x0600
      0005F2 E5               [11] 1130 	push	hl
      0005F3 11r00r00         [10] 1131 	ld	de, #_sonictilemap_inc
      0005F6 26 78            [ 7] 1132 	ld	h, #0x78
      0005F8 CDr00r00         [17] 1133 	call	_SMS_VRAMmemcpy
                                   1134 ;main.c:40: }
      0005FB DD F9            [10] 1135 	ld	sp, ix
      0005FD DD E1            [14] 1136 	pop	ix
      0005FF C9               [10] 1137 	ret
                                   1138 ;main.c:42: void dibujaPajaros()
                                   1139 ;	---------------------------------
                                   1140 ; Function dibujaPajaros
                                   1141 ; ---------------------------------
      000600                       1142 _dibujaPajaros::
      000600 DD E5            [15] 1143 	push	ix
      000602 DD 21 00 00      [14] 1144 	ld	ix,#0
      000606 DD 39            [15] 1145 	add	ix,sp
      000608 F5               [11] 1146 	push	af
                                   1147 ;main.c:45: for (i = 0; i < NUM_PAJAROS; i++)
      000609 DD 36 FF 00      [19] 1148 	ld	-1 (ix), #0x00
      00060D                       1149 00106$:
                                   1150 ;main.c:47: pajaros[i].x++;
      00060D DD 4E FF         [19] 1151 	ld	c, -1 (ix)
      000610 06 00            [ 7] 1152 	ld	b, #0x00
      000612 69               [ 4] 1153 	ld	l, c
      000613 60               [ 4] 1154 	ld	h, b
      000614 29               [11] 1155 	add	hl, hl
      000615 09               [11] 1156 	add	hl, bc
      000616 29               [11] 1157 	add	hl, hl
      000617 EB               [ 4] 1158 	ex	de, hl
      000618 21r02r00         [10] 1159 	ld	hl, #_pajaros
      00061B 19               [11] 1160 	add	hl, de
      00061C EB               [ 4] 1161 	ex	de, hl
      00061D 1A               [ 7] 1162 	ld	a, (de)
      00061E 3C               [ 4] 1163 	inc	a
      00061F 12               [ 7] 1164 	ld	(de), a
                                   1165 ;main.c:48: pajaros[i].lastChangeFrame++;
      000620 4B               [ 4] 1166 	ld	c, e
      000621 42               [ 4] 1167 	ld	b, d
      000622 03               [ 6] 1168 	inc	bc
      000623 03               [ 6] 1169 	inc	bc
      000624 03               [ 6] 1170 	inc	bc
      000625 0A               [ 7] 1171 	ld	a, (bc)
      000626 3C               [ 4] 1172 	inc	a
      000627 02               [ 7] 1173 	ld	(bc), a
                                   1174 ;main.c:49: if (pajaros[i].lastChangeFrame == 20)
      000628 D6 14            [ 7] 1175 	sub	a, #0x14
      00062A 20 15            [12] 1176 	jr	NZ, 00104$
                                   1177 ;main.c:51: pajaros[i].frame++;
      00062C 6B               [ 4] 1178 	ld	l, e
                                   1179 ;	spillPairReg hl
                                   1180 ;	spillPairReg hl
      00062D 62               [ 4] 1181 	ld	h, d
                                   1182 ;	spillPairReg hl
                                   1183 ;	spillPairReg hl
      00062E 23               [ 6] 1184 	inc	hl
      00062F 23               [ 6] 1185 	inc	hl
      000630 7E               [ 7] 1186 	ld	a, (hl)
      000631 3C               [ 4] 1187 	inc	a
      000632 DD 77 FE         [19] 1188 	ld	-2 (ix), a
      000635 77               [ 7] 1189 	ld	(hl), a
                                   1190 ;main.c:52: if (pajaros[i].frame > 1)
      000636 3E 01            [ 7] 1191 	ld	a, #0x01
      000638 DD 96 FE         [19] 1192 	sub	a, -2 (ix)
      00063B 30 02            [12] 1193 	jr	NC, 00102$
                                   1194 ;main.c:53: pajaros[i].frame = 0;
      00063D 36 00            [10] 1195 	ld	(hl), #0x00
      00063F                       1196 00102$:
                                   1197 ;main.c:54: pajaros[i].lastChangeFrame = 0;
      00063F AF               [ 4] 1198 	xor	a, a
      000640 02               [ 7] 1199 	ld	(bc), a
      000641                       1200 00104$:
                                   1201 ;main.c:56: draw_entidad(&(pajaros[i]), &spritePajaro);
      000641 EB               [ 4] 1202 	ex	de, hl
      000642 11r14r00         [10] 1203 	ld	de, #_spritePajaro
      000645 CDr59r01         [17] 1204 	call	_draw_entidad
                                   1205 ;main.c:45: for (i = 0; i < NUM_PAJAROS; i++)
      000648 DD 34 FF         [23] 1206 	inc	-1 (ix)
      00064B DD 7E FF         [19] 1207 	ld	a, -1 (ix)
      00064E D6 0E            [ 7] 1208 	sub	a, #0x0e
      000650 38 BB            [12] 1209 	jr	C, 00106$
                                   1210 ;main.c:58: }
      000652 DD F9            [10] 1211 	ld	sp, ix
      000654 DD E1            [14] 1212 	pop	ix
      000656 C9               [10] 1213 	ret
                                   1214 ;main.c:61: void main(void)
                                   1215 ;	---------------------------------
                                   1216 ; Function main
                                   1217 ; ---------------------------------
      000657                       1218 _main::
      000657 DD E5            [15] 1219 	push	ix
      000659 DD 21 00 00      [14] 1220 	ld	ix,#0
      00065D DD 39            [15] 1221 	add	ix,sp
      00065F F5               [11] 1222 	push	af
                                   1223 ;main.c:66: SMS_VRAMmemsetW(0, 0x0000, 16384);
      000660 DD 36 FF 00      [19] 1224 	ld	-1 (ix), #0x00
      000664 DD 36 FE 00      [19] 1225 	ld	-2 (ix), #0x00
      000668 21 00 40         [10] 1226 	ld	hl, #0x4000
      00066B E5               [11] 1227 	push	hl
      00066C 11 00 00         [10] 1228 	ld	de, #0x0000
      00066F 65               [ 4] 1229 	ld	h, l
      000670 CDr00r00         [17] 1230 	call	_SMS_VRAMmemsetW
                                   1231 ;main.c:76: printf("Hello, World! [1/3]");
      000673 21r06r07         [10] 1232 	ld	hl, #___str_0
      000676 E5               [11] 1233 	push	hl
      000677 CDr00r00         [17] 1234 	call	_printf
      00067A F1               [10] 1235 	pop	af
                                   1236 ;main.c:80: loadGrapVRAM();
      00067B CDr67r05         [17] 1237 	call	_loadGrapVRAM
                                   1238 ;main.c:82: SMS_displayOn();
      00067E 21 40 01         [10] 1239 	ld	hl, #0x0140
      000681 CDr00r00         [17] 1240 	call	_SMS_VDPturnOnFeature
                                   1241 ;main.c:83: SMS_setBGScrollX(scroll_x);
      000684 2E 00            [ 7] 1242 	ld	l, #0x00
                                   1243 ;	spillPairReg hl
                                   1244 ;	spillPairReg hl
      000686 CDr00r00         [17] 1245 	call	_SMS_setBGScrollX
                                   1246 ;main.c:84: SMS_setBGScrollY(scroll_y);
      000689 2E 00            [ 7] 1247 	ld	l, #0x00
                                   1248 ;	spillPairReg hl
                                   1249 ;	spillPairReg hl
      00068B CDr00r00         [17] 1250 	call	_SMS_setBGScrollY
                                   1251 ;main.c:85: SMS_init();
      00068E CDr00r00         [17] 1252 	call	_SMS_init
                                   1253 ;main.c:91: PSGPlay(titulo_psg);
      000691 21r00r00         [10] 1254 	ld	hl, #_titulo_psg
      000694 CDr00r00         [17] 1255 	call	_PSGPlay
                                   1256 ;main.c:92: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      000697 21 20 00         [10] 1257 	ld	hl, #0x0020
      00069A CDr00r00         [17] 1258 	call	_SMS_VDPturnOnFeature
      00069D                       1259 00111$:
                                   1260 ;main.c:97: if (SMS_queryPauseRequested())
      00069D CDr00r00         [17] 1261 	call	_SMS_queryPauseRequested
      0006A0 CB 47            [ 8] 1262 	bit	0,a
      0006A2 28 15            [12] 1263 	jr	Z, 00105$
                                   1264 ;main.c:99: SMS_resetPauseRequest();
      0006A4 CDr00r00         [17] 1265 	call	_SMS_resetPauseRequest
                                   1266 ;main.c:100: while (!SMS_queryPauseRequested())
      0006A7                       1267 00101$:
      0006A7 CDr00r00         [17] 1268 	call	_SMS_queryPauseRequested
      0006AA CB 47            [ 8] 1269 	bit	0,a
      0006AC 20 08            [12] 1270 	jr	NZ, 00103$
                                   1271 ;main.c:102: SMS_waitForVBlank();
      0006AE CDr00r00         [17] 1272 	call	_SMS_waitForVBlank
                                   1273 ;main.c:103: PSGFrame();
      0006B1 CDr00r00         [17] 1274 	call	_PSGFrame
      0006B4 18 F1            [12] 1275 	jr	00101$
      0006B6                       1276 00103$:
                                   1277 ;main.c:105: SMS_resetPauseRequest();
      0006B6 CDr00r00         [17] 1278 	call	_SMS_resetPauseRequest
      0006B9                       1279 00105$:
                                   1280 ;main.c:109: int keys = SMS_getKeysHeld();
      0006B9 CDr00r00         [17] 1281 	call	_SMS_getKeysHeld
                                   1282 ;main.c:110: moveAlex(keys);
      0006BC EB               [ 4] 1283 	ex	de, hl
      0006BD CDr89r03         [17] 1284 	call	_moveAlex
                                   1285 ;main.c:111: SMS_initSprites();
      0006C0 CDr00r00         [17] 1286 	call	_SMS_initSprites
                                   1287 ;main.c:112: draw_entidad(&alex, &spriteAlex);
      0006C3 11r0Ar00         [10] 1288 	ld	de, #_spriteAlex
      0006C6 21r04r00         [10] 1289 	ld	hl, #_alex
      0006C9 CDr59r01         [17] 1290 	call	_draw_entidad
                                   1291 ;main.c:113: dibujaPajaros();
      0006CC CDr00r06         [17] 1292 	call	_dibujaPajaros
                                   1293 ;main.c:115: SMS_finalizeSprites();
      0006CF CDr00r00         [17] 1294 	call	_SMS_finalizeSprites
                                   1295 ;main.c:118: SMS_waitForVBlank();
      0006D2 CDr00r00         [17] 1296 	call	_SMS_waitForVBlank
                                   1297 ;main.c:119: SMS_copySpritestoSAT();
      0006D5 CDr00r00         [17] 1298 	call	_SMS_copySpritestoSAT
                                   1299 ;main.c:120: PSGFrame();
      0006D8 CDr00r00         [17] 1300 	call	_PSGFrame
                                   1301 ;main.c:121: SMS_displayOff();
      0006DB 21 40 01         [10] 1302 	ld	hl, #0x0140
      0006DE CDr00r00         [17] 1303 	call	_SMS_VDPturnOffFeature
                                   1304 ;main.c:122: if (scroll_y % 2 == 0)
      0006E1 DD CB FF 46      [20] 1305 	bit	0, -1 (ix)
      0006E5 20 03            [12] 1306 	jr	NZ, 00107$
                                   1307 ;main.c:123: scroll_x += 1;
      0006E7 DD 34 FE         [23] 1308 	inc	-2 (ix)
      0006EA                       1309 00107$:
                                   1310 ;main.c:124: scroll_y++;
      0006EA DD 34 FF         [23] 1311 	inc	-1 (ix)
                                   1312 ;main.c:125: if (scroll_y == 224)
      0006ED DD 7E FF         [19] 1313 	ld	a, -1 (ix)
      0006F0 D6 E0            [ 7] 1314 	sub	a, #0xe0
      0006F2 20 04            [12] 1315 	jr	NZ, 00109$
                                   1316 ;main.c:126: scroll_y = 0;
      0006F4 DD 36 FF 00      [19] 1317 	ld	-1 (ix), #0x00
      0006F8                       1318 00109$:
                                   1319 ;main.c:128: SMS_setBGScrollX(scroll_x);
      0006F8 DD 6E FE         [19] 1320 	ld	l, -2 (ix)
                                   1321 ;	spillPairReg hl
                                   1322 ;	spillPairReg hl
      0006FB CDr00r00         [17] 1323 	call	_SMS_setBGScrollX
                                   1324 ;main.c:130: SMS_displayOn();
      0006FE 21 40 01         [10] 1325 	ld	hl, #0x0140
      000701 CDr00r00         [17] 1326 	call	_SMS_VDPturnOnFeature
                                   1327 ;main.c:132: }
      000704 18 97            [12] 1328 	jr	00111$
      000706                       1329 ___str_0:
      000706 48 65 6C 6C 6F 2C 20  1330 	.ascii "Hello, World! [1/3]"
             57 6F 72 6C 64 21 20
             5B 31 2F 33 5D
      000719 00                    1331 	.db 0x00
                                   1332 	.area _CODE
      00071A                       1333 __str_1:
      00071A 72 61 70 68 6E 65 74  1334 	.ascii "raphnet"
      000721 00                    1335 	.db 0x00
      000722                       1336 __str_2:
      000722 62 61 73 69 63 20 65  1337 	.ascii "basic example"
             78 61 6D 70 6C 65
      00072F 00                    1338 	.db 0x00
      000730                       1339 __str_3:
      000730 41 20 73 69 6D 70 6C  1340 	.ascii "A simple example"
             65 20 65 78 61 6D 70
             6C 65
      000740 00                    1341 	.db 0x00
                                   1342 	.area _INITIALIZER
      000000                       1343 __xinit__nextVRAMsprites:
      000000 00 01                 1344 	.dw #0x0100
      000002                       1345 __xinit__vY:
      000002 00 00                 1346 	.dw #0x0000
      000004                       1347 __xinit__alex:
      000004 0A                    1348 	.db #0x0a	; 10
      000005 14                    1349 	.db #0x14	; 20
      000006 00                    1350 	.db #0x00	; 0
      000007 00                    1351 	.db #0x00	; 0
      000008 00                    1352 	.db #0x00	; 0
      000009 00                    1353 	.db #0x00	; 0
      00000A                       1354 __xinit__spriteAlex:
      00000A 02                    1355 	.db #0x02	; 2
      00000B 02                    1356 	.db #0x02	; 2
      00000C 08                    1357 	.db #0x08	; 8
      00000D 00                    1358 	.db #0x00	; 0
      00000E 00 00                 1359 	.dw #0x0000
      000010 00                    1360 	.db #0x00	; 0
      000011 00 00                 1361 	.dw #0x0000
      000013 00                    1362 	.db #0x00	; 0
      000014                       1363 __xinit__spritePajaro:
      000014 02                    1364 	.db #0x02	; 2
      000015 02                    1365 	.db #0x02	; 2
      000016 08                    1366 	.db #0x08	; 8
      000017 00                    1367 	.db #0x00	; 0
      000018 00 00                 1368 	.dw #0x0000
      00001A 00                    1369 	.db #0x00	; 0
      00001B 00 00                 1370 	.dw #0x0000
      00001D 00                    1371 	.db #0x00	; 0
                                   1372 	.area _CABS (ABS)
      007FF0                       1373 	.org 0x7FF0
      007FF0                       1374 ___SMS__SEGA_signature:
      007FF0 54                    1375 	.db #0x54	; 84	'T'
      007FF1 4D                    1376 	.db #0x4d	; 77	'M'
      007FF2 52                    1377 	.db #0x52	; 82	'R'
      007FF3 20                    1378 	.db #0x20	; 32
      007FF4 53                    1379 	.db #0x53	; 83	'S'
      007FF5 45                    1380 	.db #0x45	; 69	'E'
      007FF6 47                    1381 	.db #0x47	; 71	'G'
      007FF7 41                    1382 	.db #0x41	; 65	'A'
      007FF8 FF                    1383 	.db #0xff	; 255
      007FF9 FF                    1384 	.db #0xff	; 255
      007FFA FF                    1385 	.db #0xff	; 255
      007FFB FF                    1386 	.db #0xff	; 255
      007FFC 99                    1387 	.db #0x99	; 153
      007FFD 99                    1388 	.db #0x99	; 153
      007FFE 00                    1389 	.db #0x00	; 0
      007FFF 4C                    1390 	.db #0x4c	; 76	'L'
      007FD8                       1391 	.org 0x7FD8
      007FD8                       1392 ___SMS__SDSC_author:
      007FD8 72 61 70 68 6E 65 74  1393 	.ascii "raphnet"
      007FDF 00                    1394 	.db 0x00
      007FCA                       1395 	.org 0x7FCA
      007FCA                       1396 ___SMS__SDSC_name:
      007FCA 62 61 73 69 63 20 65  1397 	.ascii "basic example"
             78 61 6D 70 6C 65
      007FD7 00                    1398 	.db 0x00
      007FB9                       1399 	.org 0x7FB9
      007FB9                       1400 ___SMS__SDSC_descr:
      007FB9 41 20 73 69 6D 70 6C  1401 	.ascii "A simple example"
             65 20 65 78 61 6D 70
             6C 65
      007FC9 00                    1402 	.db 0x00
      007FE0                       1403 	.org 0x7FE0
      007FE0                       1404 ___SMS__SDSC_signature:
      007FE0 53                    1405 	.db #0x53	; 83	'S'
      007FE1 44                    1406 	.db #0x44	; 68	'D'
      007FE2 53                    1407 	.db #0x53	; 83	'S'
      007FE3 43                    1408 	.db #0x43	; 67	'C'
      007FE4 01                    1409 	.db #0x01	; 1
      007FE5 00                    1410 	.db #0x00	; 0
      007FE6 00                    1411 	.db #0x00	; 0
      007FE7 00                    1412 	.db #0x00	; 0
      007FE8 00                    1413 	.db #0x00	; 0
      007FE9 00                    1414 	.db #0x00	; 0
      007FEA D8                    1415 	.db #0xd8	; 216
      007FEB 7F                    1416 	.db #0x7f	; 127
      007FEC CA                    1417 	.db #0xca	; 202
      007FED 7F                    1418 	.db #0x7f	; 127
      007FEE B9                    1419 	.db #0xb9	; 185
      007FEF 7F                    1420 	.db #0x7f	; 127
