                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14549 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___SMS__SDSC_signature
                                     12 	.globl ___SMS__SDSC_descr
                                     13 	.globl ___SMS__SDSC_name
                                     14 	.globl ___SMS__SDSC_author
                                     15 	.globl ___SMS__SEGA_signature
                                     16 	.globl _main
                                     17 	.globl _draw_main_character
                                     18 	.globl _loadGrapVRAM
                                     19 	.globl _init
                                     20 	.globl _PSGFrame
                                     21 	.globl _PSGPlay
                                     22 	.globl _SMS_VRAMmemsetW
                                     23 	.globl _SMS_VRAMmemcpy
                                     24 	.globl _SMS_resetPauseRequest
                                     25 	.globl _SMS_queryPauseRequested
                                     26 	.globl _SMS_getKeysHeld
                                     27 	.globl _SMS_loadSpritePalette
                                     28 	.globl _SMS_loadBGPalette
                                     29 	.globl _SMS_copySpritestoSAT
                                     30 	.globl _SMS_finalizeSprites
                                     31 	.globl _SMS_addSprite_f
                                     32 	.globl _SMS_initSprites
                                     33 	.globl _SMS_waitForVBlank
                                     34 	.globl _SMS_setSpriteMode
                                     35 	.globl _SMS_setBGScrollY
                                     36 	.globl _SMS_setBGScrollX
                                     37 	.globl _SMS_VDPturnOffFeature
                                     38 	.globl _SMS_VDPturnOnFeature
                                     39 	.globl _SMS_init
                                     40 	.globl _printf
                                     41 	.globl _delay_frame_player
                                     42 	.globl _frame_player
                                     43 	.globl _player_y
                                     44 	.globl _player_v_x
                                     45 	.globl _player_x
                                     46 	.globl _SMS_SRAM
                                     47 	.globl _SRAM_bank_to_be_mapped_on_slot2
                                     48 	.globl _ROM_bank_to_be_mapped_on_slot0
                                     49 	.globl _ROM_bank_to_be_mapped_on_slot1
                                     50 	.globl _ROM_bank_to_be_mapped_on_slot2
                                     51 ;--------------------------------------------------------
                                     52 ; special function registers
                                     53 ;--------------------------------------------------------
                                     54 ;--------------------------------------------------------
                                     55 ; ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area _DATA
                           00FFFF    58 _ROM_bank_to_be_mapped_on_slot2	=	0xffff
                           00FFFE    59 _ROM_bank_to_be_mapped_on_slot1	=	0xfffe
                           00FFFD    60 _ROM_bank_to_be_mapped_on_slot0	=	0xfffd
                           00FFFC    61 _SRAM_bank_to_be_mapped_on_slot2	=	0xfffc
                           008000    62 _SMS_SRAM	=	0x8000
                                     63 ;--------------------------------------------------------
                                     64 ; ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area _INITIALIZED
      000000                         67 _player_x::
      000000                         68 	.ds 2
      000002                         69 _player_v_x::
      000002                         70 	.ds 2
      000004                         71 _player_y::
      000004                         72 	.ds 2
      000006                         73 _frame_player::
      000006                         74 	.ds 2
      000008                         75 _delay_frame_player::
      000008                         76 	.ds 2
                                     77 ;--------------------------------------------------------
                                     78 ; absolute external ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area _DABS (ABS)
                                     81 ;--------------------------------------------------------
                                     82 ; global & static initialisations
                                     83 ;--------------------------------------------------------
                                     84 	.area _HOME
                                     85 	.area _GSINIT
                                     86 	.area _GSFINAL
                                     87 	.area _GSINIT
                                     88 ;--------------------------------------------------------
                                     89 ; Home
                                     90 ;--------------------------------------------------------
                                     91 	.area _HOME
                                     92 	.area _HOME
                                     93 ;--------------------------------------------------------
                                     94 ; code
                                     95 ;--------------------------------------------------------
                                     96 	.area _CODE
                                     97 ;main.c:10: void init(){
                                     98 ;	---------------------------------
                                     99 ; Function init
                                    100 ; ---------------------------------
      000000                        101 _init::
                                    102 ;main.c:11: SMS_init();
                                    103 ;main.c:12: }
      000000 C3r00r00         [10]  104 	jp	_SMS_init
                                    105 ;main.c:14: void loadGrapVRAM(){
                                    106 ;	---------------------------------
                                    107 ; Function loadGrapVRAM
                                    108 ; ---------------------------------
      000003                        109 _loadGrapVRAM::
                                    110 ;main.c:15: SMS_init();
      000003 CDr00r00         [17]  111 	call	_SMS_init
                                    112 ;main.c:17: SMS_setSpriteMode(SPRITEMODE_TALL);
      000006 2E 01            [ 7]  113 	ld	l, #0x01
                                    114 ;	spillPairReg hl
                                    115 ;	spillPairReg hl
      000008 CDr00r00         [17]  116 	call	_SMS_setSpriteMode
                                    117 ;main.c:18: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      00000B 21 20 00         [10]  118 	ld	hl, #0x0020
      00000E CDr00r00         [17]  119 	call	_SMS_VDPturnOnFeature
                                    120 ;main.c:19: SMS_displayOn();
      000011 21 40 01         [10]  121 	ld	hl, #0x0140
      000014 CDr00r00         [17]  122 	call	_SMS_VDPturnOnFeature
                                    123 ;main.c:20: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      000017 21 20 00         [10]  124 	ld	hl, #0x0020
      00001A CDr00r00         [17]  125 	call	_SMS_VDPturnOnFeature
                                    126 ;main.c:21: SMS_loadBGPalette(sonicpalette_inc);
      00001D 21r00r00         [10]  127 	ld	hl, #_sonicpalette_inc
      000020 CDr00r00         [17]  128 	call	_SMS_loadBGPalette
                                    129 ;main.c:23: SMS_loadSpritePalette(palleteAlex_inc);
      000023 21r00r00         [10]  130 	ld	hl, #_palleteAlex_inc
      000026 CDr00r00         [17]  131 	call	_SMS_loadSpritePalette
                                    132 ;main.c:24: SMS_loadTiles(sonictiles_inc,0,sonictiles_inc_size);
      000029 21 C0 14         [10]  133 	ld	hl, #0x14c0
      00002C E5               [11]  134 	push	hl
      00002D 11r00r00         [10]  135 	ld	de, #_sonictiles_inc
      000030 21 00 40         [10]  136 	ld	hl, #0x4000
      000033 CDr00r00         [17]  137 	call	_SMS_VRAMmemcpy
                                    138 ;main.c:26: SMS_loadTiles(spriteAlex_inc,256/*SPRITE_TILES_POSITION*/,spriteAlex_inc_size);
      000036 21 00 04         [10]  139 	ld	hl, #0x0400
      000039 E5               [11]  140 	push	hl
      00003A 11r00r00         [10]  141 	ld	de, #_spriteAlex_inc
      00003D 26 60            [ 7]  142 	ld	h, #0x60
      00003F CDr00r00         [17]  143 	call	_SMS_VRAMmemcpy
                                    144 ;main.c:27: SMS_loadTileMap(0,0,sonictilemap_inc,sonictilemap_inc_size);
      000042 21 00 06         [10]  145 	ld	hl, #0x0600
      000045 E5               [11]  146 	push	hl
      000046 11r00r00         [10]  147 	ld	de, #_sonictilemap_inc
      000049 26 78            [ 7]  148 	ld	h, #0x78
      00004B CDr00r00         [17]  149 	call	_SMS_VRAMmemcpy
                                    150 ;main.c:28: }
      00004E C9               [10]  151 	ret
                                    152 ;main.c:36: draw_main_character(){
                                    153 ;	---------------------------------
                                    154 ; Function draw_main_character
                                    155 ; ---------------------------------
      00004F                        156 _draw_main_character::
      00004F DD E5            [15]  157 	push	ix
      000051 DD 21 00 00      [14]  158 	ld	ix,#0
      000055 DD 39            [15]  159 	add	ix,sp
      000057 F5               [11]  160 	push	af
      000058 F5               [11]  161 	push	af
                                    162 ;main.c:41: for(j=0;j<2;j++) {
      000059 DD 36 FE 00      [19]  163 	ld	-2 (ix), #0x00
                                    164 ;main.c:42: for(i=0;i<2;i++) {
      00005D                        165 00112$:
      00005D DD 36 FF 00      [19]  166 	ld	-1 (ix), #0x00
      000061                        167 00104$:
                                    168 ;main.c:44: SMS_addSprite(player_x+(i<<3),player_y+(j<<4)+numSprites*30, 8*frame_player + 4*j + i*2 );  
      000061 DD 7E FF         [19]  169 	ld	a, -1 (ix)
      000064 DD 77 FC         [19]  170 	ld	-4 (ix), a
      000067 DD 36 FD 00      [19]  171 	ld	-3 (ix), #0x00
      00006B E1               [10]  172 	pop	hl
      00006C E5               [11]  173 	push	hl
      00006D 29               [11]  174 	add	hl, hl
      00006E 29               [11]  175 	add	hl, hl
      00006F 29               [11]  176 	add	hl, hl
      000070 EB               [ 4]  177 	ex	de,hl
      000071 2Ar00r00         [16]  178 	ld	hl, (_player_x)
      000074 19               [11]  179 	add	hl, de
      000075 FD E5            [15]  180 	push	iy
      000077 DD 75 FB         [19]  181 	ld	-5 (ix), l
      00007A E3               [19]  182 	ex	(sp), hl
      00007B 2E 00            [ 7]  183 	ld	l, #0x00
                                    184 ;	spillPairReg hl
                                    185 ;	spillPairReg hl
      00007D E3               [19]  186 	ex	(sp), hl
      00007E FD E1            [14]  187 	pop	iy
      000080 2Ar06r00         [16]  188 	ld	hl, (_frame_player)
      000083 29               [11]  189 	add	hl, hl
      000084 29               [11]  190 	add	hl, hl
      000085 29               [11]  191 	add	hl, hl
      000086 DD 5E FE         [19]  192 	ld	e, -2 (ix)
      000089 16 00            [ 7]  193 	ld	d, #0x00
      00008B 7B               [ 4]  194 	ld	a, e
      00008C 42               [ 4]  195 	ld	b, d
      00008D 87               [ 4]  196 	add	a, a
      00008E CB 10            [ 8]  197 	rl	b
      000090 87               [ 4]  198 	add	a, a
      000091 CB 10            [ 8]  199 	rl	b
      000093 85               [ 4]  200 	add	a, l
      000094 4F               [ 4]  201 	ld	c, a
      000095 78               [ 4]  202 	ld	a, b
      000096 8C               [ 4]  203 	adc	a, h
      000097 47               [ 4]  204 	ld	b, a
      000098 E1               [10]  205 	pop	hl
      000099 E5               [11]  206 	push	hl
      00009A 29               [11]  207 	add	hl, hl
      00009B 09               [11]  208 	add	hl, bc
      00009C 26 00            [ 7]  209 	ld	h, #0x00
                                    210 ;	spillPairReg hl
                                    211 ;	spillPairReg hl
      00009E FD E5            [15]  212 	push	iy
      0000A0 DD 75 FA         [19]  213 	ld	-6 (ix), l
      0000A3 FD E1            [14]  214 	pop	iy
      0000A5 EB               [ 4]  215 	ex	de, hl
      0000A6 29               [11]  216 	add	hl, hl
      0000A7 29               [11]  217 	add	hl, hl
      0000A8 29               [11]  218 	add	hl, hl
      0000A9 29               [11]  219 	add	hl, hl
      0000AA EB               [ 4]  220 	ex	de, hl
      0000AB 2Ar04r00         [16]  221 	ld	hl, (_player_y)
      0000AE 19               [11]  222 	add	hl, de
      0000AF FD E5            [15]  223 	push	iy
      0000B1 D1               [10]  224 	pop	de
      0000B2 CDr00r00         [17]  225 	call	_SMS_addSprite_f
                                    226 ;main.c:42: for(i=0;i<2;i++) {
      0000B5 DD 34 FF         [23]  227 	inc	-1 (ix)
      0000B8 DD 7E FF         [19]  228 	ld	a, -1 (ix)
      0000BB D6 02            [ 7]  229 	sub	a, #0x02
      0000BD 38 A2            [12]  230 	jr	C, 00104$
                                    231 ;main.c:41: for(j=0;j<2;j++) {
      0000BF DD 34 FE         [23]  232 	inc	-2 (ix)
      0000C2 DD 7E FE         [19]  233 	ld	a, -2 (ix)
      0000C5 D6 02            [ 7]  234 	sub	a, #0x02
      0000C7 38 94            [12]  235 	jr	C, 00112$
                                    236 ;main.c:40: for(numSprites=0;numSprites<1;numSprites++){
                                    237 ;main.c:52: }
      0000C9 DD F9            [10]  238 	ld	sp, ix
      0000CB DD E1            [14]  239 	pop	ix
      0000CD C9               [10]  240 	ret
                                    241 ;main.c:54: void main(void)
                                    242 ;	---------------------------------
                                    243 ; Function main
                                    244 ; ---------------------------------
      0000CE                        245 _main::
      0000CE DD E5            [15]  246 	push	ix
      0000D0 DD 21 00 00      [14]  247 	ld	ix,#0
      0000D4 DD 39            [15]  248 	add	ix,sp
      0000D6 F5               [11]  249 	push	af
                                    250 ;main.c:59: SMS_VRAMmemsetW(0, 0x0000, 16384);
      0000D7 DD 36 FF 00      [19]  251 	ld	-1 (ix), #0x00
      0000DB DD 36 FE 00      [19]  252 	ld	-2 (ix), #0x00
      0000DF 21 00 40         [10]  253 	ld	hl, #0x4000
      0000E2 E5               [11]  254 	push	hl
      0000E3 11 00 00         [10]  255 	ld	de, #0x0000
      0000E6 65               [ 4]  256 	ld	h, l
      0000E7 CDr00r00         [17]  257 	call	_SMS_VRAMmemsetW
                                    258 ;main.c:69: printf("Hello, World! [1/3]");
      0000EA 21rECr01         [10]  259 	ld	hl, #___str_0
      0000ED E5               [11]  260 	push	hl
      0000EE CDr00r00         [17]  261 	call	_printf
      0000F1 F1               [10]  262 	pop	af
                                    263 ;main.c:80: loadGrapVRAM();
      0000F2 CDr03r00         [17]  264 	call	_loadGrapVRAM
                                    265 ;main.c:82: SMS_displayOn();
      0000F5 21 40 01         [10]  266 	ld	hl, #0x0140
      0000F8 CDr00r00         [17]  267 	call	_SMS_VDPturnOnFeature
                                    268 ;main.c:83: SMS_setBGScrollX(scroll_x);
      0000FB 2E 00            [ 7]  269 	ld	l, #0x00
                                    270 ;	spillPairReg hl
                                    271 ;	spillPairReg hl
      0000FD CDr00r00         [17]  272 	call	_SMS_setBGScrollX
                                    273 ;main.c:84: SMS_setBGScrollY(scroll_y);
      000100 2E 00            [ 7]  274 	ld	l, #0x00
                                    275 ;	spillPairReg hl
                                    276 ;	spillPairReg hl
      000102 CDr00r00         [17]  277 	call	_SMS_setBGScrollY
                                    278 ;main.c:85: SMS_init();
      000105 CDr00r00         [17]  279 	call	_SMS_init
                                    280 ;main.c:91: PSGPlay(titulo_psg);
      000108 21r00r00         [10]  281 	ld	hl, #_titulo_psg
      00010B CDr00r00         [17]  282 	call	_PSGPlay
                                    283 ;main.c:92: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      00010E 21 20 00         [10]  284 	ld	hl, #0x0020
      000111 CDr00r00         [17]  285 	call	_SMS_VDPturnOnFeature
      000114                        286 00124$:
                                    287 ;main.c:94: if(SMS_queryPauseRequested ()){
      000114 CDr00r00         [17]  288 	call	_SMS_queryPauseRequested
      000117 CB 47            [ 8]  289 	bit	0,a
      000119 28 15            [12]  290 	jr	Z, 00105$
                                    291 ;main.c:95: SMS_resetPauseRequest ();
      00011B CDr00r00         [17]  292 	call	_SMS_resetPauseRequest
                                    293 ;main.c:96: while(!SMS_queryPauseRequested ()){
      00011E                        294 00101$:
      00011E CDr00r00         [17]  295 	call	_SMS_queryPauseRequested
      000121 CB 47            [ 8]  296 	bit	0,a
      000123 20 08            [12]  297 	jr	NZ, 00103$
                                    298 ;main.c:97: SMS_waitForVBlank();
      000125 CDr00r00         [17]  299 	call	_SMS_waitForVBlank
                                    300 ;main.c:98: PSGFrame();
      000128 CDr00r00         [17]  301 	call	_PSGFrame
      00012B 18 F1            [12]  302 	jr	00101$
      00012D                        303 00103$:
                                    304 ;main.c:100: SMS_resetPauseRequest();
      00012D CDr00r00         [17]  305 	call	_SMS_resetPauseRequest
      000130                        306 00105$:
                                    307 ;main.c:104: int keys = SMS_getKeysHeld();
      000130 CDr00r00         [17]  308 	call	_SMS_getKeysHeld
                                    309 ;main.c:105: if(keys & PORT_A_KEY_LEFT){
      000133 CB 53            [ 8]  310 	bit	2, e
      000135 28 08            [12]  311 	jr	Z, 00110$
                                    312 ;main.c:106: player_v_x=-1; 
      000137 21 FF FF         [10]  313 	ld	hl, #0xffff
      00013A 22r02r00         [16]  314 	ld	(_player_v_x), hl
      00013D 18 12            [12]  315 	jr	00111$
      00013F                        316 00110$:
                                    317 ;main.c:108: else if(keys & PORT_A_KEY_RIGHT){
      00013F CB 5B            [ 8]  318 	bit	3, e
      000141 28 08            [12]  319 	jr	Z, 00107$
                                    320 ;main.c:109: player_v_x=1; 
      000143 21 01 00         [10]  321 	ld	hl, #0x0001
      000146 22r02r00         [16]  322 	ld	(_player_v_x), hl
      000149 18 06            [12]  323 	jr	00111$
      00014B                        324 00107$:
                                    325 ;main.c:112: player_v_x=0; 
      00014B 21 00 00         [10]  326 	ld	hl, #0x0000
      00014E 22r02r00         [16]  327 	ld	(_player_v_x), hl
      000151                        328 00111$:
                                    329 ;main.c:114: player_x = player_x + player_v_x;
      000151 21r02r00         [10]  330 	ld	hl, #_player_v_x
      000154 D5               [11]  331 	push	de
      000155 11r00r00         [10]  332 	ld	de, #_player_x
      000158 1A               [ 7]  333 	ld	a, (de)
      000159 86               [ 7]  334 	add	a, (hl)
      00015A 23               [ 6]  335 	inc	hl
      00015B 12               [ 7]  336 	ld	(de), a
      00015C 13               [ 6]  337 	inc	de
      00015D 1A               [ 7]  338 	ld	a, (de)
      00015E 8E               [ 7]  339 	adc	a, (hl)
      00015F 12               [ 7]  340 	ld	(de), a
      000160 D1               [10]  341 	pop	de
                                    342 ;main.c:115: if(player_v_x != 0)
      000161 3Ar03r00         [13]  343 	ld	a, (_player_v_x+1)
      000164 21r02r00         [10]  344 	ld	hl, #_player_v_x
      000167 B6               [ 7]  345 	or	a, (hl)
      000168 28 09            [12]  346 	jr	Z, 00113$
                                    347 ;main.c:116: delay_frame_player++;
      00016A 2Ar08r00         [16]  348 	ld	hl, (_delay_frame_player)
      00016D 23               [ 6]  349 	inc	hl
      00016E 22r08r00         [16]  350 	ld	(_delay_frame_player), hl
      000171 18 0B            [12]  351 	jr	00114$
      000173                        352 00113$:
                                    353 ;main.c:118: delay_frame_player=15;
      000173 21 0F 00         [10]  354 	ld	hl, #0x000f
      000176 22r08r00         [16]  355 	ld	(_delay_frame_player), hl
                                    356 ;main.c:119: frame_player=1;
      000179 2E 01            [ 7]  357 	ld	l, #0x01
      00017B 22r06r00         [16]  358 	ld	(_frame_player), hl
      00017E                        359 00114$:
                                    360 ;main.c:121: if(delay_frame_player%16==0){
      00017E 11 10 00         [10]  361 	ld	de, #0x0010
      000181 2Ar08r00         [16]  362 	ld	hl, (_delay_frame_player)
      000184 CDr00r00         [17]  363 	call	__modsint
      000187 7A               [ 4]  364 	ld	a, d
      000188 B3               [ 4]  365 	or	a, e
      000189 20 23            [12]  366 	jr	NZ, 00118$
                                    367 ;main.c:122: frame_player++;
      00018B 2Ar06r00         [16]  368 	ld	hl, (_frame_player)
      00018E 23               [ 6]  369 	inc	hl
      00018F 22r06r00         [16]  370 	ld	(_frame_player), hl
                                    371 ;main.c:123: if(frame_player>3){
      000192 3E 03            [ 7]  372 	ld	a, #0x03
      000194 FD 21r06r00      [14]  373 	ld	iy, #_frame_player
      000198 FD BE 00         [19]  374 	cp	a, 0 (iy)
      00019B 3E 00            [ 7]  375 	ld	a, #0x00
      00019D FD 9E 01         [19]  376 	sbc	a, 1 (iy)
      0001A0 E2rA5r01         [10]  377 	jp	PO, 00207$
      0001A3 EE 80            [ 7]  378 	xor	a, #0x80
      0001A5                        379 00207$:
      0001A5 F2rAEr01         [10]  380 	jp	P, 00118$
                                    381 ;main.c:124: frame_player=0;
      0001A8 21 00 00         [10]  382 	ld	hl, #0x0000
      0001AB 22r06r00         [16]  383 	ld	(_frame_player), hl
      0001AE                        384 00118$:
                                    385 ;main.c:128: SMS_initSprites();
      0001AE CDr00r00         [17]  386 	call	_SMS_initSprites
                                    387 ;main.c:129: draw_main_character();
      0001B1 CDr4Fr00         [17]  388 	call	_draw_main_character
                                    389 ;main.c:130: SMS_finalizeSprites();
      0001B4 CDr00r00         [17]  390 	call	_SMS_finalizeSprites
                                    391 ;main.c:131: SMS_waitForVBlank();
      0001B7 CDr00r00         [17]  392 	call	_SMS_waitForVBlank
                                    393 ;main.c:132: SMS_copySpritestoSAT();
      0001BA CDr00r00         [17]  394 	call	_SMS_copySpritestoSAT
                                    395 ;main.c:133: PSGFrame();
      0001BD CDr00r00         [17]  396 	call	_PSGFrame
                                    397 ;main.c:134: SMS_displayOff();
      0001C0 21 40 01         [10]  398 	ld	hl, #0x0140
      0001C3 CDr00r00         [17]  399 	call	_SMS_VDPturnOffFeature
                                    400 ;main.c:135: if(scroll_y%2==0)
      0001C6 DD CB FF 46      [20]  401 	bit	0, -1 (ix)
      0001CA 20 03            [12]  402 	jr	NZ, 00120$
                                    403 ;main.c:136: scroll_x += 1;
      0001CC DD 34 FE         [23]  404 	inc	-2 (ix)
      0001CF                        405 00120$:
                                    406 ;main.c:137: scroll_y++;
      0001CF DD 34 FF         [23]  407 	inc	-1 (ix)
                                    408 ;main.c:138: if(scroll_y==224)
      0001D2 DD 7E FF         [19]  409 	ld	a, -1 (ix)
      0001D5 D6 E0            [ 7]  410 	sub	a, #0xe0
      0001D7 20 04            [12]  411 	jr	NZ, 00122$
                                    412 ;main.c:139: scroll_y=0;
      0001D9 DD 36 FF 00      [19]  413 	ld	-1 (ix), #0x00
      0001DD                        414 00122$:
                                    415 ;main.c:141: SMS_setBGScrollX(scroll_x);
      0001DD DD 6E FE         [19]  416 	ld	l, -2 (ix)
                                    417 ;	spillPairReg hl
                                    418 ;	spillPairReg hl
      0001E0 CDr00r00         [17]  419 	call	_SMS_setBGScrollX
                                    420 ;main.c:143: SMS_displayOn();
      0001E3 21 40 01         [10]  421 	ld	hl, #0x0140
      0001E6 CDr00r00         [17]  422 	call	_SMS_VDPturnOnFeature
                                    423 ;main.c:145: }
      0001E9 C3r14r01         [10]  424 	jp	00124$
      0001EC                        425 ___str_0:
      0001EC 48 65 6C 6C 6F 2C 20   426 	.ascii "Hello, World! [1/3]"
             57 6F 72 6C 64 21 20
             5B 31 2F 33 5D
      0001FF 00                     427 	.db 0x00
                                    428 	.area _CODE
      000200                        429 __str_1:
      000200 72 61 70 68 6E 65 74   430 	.ascii "raphnet"
      000207 00                     431 	.db 0x00
      000208                        432 __str_2:
      000208 62 61 73 69 63 20 65   433 	.ascii "basic example"
             78 61 6D 70 6C 65
      000215 00                     434 	.db 0x00
      000216                        435 __str_3:
      000216 41 20 73 69 6D 70 6C   436 	.ascii "A simple example"
             65 20 65 78 61 6D 70
             6C 65
      000226 00                     437 	.db 0x00
                                    438 	.area _INITIALIZER
      000000                        439 __xinit__player_x:
      000000 32 00                  440 	.dw #0x0032
      000002                        441 __xinit__player_v_x:
      000002 00 00                  442 	.dw #0x0000
      000004                        443 __xinit__player_y:
      000004 32 00                  444 	.dw #0x0032
      000006                        445 __xinit__frame_player:
      000006 00 00                  446 	.dw #0x0000
      000008                        447 __xinit__delay_frame_player:
      000008 0F 00                  448 	.dw #0x000f
                                    449 	.area _CABS (ABS)
      007FF0                        450 	.org 0x7FF0
      007FF0                        451 ___SMS__SEGA_signature:
      007FF0 54                     452 	.db #0x54	; 84	'T'
      007FF1 4D                     453 	.db #0x4d	; 77	'M'
      007FF2 52                     454 	.db #0x52	; 82	'R'
      007FF3 20                     455 	.db #0x20	; 32
      007FF4 53                     456 	.db #0x53	; 83	'S'
      007FF5 45                     457 	.db #0x45	; 69	'E'
      007FF6 47                     458 	.db #0x47	; 71	'G'
      007FF7 41                     459 	.db #0x41	; 65	'A'
      007FF8 FF                     460 	.db #0xff	; 255
      007FF9 FF                     461 	.db #0xff	; 255
      007FFA FF                     462 	.db #0xff	; 255
      007FFB FF                     463 	.db #0xff	; 255
      007FFC 99                     464 	.db #0x99	; 153
      007FFD 99                     465 	.db #0x99	; 153
      007FFE 00                     466 	.db #0x00	; 0
      007FFF 4C                     467 	.db #0x4c	; 76	'L'
      007FD8                        468 	.org 0x7FD8
      007FD8                        469 ___SMS__SDSC_author:
      007FD8 72 61 70 68 6E 65 74   470 	.ascii "raphnet"
      007FDF 00                     471 	.db 0x00
      007FCA                        472 	.org 0x7FCA
      007FCA                        473 ___SMS__SDSC_name:
      007FCA 62 61 73 69 63 20 65   474 	.ascii "basic example"
             78 61 6D 70 6C 65
      007FD7 00                     475 	.db 0x00
      007FB9                        476 	.org 0x7FB9
      007FB9                        477 ___SMS__SDSC_descr:
      007FB9 41 20 73 69 6D 70 6C   478 	.ascii "A simple example"
             65 20 65 78 61 6D 70
             6C 65
      007FC9 00                     479 	.db 0x00
      007FE0                        480 	.org 0x7FE0
      007FE0                        481 ___SMS__SDSC_signature:
      007FE0 53                     482 	.db #0x53	; 83	'S'
      007FE1 44                     483 	.db #0x44	; 68	'D'
      007FE2 53                     484 	.db #0x53	; 83	'S'
      007FE3 43                     485 	.db #0x43	; 67	'C'
      007FE4 01                     486 	.db #0x01	; 1
      007FE5 00                     487 	.db #0x00	; 0
      007FE6 00                     488 	.db #0x00	; 0
      007FE7 00                     489 	.db #0x00	; 0
      007FE8 00                     490 	.db #0x00	; 0
      007FE9 00                     491 	.db #0x00	; 0
      007FEA D8                     492 	.db #0xd8	; 216
      007FEB 7F                     493 	.db #0x7f	; 127
      007FEC CA                     494 	.db #0xca	; 202
      007FED 7F                     495 	.db #0x7f	; 127
      007FEE B9                     496 	.db #0xb9	; 185
      007FEF 7F                     497 	.db #0x7f	; 127
