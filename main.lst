                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14549 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___SMS__SDSC_signature
                                     12 	.globl ___SMS__SDSC_descr
                                     13 	.globl ___SMS__SDSC_name
                                     14 	.globl ___SMS__SDSC_author
                                     15 	.globl ___SMS__SEGA_signature
                                     16 	.globl _main
                                     17 	.globl _disableSprites
                                     18 	.globl _playMusic
                                     19 	.globl _dibujaPajaros
                                     20 	.globl _loadGrapVRAM
                                     21 	.globl _inicializaPajaros
                                     22 	.globl _moveAlex
                                     23 	.globl _moveAlexAire
                                     24 	.globl _moveAlexSuelo
                                     25 	.globl _canRight
                                     26 	.globl _canLeft
                                     27 	.globl _canDown
                                     28 	.globl _canUp
                                     29 	.globl _PSGSFXFrame
                                     30 	.globl _PSGFrame
                                     31 	.globl _PSGSFXPlay
                                     32 	.globl _PSGPlay
                                     33 	.globl _SMS_VRAMmemsetW
                                     34 	.globl _SMS_VRAMmemcpy
                                     35 	.globl _SMS_setFrameInterruptHandler
                                     36 	.globl _SMS_resetPauseRequest
                                     37 	.globl _SMS_queryPauseRequested
                                     38 	.globl _SMS_getKeysHeld
                                     39 	.globl _SMS_getKeysPressed
                                     40 	.globl _SMS_loadSpritePalette
                                     41 	.globl _SMS_loadBGPalette
                                     42 	.globl _SMS_copySpritestoSAT
                                     43 	.globl _SMS_updateSpritePosition
                                     44 	.globl _SMS_addSprite_f
                                     45 	.globl _SMS_initSprites
                                     46 	.globl _SMS_waitForVBlank
                                     47 	.globl _SMS_setSpriteMode
                                     48 	.globl _SMS_setBGScrollY
                                     49 	.globl _SMS_setBGScrollX
                                     50 	.globl _SMS_VDPturnOffFeature
                                     51 	.globl _SMS_VDPturnOnFeature
                                     52 	.globl _SMS_init
                                     53 	.globl _addHardwareSprite
                                     54 	.globl _generateSpriteNoRAM
                                     55 	.globl _printf
                                     56 	.globl _spritePuno
                                     57 	.globl _spritePajaro
                                     58 	.globl _spriteAlex
                                     59 	.globl _alex
                                     60 	.globl _maxSalto
                                     61 	.globl _nextVRAMsprites
                                     62 	.globl _numSprites
                                     63 	.globl _pajaros
                                     64 	.globl _SMS_SRAM
                                     65 	.globl _SRAM_bank_to_be_mapped_on_slot2
                                     66 	.globl _ROM_bank_to_be_mapped_on_slot0
                                     67 	.globl _ROM_bank_to_be_mapped_on_slot1
                                     68 	.globl _ROM_bank_to_be_mapped_on_slot2
                                     69 	.globl _SpriteNextFree2
                                     70 	.globl _SpriteTableXN2
                                     71 	.globl _SpriteTableY2
                                     72 	.globl _hardwareSprites
                                     73 	.globl _generateSprite
                                     74 	.globl _initSpritesVariables
                                     75 	.globl _draw_entidad
                                     76 ;--------------------------------------------------------
                                     77 ; special function registers
                                     78 ;--------------------------------------------------------
                                     79 ;--------------------------------------------------------
                                     80 ; ram data
                                     81 ;--------------------------------------------------------
                                     82 	.area _DATA
      000000                         83 _hardwareSprites::
      000000                         84 	.ds 768
      000300                         85 _SpriteTableY2::
      000300                         86 	.ds 2
      000302                         87 _SpriteTableXN2::
      000302                         88 	.ds 2
      000304                         89 _SpriteNextFree2::
      000304                         90 	.ds 2
                           00FFFF    91 _ROM_bank_to_be_mapped_on_slot2	=	0xffff
                           00FFFE    92 _ROM_bank_to_be_mapped_on_slot1	=	0xfffe
                           00FFFD    93 _ROM_bank_to_be_mapped_on_slot0	=	0xfffd
                           00FFFC    94 _SRAM_bank_to_be_mapped_on_slot2	=	0xfffc
                           008000    95 _SMS_SRAM	=	0x8000
      000306                         96 _pajaros::
      000306                         97 	.ds 60
      000342                         98 _numSprites::
      000342                         99 	.ds 2
                                    100 ;--------------------------------------------------------
                                    101 ; ram data
                                    102 ;--------------------------------------------------------
                                    103 	.area _INITIALIZED
      000000                        104 _nextVRAMsprites::
      000000                        105 	.ds 2
      000002                        106 _maxSalto::
      000002                        107 	.ds 1
      000003                        108 _alex::
      000003                        109 	.ds 6
      000009                        110 _spriteAlex::
      000009                        111 	.ds 10
      000013                        112 _spritePajaro::
      000013                        113 	.ds 10
      00001D                        114 _spritePuno::
      00001D                        115 	.ds 10
                                    116 ;--------------------------------------------------------
                                    117 ; absolute external ram data
                                    118 ;--------------------------------------------------------
                                    119 	.area _DABS (ABS)
                                    120 ;--------------------------------------------------------
                                    121 ; global & static initialisations
                                    122 ;--------------------------------------------------------
                                    123 	.area _HOME
                                    124 	.area _GSINIT
                                    125 	.area _GSFINAL
                                    126 	.area _GSINIT
                                    127 ;--------------------------------------------------------
                                    128 ; Home
                                    129 ;--------------------------------------------------------
                                    130 	.area _HOME
                                    131 	.area _HOME
                                    132 ;--------------------------------------------------------
                                    133 ; code
                                    134 ;--------------------------------------------------------
                                    135 	.area _CODE
                                    136 ;./lib/./sprite.c:20: T_sprite generateSprite(unsigned char ancho, unsigned char alto, int tam,const unsigned char data[]) {
                                    137 ;	---------------------------------
                                    138 ; Function generateSprite
                                    139 ; ---------------------------------
      000000                        140 _generateSprite::
      000000 DD E5            [15]  141 	push	ix
      000002 DD 21 00 00      [14]  142 	ld	ix,#0
      000006 DD 39            [15]  143 	add	ix,sp
      000008 FD 21 F6 FF      [14]  144 	ld	iy, #-10
      00000C FD 39            [15]  145 	add	iy, sp
      00000E FD F9            [10]  146 	ld	sp, iy
      000010 5F               [ 4]  147 	ld	e, a
      000011 55               [ 4]  148 	ld	d, l
                                    149 ;./lib/./sprite.c:21: unsigned char tamano = alto*ancho*2;
      000012 D5               [11]  150 	push	de
      000013 62               [ 4]  151 	ld	h, d
                                    152 ;	spillPairReg hl
                                    153 ;	spillPairReg hl
      000014 2E 00            [ 7]  154 	ld	l, #0x00
      000016 55               [ 4]  155 	ld	d, l
      000017 06 08            [ 7]  156 	ld	b, #0x08
      000019                        157 00103$:
      000019 29               [11]  158 	add	hl, hl
      00001A 30 01            [12]  159 	jr	NC, 00104$
      00001C 19               [11]  160 	add	hl, de
      00001D                        161 00104$:
      00001D 10 FA            [13]  162 	djnz	00103$
      00001F D1               [10]  163 	pop	de
      000020 4D               [ 4]  164 	ld	c, l
      000021 CB 21            [ 8]  165 	sla	c
                                    166 ;./lib/./sprite.c:22: T_sprite sprite = {alto,ancho,tamano,tam/(tamano*32),nextVRAMsprites, 1,0};
      000023 DD 72 F6         [19]  167 	ld	-10 (ix), d
      000026 DD 73 F7         [19]  168 	ld	-9 (ix), e
      000029 DD 71 F8         [19]  169 	ld	-8 (ix), c
      00002C 69               [ 4]  170 	ld	l, c
                                    171 ;	spillPairReg hl
                                    172 ;	spillPairReg hl
      00002D 26 00            [ 7]  173 	ld	h, #0x00
                                    174 ;	spillPairReg hl
                                    175 ;	spillPairReg hl
      00002F 29               [11]  176 	add	hl, hl
      000030 29               [11]  177 	add	hl, hl
      000031 29               [11]  178 	add	hl, hl
      000032 29               [11]  179 	add	hl, hl
      000033 29               [11]  180 	add	hl, hl
      000034 C5               [11]  181 	push	bc
      000035 EB               [ 4]  182 	ex	de, hl
      000036 DD 6E 06         [19]  183 	ld	l, 6 (ix)
                                    184 ;	spillPairReg hl
                                    185 ;	spillPairReg hl
      000039 DD 66 07         [19]  186 	ld	h, 7 (ix)
                                    187 ;	spillPairReg hl
                                    188 ;	spillPairReg hl
      00003C CDr00r00         [17]  189 	call	__divsint
      00003F C1               [10]  190 	pop	bc
      000040 DD 73 F9         [19]  191 	ld	-7 (ix), e
      000043 3Ar00r00         [13]  192 	ld	a, (_nextVRAMsprites+0)
      000046 DD 77 FA         [19]  193 	ld	-6 (ix), a
      000049 3Ar01r00         [13]  194 	ld	a, (_nextVRAMsprites+1)
      00004C DD 77 FB         [19]  195 	ld	-5 (ix), a
      00004F DD 36 FC 01      [19]  196 	ld	-4 (ix), #0x01
      000053 AF               [ 4]  197 	xor	a, a
      000054 DD 77 FD         [19]  198 	ld	-3 (ix), a
      000057 DD 77 FE         [19]  199 	ld	-2 (ix), a
      00005A DD 36 FF 00      [19]  200 	ld	-1 (ix), #0x00
                                    201 ;./lib/./sprite.c:23: SMS_loadTiles(data,nextVRAMsprites,tam);
      00005E DD 5E 08         [19]  202 	ld	e, 8 (ix)
      000061 DD 56 09         [19]  203 	ld	d, 9 (ix)
      000064 2Ar00r00         [16]  204 	ld	hl, (_nextVRAMsprites)
      000067 29               [11]  205 	add	hl, hl
      000068 29               [11]  206 	add	hl, hl
      000069 29               [11]  207 	add	hl, hl
      00006A 29               [11]  208 	add	hl, hl
      00006B 29               [11]  209 	add	hl, hl
      00006C CB F4            [ 8]  210 	set	6, h
      00006E C5               [11]  211 	push	bc
      00006F E5               [11]  212 	push	hl
      000070 DD 6E 06         [19]  213 	ld	l, 6 (ix)
                                    214 ;	spillPairReg hl
                                    215 ;	spillPairReg hl
      000073 DD 66 07         [19]  216 	ld	h, 7 (ix)
                                    217 ;	spillPairReg hl
                                    218 ;	spillPairReg hl
      000076 E3               [19]  219 	ex	(sp), hl
      000077 CDr00r00         [17]  220 	call	_SMS_VRAMmemcpy
      00007A C1               [10]  221 	pop	bc
                                    222 ;./lib/./sprite.c:24: nextVRAMsprites = nextVRAMsprites + (tamano*sprite.numFrames);
      00007B DD 5E F9         [19]  223 	ld	e, -7 (ix)
      00007E 61               [ 4]  224 	ld	h, c
                                    225 ;	spillPairReg hl
                                    226 ;	spillPairReg hl
      00007F 2E 00            [ 7]  227 	ld	l, #0x00
      000081 55               [ 4]  228 	ld	d, l
      000082 06 08            [ 7]  229 	ld	b, #0x08
      000084                        230 00105$:
      000084 29               [11]  231 	add	hl, hl
      000085 30 01            [12]  232 	jr	NC, 00106$
      000087 19               [11]  233 	add	hl, de
      000088                        234 00106$:
      000088 10 FA            [13]  235 	djnz	00105$
      00008A EB               [ 4]  236 	ex	de, hl
      00008B 21r00r00         [10]  237 	ld	hl, #_nextVRAMsprites
      00008E 7E               [ 7]  238 	ld	a, (hl)
      00008F 83               [ 4]  239 	add	a, e
      000090 77               [ 7]  240 	ld	(hl), a
      000091 23               [ 6]  241 	inc	hl
      000092 7E               [ 7]  242 	ld	a, (hl)
      000093 8A               [ 4]  243 	adc	a, d
      000094 77               [ 7]  244 	ld	(hl), a
                                    245 ;./lib/./sprite.c:25: return sprite;
      000095 21 0E 00         [10]  246 	ld	hl, #14
      000098 39               [11]  247 	add	hl, sp
      000099 5E               [ 7]  248 	ld	e, (hl)
      00009A 23               [ 6]  249 	inc	hl
      00009B 56               [ 7]  250 	ld	d, (hl)
      00009C 21 00 00         [10]  251 	ld	hl, #0
      00009F 39               [11]  252 	add	hl, sp
      0000A0 01 0A 00         [10]  253 	ld	bc, #10
      0000A3 ED B0            [21]  254 	ldir
                                    255 ;./lib/./sprite.c:26: }
      0000A5 DD F9            [10]  256 	ld	sp, ix
      0000A7 DD E1            [14]  257 	pop	ix
      0000A9 C9               [10]  258 	ret
                                    259 ;./lib/./sprite.c:29: T_sprite generateSpriteNoRAM(unsigned char ancho, unsigned char alto, int tam,const unsigned char data[]) {
                                    260 ;	---------------------------------
                                    261 ; Function generateSpriteNoRAM
                                    262 ; ---------------------------------
      0000AA                        263 _generateSpriteNoRAM::
      0000AA DD E5            [15]  264 	push	ix
      0000AC DD 21 00 00      [14]  265 	ld	ix,#0
      0000B0 DD 39            [15]  266 	add	ix,sp
      0000B2 FD 21 F4 FF      [14]  267 	ld	iy, #-12
      0000B6 FD 39            [15]  268 	add	iy, sp
      0000B8 FD F9            [10]  269 	ld	sp, iy
      0000BA 5F               [ 4]  270 	ld	e, a
      0000BB 55               [ 4]  271 	ld	d, l
                                    272 ;./lib/./sprite.c:30: unsigned char tamano = alto*ancho*2;
      0000BC D5               [11]  273 	push	de
      0000BD 62               [ 4]  274 	ld	h, d
                                    275 ;	spillPairReg hl
                                    276 ;	spillPairReg hl
      0000BE 2E 00            [ 7]  277 	ld	l, #0x00
      0000C0 55               [ 4]  278 	ld	d, l
      0000C1 06 08            [ 7]  279 	ld	b, #0x08
      0000C3                        280 00103$:
      0000C3 29               [11]  281 	add	hl, hl
      0000C4 30 01            [12]  282 	jr	NC, 00104$
      0000C6 19               [11]  283 	add	hl, de
      0000C7                        284 00104$:
      0000C7 10 FA            [13]  285 	djnz	00103$
      0000C9 D1               [10]  286 	pop	de
      0000CA 4D               [ 4]  287 	ld	c, l
      0000CB CB 21            [ 8]  288 	sla	c
                                    289 ;./lib/./sprite.c:31: T_sprite sprite = {alto,ancho,tamano,tam/(tamano*32),nextVRAMsprites, 0,0};
      0000CD DD 72 F4         [19]  290 	ld	-12 (ix), d
      0000D0 DD 73 F5         [19]  291 	ld	-11 (ix), e
      0000D3 DD 71 F6         [19]  292 	ld	-10 (ix), c
                                    293 ;	spillPairReg hl
                                    294 ;	spillPairReg hl
      0000D6 DD 71 FE         [19]  295 	ld	-2 (ix), c
      0000D9 DD 36 FF 00      [19]  296 	ld	-1 (ix), #0x00
      0000DD 69               [ 4]  297 	ld	l, c
      0000DE 26 00            [ 7]  298 	ld	h, #0x00
                                    299 ;	spillPairReg hl
                                    300 ;	spillPairReg hl
      0000E0 29               [11]  301 	add	hl, hl
      0000E1 29               [11]  302 	add	hl, hl
      0000E2 29               [11]  303 	add	hl, hl
      0000E3 29               [11]  304 	add	hl, hl
      0000E4 29               [11]  305 	add	hl, hl
      0000E5 EB               [ 4]  306 	ex	de,hl
      0000E6 D5               [11]  307 	push	de
      0000E7 DD 6E 06         [19]  308 	ld	l, 6 (ix)
                                    309 ;	spillPairReg hl
                                    310 ;	spillPairReg hl
      0000EA DD 66 07         [19]  311 	ld	h, 7 (ix)
                                    312 ;	spillPairReg hl
                                    313 ;	spillPairReg hl
      0000ED CDr00r00         [17]  314 	call	__divsint
      0000F0 EB               [ 4]  315 	ex	de, hl
      0000F1 D1               [10]  316 	pop	de
      0000F2 DD 75 F7         [19]  317 	ld	-9 (ix), l
      0000F5 3Ar00r00         [13]  318 	ld	a, (_nextVRAMsprites+0)
      0000F8 DD 77 F8         [19]  319 	ld	-8 (ix), a
      0000FB 3Ar01r00         [13]  320 	ld	a, (_nextVRAMsprites+1)
      0000FE DD 77 F9         [19]  321 	ld	-7 (ix), a
      000101 DD 36 FA 00      [19]  322 	ld	-6 (ix), #0x00
      000105 AF               [ 4]  323 	xor	a, a
      000106 DD 77 FB         [19]  324 	ld	-5 (ix), a
      000109 DD 77 FC         [19]  325 	ld	-4 (ix), a
      00010C DD 36 FD 00      [19]  326 	ld	-3 (ix), #0x00
                                    327 ;./lib/./sprite.c:32: sprite.data = data;
      000110 DD 7E 08         [19]  328 	ld	a, 8 (ix)
      000113 DD 77 FB         [19]  329 	ld	-5 (ix), a
      000116 DD 7E 09         [19]  330 	ld	a, 9 (ix)
      000119 DD 77 FC         [19]  331 	ld	-4 (ix), a
                                    332 ;./lib/./sprite.c:33: sprite.frameInVRAM = 0;
      00011C DD 36 FD 00      [19]  333 	ld	-3 (ix), #0x00
                                    334 ;./lib/./sprite.c:34: SMS_loadTiles(data,nextVRAMsprites,tamano*32);
      000120 DD 4E 08         [19]  335 	ld	c, 8 (ix)
      000123 DD 46 09         [19]  336 	ld	b, 9 (ix)
      000126 2Ar00r00         [16]  337 	ld	hl, (_nextVRAMsprites)
      000129 29               [11]  338 	add	hl, hl
      00012A 29               [11]  339 	add	hl, hl
      00012B 29               [11]  340 	add	hl, hl
      00012C 29               [11]  341 	add	hl, hl
      00012D 29               [11]  342 	add	hl, hl
      00012E CB F4            [ 8]  343 	set	6, h
      000130 D5               [11]  344 	push	de
      000131 59               [ 4]  345 	ld	e, c
      000132 50               [ 4]  346 	ld	d, b
      000133 CDr00r00         [17]  347 	call	_SMS_VRAMmemcpy
                                    348 ;./lib/./sprite.c:35: nextVRAMsprites = nextVRAMsprites + (tamano);
      000136 21r00r00         [10]  349 	ld	hl, #_nextVRAMsprites
      000139 7E               [ 7]  350 	ld	a, (hl)
      00013A DD 86 FE         [19]  351 	add	a, -2 (ix)
      00013D 77               [ 7]  352 	ld	(hl), a
      00013E 23               [ 6]  353 	inc	hl
      00013F 7E               [ 7]  354 	ld	a, (hl)
      000140 DD 8E FF         [19]  355 	adc	a, -1 (ix)
      000143 77               [ 7]  356 	ld	(hl), a
                                    357 ;./lib/./sprite.c:36: return sprite;
      000144 21 10 00         [10]  358 	ld	hl, #16
      000147 39               [11]  359 	add	hl, sp
      000148 5E               [ 7]  360 	ld	e, (hl)
      000149 23               [ 6]  361 	inc	hl
      00014A 56               [ 7]  362 	ld	d, (hl)
      00014B 21 00 00         [10]  363 	ld	hl, #0
      00014E 39               [11]  364 	add	hl, sp
      00014F 01 0A 00         [10]  365 	ld	bc, #10
      000152 ED B0            [21]  366 	ldir
                                    367 ;./lib/./sprite.c:37: }
      000154 DD F9            [10]  368 	ld	sp, ix
      000156 DD E1            [14]  369 	pop	ix
      000158 C9               [10]  370 	ret
                                    371 ;./lib/./sprite.c:48: unsigned int addHardwareSprite(unsigned int x,unsigned int y,unsigned int vx,unsigned int vy,unsigned int lx,
                                    372 ;	---------------------------------
                                    373 ; Function addHardwareSprite
                                    374 ; ---------------------------------
      000159                        375 _addHardwareSprite::
      000159 DD E5            [15]  376 	push	ix
      00015B DD 21 00 00      [14]  377 	ld	ix,#0
      00015F DD 39            [15]  378 	add	ix,sp
      000161 F5               [11]  379 	push	af
      000162 F5               [11]  380 	push	af
      000163 F5               [11]  381 	push	af
      000164 DD 75 FC         [19]  382 	ld	-4 (ix), l
      000167 DD 74 FD         [19]  383 	ld	-3 (ix), h
                                    384 ;./lib/./sprite.c:50: unsigned int i = MAX_HARDWARE_SPRITES;
      00016A 21 40 00         [10]  385 	ld	hl, #0x0040
      00016D E3               [19]  386 	ex	(sp), hl
                                    387 ;./lib/./sprite.c:51: while (i) {
      00016E 01 40 00         [10]  388 	ld	bc, #0x0040
      000171                        389 00105$:
      000171 78               [ 4]  390 	ld	a, b
      000172 B1               [ 4]  391 	or	a, c
      000173 CAr00r02         [10]  392 	jp	Z, 00114$
                                    393 ;./lib/./sprite.c:52: if (!hardwareSprites[i].len) {
      000176 69               [ 4]  394 	ld	l, c
      000177 60               [ 4]  395 	ld	h, b
      000178 29               [11]  396 	add	hl, hl
      000179 09               [11]  397 	add	hl, bc
      00017A 29               [11]  398 	add	hl, hl
      00017B 29               [11]  399 	add	hl, hl
      00017C FD 21r00r00      [14]  400 	ld	iy, #_hardwareSprites
      000180 C5               [11]  401 	push	bc
      000181 4D               [ 4]  402 	ld	c, l
      000182 44               [ 4]  403 	ld	b, h
      000183 FD 09            [15]  404 	add	iy, bc
      000185 C1               [10]  405 	pop	bc
      000186 FD E5            [15]  406 	push	iy
      000188 E1               [10]  407 	pop	hl
      000189 C5               [11]  408 	push	bc
      00018A 01 0B 00         [10]  409 	ld	bc, #0x000b
      00018D 09               [11]  410 	add	hl, bc
      00018E C1               [10]  411 	pop	bc
      00018F 7E               [ 7]  412 	ld	a, (hl)
      000190 2B               [ 6]  413 	dec	hl
      000191 6E               [ 7]  414 	ld	l, (hl)
                                    415 ;	spillPairReg hl
      000192 B5               [ 4]  416 	or	a, l
      000193 20 64            [12]  417 	jr	NZ, 00104$
                                    418 ;./lib/./sprite.c:53: T_HardwareSprite *p = &hardwareSprites[i]; 
      000195 FD E5            [15]  419 	push	iy
      000197 C1               [10]  420 	pop	bc
                                    421 ;./lib/./sprite.c:54: p->x = x;
      000198 21 04 00         [10]  422 	ld	hl, #0x0004
      00019B 09               [11]  423 	add	hl, bc
      00019C DD 7E FC         [19]  424 	ld	a, -4 (ix)
      00019F 77               [ 7]  425 	ld	(hl), a
      0001A0 23               [ 6]  426 	inc	hl
      0001A1 DD 7E FD         [19]  427 	ld	a, -3 (ix)
      0001A4 77               [ 7]  428 	ld	(hl), a
                                    429 ;./lib/./sprite.c:55: p->y = y;
      0001A5 21 06 00         [10]  430 	ld	hl, #0x0006
      0001A8 09               [11]  431 	add	hl, bc
      0001A9 73               [ 7]  432 	ld	(hl), e
      0001AA 23               [ 6]  433 	inc	hl
      0001AB 72               [ 7]  434 	ld	(hl), d
                                    435 ;./lib/./sprite.c:56: p->vx = vx;
      0001AC 69               [ 4]  436 	ld	l, c
      0001AD 60               [ 4]  437 	ld	h, b
      0001AE DD 7E 04         [19]  438 	ld	a, 4 (ix)
      0001B1 77               [ 7]  439 	ld	(hl), a
      0001B2 23               [ 6]  440 	inc	hl
      0001B3 DD 7E 05         [19]  441 	ld	a, 5 (ix)
      0001B6 77               [ 7]  442 	ld	(hl), a
                                    443 ;./lib/./sprite.c:57: p->vy = vy;
      0001B7 03               [ 6]  444 	inc	bc
      0001B8 03               [ 6]  445 	inc	bc
      0001B9 DD 7E 06         [19]  446 	ld	a, 6 (ix)
      0001BC 02               [ 7]  447 	ld	(bc), a
      0001BD 03               [ 6]  448 	inc	bc
      0001BE DD 7E 07         [19]  449 	ld	a, 7 (ix)
      0001C1 02               [ 7]  450 	ld	(bc), a
                                    451 ;./lib/./sprite.c:59: for (int ix=0;ix<lx;ix++) {
      0001C2 AF               [ 4]  452 	xor	a, a
      0001C3 DD 77 FE         [19]  453 	ld	-2 (ix), a
      0001C6 DD 77 FF         [19]  454 	ld	-1 (ix), a
      0001C9                        455 00112$:
      0001C9 DD 4E FE         [19]  456 	ld	c, -2 (ix)
      0001CC DD 46 FF         [19]  457 	ld	b, -1 (ix)
      0001CF 79               [ 4]  458 	ld	a, c
      0001D0 DD 96 08         [19]  459 	sub	a, 8 (ix)
      0001D3 78               [ 4]  460 	ld	a, b
      0001D4 DD 9E 09         [19]  461 	sbc	a, 9 (ix)
      0001D7 30 1C            [12]  462 	jr	NC, 00102$
                                    463 ;./lib/./sprite.c:60: for (int iy=0;iy<ly;iy++){
      0001D9 11 00 00         [10]  464 	ld	de, #0x0000
      0001DC                        465 00109$:
      0001DC 4B               [ 4]  466 	ld	c, e
      0001DD 42               [ 4]  467 	ld	b, d
      0001DE 79               [ 4]  468 	ld	a, c
      0001DF DD 96 0A         [19]  469 	sub	a, 10 (ix)
      0001E2 78               [ 4]  470 	ld	a, b
      0001E3 DD 9E 0B         [19]  471 	sbc	a, 11 (ix)
      0001E6 30 03            [12]  472 	jr	NC, 00113$
      0001E8 13               [ 6]  473 	inc	de
      0001E9 18 F1            [12]  474 	jr	00109$
      0001EB                        475 00113$:
                                    476 ;./lib/./sprite.c:59: for (int ix=0;ix<lx;ix++) {
      0001EB DD 34 FE         [23]  477 	inc	-2 (ix)
      0001EE 20 D9            [12]  478 	jr	NZ, 00112$
      0001F0 DD 34 FF         [23]  479 	inc	-1 (ix)
      0001F3 18 D4            [12]  480 	jr	00112$
      0001F5                        481 00102$:
                                    482 ;./lib/./sprite.c:64: return i;
      0001F5 D1               [10]  483 	pop	de
      0001F6 D5               [11]  484 	push	de
      0001F7 18 07            [12]  485 	jr	00114$
      0001F9                        486 00104$:
                                    487 ;./lib/./sprite.c:66: i--;
      0001F9 0B               [ 6]  488 	dec	bc
      0001FA 33               [ 6]  489 	inc	sp
      0001FB 33               [ 6]  490 	inc	sp
      0001FC C5               [11]  491 	push	bc
      0001FD C3r71r01         [10]  492 	jp	00105$
      000200                        493 00114$:
                                    494 ;./lib/./sprite.c:68: }
      000200 DD F9            [10]  495 	ld	sp, ix
      000202 DD E1            [14]  496 	pop	ix
      000204 E1               [10]  497 	pop	hl
      000205 F1               [10]  498 	pop	af
      000206 F1               [10]  499 	pop	af
      000207 F1               [10]  500 	pop	af
      000208 F1               [10]  501 	pop	af
      000209 F1               [10]  502 	pop	af
      00020A E9               [ 4]  503 	jp	(hl)
                                    504 ;./lib/./sprite.c:80: void initSpritesVariables (void) {
                                    505 ;	---------------------------------
                                    506 ; Function initSpritesVariables
                                    507 ; ---------------------------------
      00020B                        508 _initSpritesVariables::
                                    509 ;./lib/./sprite.c:82: while (i) {
      00020B 01 40 00         [10]  510 	ld	bc, #0x0040
      00020E                        511 00101$:
      00020E 78               [ 4]  512 	ld	a, b
      00020F B1               [ 4]  513 	or	a, c
      000210 28 15            [12]  514 	jr	Z, 00103$
                                    515 ;./lib/./sprite.c:83: hardwareSprites[i].len = 0;
      000212 69               [ 4]  516 	ld	l, c
      000213 60               [ 4]  517 	ld	h, b
      000214 29               [11]  518 	add	hl, hl
      000215 09               [11]  519 	add	hl, bc
      000216 29               [11]  520 	add	hl, hl
      000217 29               [11]  521 	add	hl, hl
      000218 11r00r00         [10]  522 	ld	de, #_hardwareSprites
      00021B 19               [11]  523 	add	hl, de
      00021C 11 0A 00         [10]  524 	ld	de, #0x000a
      00021F 19               [11]  525 	add	hl, de
      000220 AF               [ 4]  526 	xor	a, a
      000221 77               [ 7]  527 	ld	(hl), a
      000222 23               [ 6]  528 	inc	hl
      000223 77               [ 7]  529 	ld	(hl), a
                                    530 ;./lib/./sprite.c:84: i--;
      000224 0B               [ 6]  531 	dec	bc
      000225 18 E7            [12]  532 	jr	00101$
      000227                        533 00103$:
                                    534 ;./lib/./sprite.c:97: __endasm;
      000227 21r00r00         [10]  535 	ld	hl, #_SpriteNextFree
      00022A 22r04r03         [16]  536 	ld	(#_SpriteNextFree2), hl
      00022D 21r00r00         [10]  537 	ld	hl, #_SpriteTableY
      000230 22r00r03         [16]  538 	ld	(#_SpriteTableY2), hl
      000233 21r00r00         [10]  539 	ld	hl, #_SpriteTableXN
      000236 22r02r03         [16]  540 	ld	(#_SpriteTableXN2), hl
                                    541 ;./lib/./sprite.c:100: }
      000239 C9               [10]  542 	ret
                                    543 ;./lib/entities.c:10: unsigned int draw_entidad(T_entidad *entidad, T_sprite *sprite, unsigned int numSprites){
                                    544 ;	---------------------------------
                                    545 ; Function draw_entidad
                                    546 ; ---------------------------------
      00023A                        547 _draw_entidad::
      00023A DD E5            [15]  548 	push	ix
      00023C DD 21 00 00      [14]  549 	ld	ix,#0
      000240 DD 39            [15]  550 	add	ix,sp
      000242 FD 21 EF FF      [14]  551 	ld	iy, #-17
      000246 FD 39            [15]  552 	add	iy, sp
      000248 FD F9            [10]  553 	ld	sp, iy
      00024A DD 75 FC         [19]  554 	ld	-4 (ix), l
      00024D DD 74 FD         [19]  555 	ld	-3 (ix), h
                                    556 ;./lib/entities.c:12: if (sprite->allInRAM == 1){
      000250 DD 73 FA         [19]  557 	ld	-6 (ix), e
      000253 DD 72 FB         [19]  558 	ld	-5 (ix), d
      000256 4B               [ 4]  559 	ld	c, e
      000257 42               [ 4]  560 	ld	b, d
      000258 21 06 00         [10]  561 	ld	hl, #6
      00025B 09               [11]  562 	add	hl, bc
      00025C 4E               [ 7]  563 	ld	c, (hl)
                                    564 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      00025D DD 5E FA         [19]  565 	ld	e, -6 (ix)
      000260 DD 56 FB         [19]  566 	ld	d, -5 (ix)
      000263 DD 7E FC         [19]  567 	ld	a, -4 (ix)
      000266 C6 02            [ 7]  568 	add	a, #0x02
      000268 DD 77 F0         [19]  569 	ld	-16 (ix), a
      00026B DD 7E FD         [19]  570 	ld	a, -3 (ix)
      00026E CE 00            [ 7]  571 	adc	a, #0x00
      000270 DD 77 F1         [19]  572 	ld	-15 (ix), a
      000273 DD 7E FA         [19]  573 	ld	a, -6 (ix)
      000276 C6 04            [ 7]  574 	add	a, #0x04
      000278 DD 77 F2         [19]  575 	ld	-14 (ix), a
      00027B DD 7E FB         [19]  576 	ld	a, -5 (ix)
      00027E CE 00            [ 7]  577 	adc	a, #0x00
      000280 DD 77 F3         [19]  578 	ld	-13 (ix), a
                                    579 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      000283 DD 7E FC         [19]  580 	ld	a, -4 (ix)
      000286 C6 01            [ 7]  581 	add	a, #0x01
      000288 DD 77 F8         [19]  582 	ld	-8 (ix), a
      00028B DD 7E FD         [19]  583 	ld	a, -3 (ix)
      00028E CE 00            [ 7]  584 	adc	a, #0x00
      000290 DD 77 F9         [19]  585 	ld	-7 (ix), a
      000293 DD 7E FA         [19]  586 	ld	a, -6 (ix)
      000296 C6 01            [ 7]  587 	add	a, #0x01
      000298 DD 77 FE         [19]  588 	ld	-2 (ix), a
      00029B DD 7E FB         [19]  589 	ld	a, -5 (ix)
      00029E CE 00            [ 7]  590 	adc	a, #0x00
      0002A0 DD 77 FF         [19]  591 	ld	-1 (ix), a
                                    592 ;./lib/entities.c:23: int frame = sprite->tamano*entidad->frame*32;
      0002A3 DD 6E F0         [19]  593 	ld	l, -16 (ix)
      0002A6 DD 66 F1         [19]  594 	ld	h, -15 (ix)
      0002A9 7E               [ 7]  595 	ld	a, (hl)
      0002AA DD 77 F4         [19]  596 	ld	-12 (ix), a
                                    597 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      0002AD 13               [ 6]  598 	inc	de
      0002AE 13               [ 6]  599 	inc	de
      0002AF 1A               [ 7]  600 	ld	a, (de)
      0002B0 DD 77 F5         [19]  601 	ld	-11 (ix), a
                                    602 ;./lib/entities.c:12: if (sprite->allInRAM == 1){
      0002B3 0D               [ 4]  603 	dec	c
      0002B4 C2r82r03         [10]  604 	jp	NZ,00108$
                                    605 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      0002B7 DD 5E F5         [19]  606 	ld	e, -11 (ix)
      0002BA DD 66 F4         [19]  607 	ld	h, -12 (ix)
                                    608 ;	spillPairReg hl
                                    609 ;	spillPairReg hl
      0002BD 2E 00            [ 7]  610 	ld	l, #0x00
      0002BF 55               [ 4]  611 	ld	d, l
      0002C0 06 08            [ 7]  612 	ld	b, #0x08
      0002C2                        613 00200$:
      0002C2 29               [11]  614 	add	hl, hl
      0002C3 30 01            [12]  615 	jr	NC, 00201$
      0002C5 19               [11]  616 	add	hl, de
      0002C6                        617 00201$:
      0002C6 10 FA            [13]  618 	djnz	00200$
      0002C8 4D               [ 4]  619 	ld	c, l
      0002C9 DD 6E F2         [19]  620 	ld	l, -14 (ix)
      0002CC DD 66 F3         [19]  621 	ld	h, -13 (ix)
      0002CF 7E               [ 7]  622 	ld	a, (hl)
      0002D0 81               [ 4]  623 	add	a, c
      0002D1 DD 77 EF         [19]  624 	ld	-17 (ix), a
                                    625 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      0002D4 DD 7E F8         [19]  626 	ld	a, -8 (ix)
      0002D7 DD 77 F0         [19]  627 	ld	-16 (ix), a
      0002DA DD 7E F9         [19]  628 	ld	a, -7 (ix)
      0002DD DD 77 F1         [19]  629 	ld	-15 (ix), a
      0002E0 DD 7E FE         [19]  630 	ld	a, -2 (ix)
      0002E3 DD 77 F2         [19]  631 	ld	-14 (ix), a
      0002E6 DD 7E FF         [19]  632 	ld	a, -1 (ix)
      0002E9 DD 77 F3         [19]  633 	ld	-13 (ix), a
      0002EC DD 36 FE 00      [19]  634 	ld	-2 (ix), #0x00
      0002F0                        635 00114$:
      0002F0 DD 6E FA         [19]  636 	ld	l, -6 (ix)
      0002F3 DD 66 FB         [19]  637 	ld	h, -5 (ix)
      0002F6 4E               [ 7]  638 	ld	c, (hl)
      0002F7 DD 7E FE         [19]  639 	ld	a, -2 (ix)
      0002FA 91               [ 4]  640 	sub	a, c
      0002FB D2r77r04         [10]  641 	jp	NC, 00109$
                                    642 ;./lib/entities.c:15: unsigned char desplazado = (j<<2);
      0002FE DD 7E FE         [19]  643 	ld	a, -2 (ix)
      000301 87               [ 4]  644 	add	a, a
      000302 87               [ 4]  645 	add	a, a
                                    646 ;./lib/entities.c:16: unsigned char jCalculated = desplazado + frame, y = entidad->y+(desplazado<<2);
      000303 47               [ 4]  647 	ld	b, a
      000304 DD 86 EF         [19]  648 	add	a, -17 (ix)
      000307 DD 77 F4         [19]  649 	ld	-12 (ix), a
      00030A DD 6E F0         [19]  650 	ld	l, -16 (ix)
      00030D DD 66 F1         [19]  651 	ld	h, -15 (ix)
      000310 4E               [ 7]  652 	ld	c, (hl)
      000311 78               [ 4]  653 	ld	a, b
      000312 87               [ 4]  654 	add	a, a
      000313 87               [ 4]  655 	add	a, a
      000314 81               [ 4]  656 	add	a, c
      000315 DD 77 F5         [19]  657 	ld	-11 (ix), a
                                    658 ;./lib/entities.c:17: for(i=0;i<sprite->ancho;i++) {
      000318 DD 36 FF 00      [19]  659 	ld	-1 (ix), #0x00
      00031C                        660 00111$:
      00031C DD 6E F2         [19]  661 	ld	l, -14 (ix)
      00031F DD 66 F3         [19]  662 	ld	h, -13 (ix)
      000322 DD 7E FF         [19]  663 	ld	a,-1 (ix)
      000325 96               [ 7]  664 	sub	a,(hl)
      000326 30 54            [12]  665 	jr	NC, 00115$
                                    666 ;./lib/entities.c:18: numSprites = SMS_addSprite(entidad->x+(i<<3),y, jCalculated + (i<<1) );  
      000328 DD 6E FC         [19]  667 	ld	l, -4 (ix)
      00032B DD 66 FD         [19]  668 	ld	h, -3 (ix)
      00032E 7E               [ 7]  669 	ld	a, (hl)
      00032F DD 77 F9         [19]  670 	ld	-7 (ix), a
      000332 DD 77 F6         [19]  671 	ld	-10 (ix), a
      000335 DD 36 F7 00      [19]  672 	ld	-9 (ix), #0x00
      000339 DD 7E FF         [19]  673 	ld	a, -1 (ix)
      00033C DD 77 F8         [19]  674 	ld	-8 (ix), a
      00033F DD 36 F9 00      [19]  675 	ld	-7 (ix), #0x00
      000343 6F               [ 4]  676 	ld	l, a
      000344 26 00            [ 7]  677 	ld	h, #0x00
      000346 29               [11]  678 	add	hl, hl
      000347 29               [11]  679 	add	hl, hl
      000348 29               [11]  680 	add	hl, hl
      000349 DD 5E F6         [19]  681 	ld	e, -10 (ix)
      00034C 16 00            [ 7]  682 	ld	d, #0x00
      00034E 19               [11]  683 	add	hl, de
      00034F 45               [ 4]  684 	ld	b, l
      000350 0E 00            [ 7]  685 	ld	c, #0x00
      000352 DD 5E F4         [19]  686 	ld	e, -12 (ix)
      000355 16 00            [ 7]  687 	ld	d, #0x00
      000357 DD 6E F8         [19]  688 	ld	l, -8 (ix)
      00035A DD 66 F9         [19]  689 	ld	h, -7 (ix)
      00035D 29               [11]  690 	add	hl, hl
      00035E 19               [11]  691 	add	hl, de
      00035F 7D               [ 4]  692 	ld	a, l
      000360 16 00            [ 7]  693 	ld	d, #0x00
      000362 B1               [ 4]  694 	or	a, c
      000363 5F               [ 4]  695 	ld	e, a
      000364 7A               [ 4]  696 	ld	a, d
      000365 B0               [ 4]  697 	or	a, b
      000366 57               [ 4]  698 	ld	d, a
      000367 DD 6E F5         [19]  699 	ld	l, -11 (ix)
                                    700 ;	spillPairReg hl
                                    701 ;	spillPairReg hl
      00036A 26 00            [ 7]  702 	ld	h, #0x00
                                    703 ;	spillPairReg hl
                                    704 ;	spillPairReg hl
      00036C CDr00r00         [17]  705 	call	_SMS_addSprite_f
      00036F DD 77 04         [19]  706 	ld	4 (ix), a
      000372 07               [ 4]  707 	rlca
      000373 9F               [ 4]  708 	sbc	a, a
      000374 DD 77 05         [19]  709 	ld	5 (ix), a
                                    710 ;./lib/entities.c:17: for(i=0;i<sprite->ancho;i++) {
      000377 DD 34 FF         [23]  711 	inc	-1 (ix)
      00037A 18 A0            [12]  712 	jr	00111$
      00037C                        713 00115$:
                                    714 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      00037C DD 34 FE         [23]  715 	inc	-2 (ix)
      00037F C3rF0r02         [10]  716 	jp	00114$
      000382                        717 00108$:
                                    718 ;./lib/entities.c:23: int frame = sprite->tamano*entidad->frame*32;
      000382 DD 5E F4         [19]  719 	ld	e, -12 (ix)
      000385 DD 66 F5         [19]  720 	ld	h, -11 (ix)
                                    721 ;	spillPairReg hl
                                    722 ;	spillPairReg hl
      000388 2E 00            [ 7]  723 	ld	l, #0x00
      00038A 55               [ 4]  724 	ld	d, l
      00038B 06 08            [ 7]  725 	ld	b, #0x08
      00038D                        726 00202$:
      00038D 29               [11]  727 	add	hl, hl
      00038E 30 01            [12]  728 	jr	NC, 00203$
      000390 19               [11]  729 	add	hl, de
      000391                        730 00203$:
      000391 10 FA            [13]  731 	djnz	00202$
      000393 29               [11]  732 	add	hl, hl
      000394 29               [11]  733 	add	hl, hl
      000395 29               [11]  734 	add	hl, hl
      000396 29               [11]  735 	add	hl, hl
      000397 29               [11]  736 	add	hl, hl
      000398 DD 75 F6         [19]  737 	ld	-10 (ix), l
      00039B DD 74 F7         [19]  738 	ld	-9 (ix), h
                                    739 ;./lib/entities.c:24: if (entidad->frame != sprite->frameInVRAM){
      00039E DD 7E FA         [19]  740 	ld	a, -6 (ix)
      0003A1 C6 09            [ 7]  741 	add	a, #0x09
      0003A3 4F               [ 4]  742 	ld	c, a
      0003A4 DD 7E FB         [19]  743 	ld	a, -5 (ix)
      0003A7 CE 00            [ 7]  744 	adc	a, #0x00
      0003A9 47               [ 4]  745 	ld	b, a
      0003AA 0A               [ 7]  746 	ld	a, (bc)
      0003AB 5F               [ 4]  747 	ld	e, a
      0003AC DD 7E F4         [19]  748 	ld	a, -12 (ix)
      0003AF 93               [ 4]  749 	sub	a, e
      0003B0 28 42            [12]  750 	jr	Z, 00133$
                                    751 ;./lib/entities.c:25: SMS_loadTiles(sprite->data + frame,sprite->beginVRAM,sprite->tamano<<5);
      0003B2 DD 6E F5         [19]  752 	ld	l, -11 (ix)
                                    753 ;	spillPairReg hl
                                    754 ;	spillPairReg hl
      0003B5 26 00            [ 7]  755 	ld	h, #0x00
                                    756 ;	spillPairReg hl
                                    757 ;	spillPairReg hl
      0003B7 29               [11]  758 	add	hl, hl
      0003B8 29               [11]  759 	add	hl, hl
      0003B9 29               [11]  760 	add	hl, hl
      0003BA 29               [11]  761 	add	hl, hl
      0003BB 29               [11]  762 	add	hl, hl
      0003BC E5               [11]  763 	push	hl
      0003BD FD E1            [14]  764 	pop	iy
      0003BF DD 5E FA         [19]  765 	ld	e, -6 (ix)
      0003C2 DD 56 FB         [19]  766 	ld	d, -5 (ix)
      0003C5 21 07 00         [10]  767 	ld	hl, #7
      0003C8 19               [11]  768 	add	hl, de
      0003C9 5E               [ 7]  769 	ld	e, (hl)
      0003CA 23               [ 6]  770 	inc	hl
      0003CB 56               [ 7]  771 	ld	d, (hl)
      0003CC DD 6E F6         [19]  772 	ld	l, -10 (ix)
                                    773 ;	spillPairReg hl
                                    774 ;	spillPairReg hl
      0003CF DD 66 F7         [19]  775 	ld	h, -9 (ix)
                                    776 ;	spillPairReg hl
                                    777 ;	spillPairReg hl
      0003D2 19               [11]  778 	add	hl, de
      0003D3 EB               [ 4]  779 	ex	de, hl
      0003D4 DD 6E F2         [19]  780 	ld	l, -14 (ix)
      0003D7 DD 66 F3         [19]  781 	ld	h, -13 (ix)
      0003DA 7E               [ 7]  782 	ld	a, (hl)
      0003DB 23               [ 6]  783 	inc	hl
      0003DC 66               [ 7]  784 	ld	h, (hl)
                                    785 ;	spillPairReg hl
      0003DD 6F               [ 4]  786 	ld	l, a
                                    787 ;	spillPairReg hl
                                    788 ;	spillPairReg hl
      0003DE 29               [11]  789 	add	hl, hl
      0003DF 29               [11]  790 	add	hl, hl
      0003E0 29               [11]  791 	add	hl, hl
      0003E1 29               [11]  792 	add	hl, hl
      0003E2 29               [11]  793 	add	hl, hl
      0003E3 CB F4            [ 8]  794 	set	6, h
      0003E5 C5               [11]  795 	push	bc
      0003E6 FD E5            [15]  796 	push	iy
      0003E8 CDr00r00         [17]  797 	call	_SMS_VRAMmemcpy
      0003EB C1               [10]  798 	pop	bc
                                    799 ;./lib/entities.c:26: sprite->frameInVRAM = entidad->frame;
      0003EC DD 6E F0         [19]  800 	ld	l, -16 (ix)
      0003EF DD 66 F1         [19]  801 	ld	h, -15 (ix)
      0003F2 7E               [ 7]  802 	ld	a, (hl)
      0003F3 02               [ 7]  803 	ld	(bc), a
                                    804 ;./lib/entities.c:28: for(j=0;j<sprite->alto;j++) {
      0003F4                        805 00133$:
      0003F4 DD 7E FE         [19]  806 	ld	a, -2 (ix)
      0003F7 DD 77 F6         [19]  807 	ld	-10 (ix), a
      0003FA DD 7E FF         [19]  808 	ld	a, -1 (ix)
      0003FD DD 77 F7         [19]  809 	ld	-9 (ix), a
      000400 DD 36 FF 00      [19]  810 	ld	-1 (ix), #0x00
      000404                        811 00120$:
      000404 DD 6E FA         [19]  812 	ld	l, -6 (ix)
      000407 DD 66 FB         [19]  813 	ld	h, -5 (ix)
      00040A 4E               [ 7]  814 	ld	c, (hl)
      00040B DD 7E FF         [19]  815 	ld	a, -1 (ix)
      00040E 91               [ 4]  816 	sub	a, c
      00040F 30 66            [12]  817 	jr	NC, 00109$
                                    818 ;./lib/entities.c:29: for(i=0;i<sprite->ancho;i++) {
      000411 0E 00            [ 7]  819 	ld	c, #0x00
      000413                        820 00117$:
      000413 DD 6E F6         [19]  821 	ld	l, -10 (ix)
      000416 DD 66 F7         [19]  822 	ld	h, -9 (ix)
      000419 46               [ 7]  823 	ld	b, (hl)
      00041A 79               [ 4]  824 	ld	a, c
      00041B 90               [ 4]  825 	sub	a, b
      00041C 30 54            [12]  826 	jr	NC, 00121$
                                    827 ;./lib/entities.c:30: numSprites = SMS_addSprite(entidad->x+(i<<3),entidad->y+(j<<4), (j<<2) + (i<<1) );  
      00041E DD 6E FC         [19]  828 	ld	l, -4 (ix)
      000421 DD 66 FD         [19]  829 	ld	h, -3 (ix)
      000424 7E               [ 7]  830 	ld	a, (hl)
      000425 59               [ 4]  831 	ld	e, c
      000426 16 00            [ 7]  832 	ld	d, #0x00
      000428 6B               [ 4]  833 	ld	l, e
      000429 62               [ 4]  834 	ld	h, d
      00042A 29               [11]  835 	add	hl, hl
      00042B 29               [11]  836 	add	hl, hl
      00042C 29               [11]  837 	add	hl, hl
      00042D 85               [ 4]  838 	add	a, l
                                    839 ;	spillPairReg hl
                                    840 ;	spillPairReg hl
                                    841 ;	spillPairReg hl
                                    842 ;	spillPairReg hl
      00042E 67               [ 4]  843 	ld	h, a
                                    844 ;	spillPairReg hl
                                    845 ;	spillPairReg hl
      00042F 2E 00            [ 7]  846 	ld	l, #0x00
                                    847 ;	spillPairReg hl
                                    848 ;	spillPairReg hl
      000431 DD 7E FF         [19]  849 	ld	a, -1 (ix)
      000434 DD 77 F4         [19]  850 	ld	-12 (ix), a
      000437 DD 36 F5 00      [19]  851 	ld	-11 (ix), #0x00
      00043B 87               [ 4]  852 	add	a, a
      00043C 87               [ 4]  853 	add	a, a
      00043D EB               [ 4]  854 	ex	de, hl
      00043E 29               [11]  855 	add	hl, hl
      00043F EB               [ 4]  856 	ex	de, hl
      000440 83               [ 4]  857 	add	a, e
      000441 5F               [ 4]  858 	ld	e, a
      000442 16 00            [ 7]  859 	ld	d, #0x00
      000444 7B               [ 4]  860 	ld	a, e
      000445 B5               [ 4]  861 	or	a, l
      000446 5F               [ 4]  862 	ld	e, a
      000447 7A               [ 4]  863 	ld	a, d
      000448 B4               [ 4]  864 	or	a, h
      000449 57               [ 4]  865 	ld	d, a
      00044A DD 6E F8         [19]  866 	ld	l, -8 (ix)
      00044D DD 66 F9         [19]  867 	ld	h, -7 (ix)
      000450 7E               [ 7]  868 	ld	a, (hl)
      000451 06 00            [ 7]  869 	ld	b, #0x00
      000453 DD 6E F4         [19]  870 	ld	l, -12 (ix)
      000456 DD 66 F5         [19]  871 	ld	h, -11 (ix)
      000459 29               [11]  872 	add	hl, hl
      00045A 29               [11]  873 	add	hl, hl
      00045B 29               [11]  874 	add	hl, hl
      00045C 29               [11]  875 	add	hl, hl
      00045D 85               [ 4]  876 	add	a, l
      00045E 6F               [ 4]  877 	ld	l, a
                                    878 ;	spillPairReg hl
                                    879 ;	spillPairReg hl
      00045F 78               [ 4]  880 	ld	a, b
      000460 8C               [ 4]  881 	adc	a, h
      000461 67               [ 4]  882 	ld	h, a
                                    883 ;	spillPairReg hl
                                    884 ;	spillPairReg hl
      000462 C5               [11]  885 	push	bc
      000463 CDr00r00         [17]  886 	call	_SMS_addSprite_f
      000466 C1               [10]  887 	pop	bc
      000467 DD 77 04         [19]  888 	ld	4 (ix), a
      00046A 07               [ 4]  889 	rlca
      00046B 9F               [ 4]  890 	sbc	a, a
      00046C DD 77 05         [19]  891 	ld	5 (ix), a
                                    892 ;./lib/entities.c:29: for(i=0;i<sprite->ancho;i++) {
      00046F 0C               [ 4]  893 	inc	c
      000470 18 A1            [12]  894 	jr	00117$
      000472                        895 00121$:
                                    896 ;./lib/entities.c:28: for(j=0;j<sprite->alto;j++) {
      000472 DD 34 FF         [23]  897 	inc	-1 (ix)
      000475 18 8D            [12]  898 	jr	00120$
      000477                        899 00109$:
                                    900 ;./lib/entities.c:34: return numSprites;
      000477 DD 5E 04         [19]  901 	ld	e, 4 (ix)
      00047A DD 56 05         [19]  902 	ld	d, 5 (ix)
                                    903 ;./lib/entities.c:35: }
      00047D DD F9            [10]  904 	ld	sp, ix
      00047F DD E1            [14]  905 	pop	ix
      000481 E1               [10]  906 	pop	hl
      000482 F1               [10]  907 	pop	af
      000483 E9               [ 4]  908 	jp	(hl)
                                    909 ;./alex.c:20: unsigned char canUp(){
                                    910 ;	---------------------------------
                                    911 ; Function canUp
                                    912 ; ---------------------------------
      000484                        913 _canUp::
                                    914 ;./alex.c:21: if (alex.x < 2)
      000484 3Ar03r00         [13]  915 	ld	a, (#_alex + 0)
      000487 D6 02            [ 7]  916 	sub	a, #0x02
      000489 30 02            [12]  917 	jr	NC, 00102$
                                    918 ;./alex.c:22: return 0;
      00048B AF               [ 4]  919 	xor	a, a
      00048C C9               [10]  920 	ret
      00048D                        921 00102$:
                                    922 ;./alex.c:23: return 1;
      00048D 3E 01            [ 7]  923 	ld	a, #0x01
                                    924 ;./alex.c:24: }
      00048F C9               [10]  925 	ret
                                    926 ;./alex.c:26: unsigned char canDown() {
                                    927 ;	---------------------------------
                                    928 ; Function canDown
                                    929 ; ---------------------------------
      000490                        930 _canDown::
                                    931 ;./alex.c:27: if (alex.y > 155)
      000490 21r04r00         [10]  932 	ld	hl, #_alex+1
      000493 4E               [ 7]  933 	ld	c, (hl)
      000494 3E 9B            [ 7]  934 	ld	a, #0x9b
      000496 91               [ 4]  935 	sub	a, c
      000497 30 02            [12]  936 	jr	NC, 00102$
                                    937 ;./alex.c:28: return 0;
      000499 AF               [ 4]  938 	xor	a, a
      00049A C9               [10]  939 	ret
      00049B                        940 00102$:
                                    941 ;./alex.c:29: return 1;
      00049B 3E 01            [ 7]  942 	ld	a, #0x01
                                    943 ;./alex.c:30: }
      00049D C9               [10]  944 	ret
                                    945 ;./alex.c:32: unsigned char canLeft() {
                                    946 ;	---------------------------------
                                    947 ; Function canLeft
                                    948 ; ---------------------------------
      00049E                        949 _canLeft::
                                    950 ;./alex.c:33: if (alex.x < 9)
      00049E 3Ar03r00         [13]  951 	ld	a, (#_alex + 0)
      0004A1 D6 09            [ 7]  952 	sub	a, #0x09
      0004A3 30 02            [12]  953 	jr	NC, 00102$
                                    954 ;./alex.c:34: return 0;
      0004A5 AF               [ 4]  955 	xor	a, a
      0004A6 C9               [10]  956 	ret
      0004A7                        957 00102$:
                                    958 ;./alex.c:35: return 1;
      0004A7 3E 01            [ 7]  959 	ld	a, #0x01
                                    960 ;./alex.c:36: }
      0004A9 C9               [10]  961 	ret
                                    962 ;./alex.c:38: unsigned char canRight() {
                                    963 ;	---------------------------------
                                    964 ; Function canRight
                                    965 ; ---------------------------------
      0004AA                        966 _canRight::
                                    967 ;./alex.c:39: if (alex.x > 238)
      0004AA 21r03r00         [10]  968 	ld	hl, #_alex+0
      0004AD 4E               [ 7]  969 	ld	c, (hl)
      0004AE 3E EE            [ 7]  970 	ld	a, #0xee
      0004B0 91               [ 4]  971 	sub	a, c
      0004B1 30 02            [12]  972 	jr	NC, 00102$
                                    973 ;./alex.c:40: return 0;
      0004B3 AF               [ 4]  974 	xor	a, a
      0004B4 C9               [10]  975 	ret
      0004B5                        976 00102$:
                                    977 ;./alex.c:41: return 1;
      0004B5 3E 01            [ 7]  978 	ld	a, #0x01
                                    979 ;./alex.c:42: }
      0004B7 C9               [10]  980 	ret
                                    981 ;./alex.c:44: void moveAlexSuelo(int keys) {
                                    982 ;	---------------------------------
                                    983 ; Function moveAlexSuelo
                                    984 ; ---------------------------------
      0004B8                        985 _moveAlexSuelo::
      0004B8 DD E5            [15]  986 	push	ix
      0004BA DD 21 00 00      [14]  987 	ld	ix,#0
      0004BE DD 39            [15]  988 	add	ix,sp
      0004C0 F5               [11]  989 	push	af
      0004C1 F5               [11]  990 	push	af
      0004C2 F5               [11]  991 	push	af
      0004C3 DD 75 FE         [19]  992 	ld	-2 (ix), l
      0004C6 DD 74 FF         [19]  993 	ld	-1 (ix), h
                                    994 ;./alex.c:46: if (keys & PORT_A_KEY_LEFT)
      0004C9 DD 7E FE         [19]  995 	ld	a, -2 (ix)
      0004CC E6 04            [ 7]  996 	and	a, #0x04
      0004CE DD 77 FA         [19]  997 	ld	-6 (ix), a
      0004D1 DD 36 FB 00      [19]  998 	ld	-5 (ix), #0x00
                                    999 ;./alex.c:48: if (keys & PORT_A_KEY_RIGHT)
      0004D5 DD 7E FE         [19] 1000 	ld	a, -2 (ix)
      0004D8 E6 08            [ 7] 1001 	and	a, #0x08
      0004DA DD 77 FC         [19] 1002 	ld	-4 (ix), a
      0004DD DD 36 FD 00      [19] 1003 	ld	-3 (ix), #0x00
                                   1004 ;./alex.c:45: if ((keys & PORT_A_KEY_DOWN)){
      0004E1 DD CB FE 4E      [20] 1005 	bit	1, -2 (ix)
      0004E5 28 33            [12] 1006 	jr	Z, 00109$
                                   1007 ;./alex.c:46: if (keys & PORT_A_KEY_LEFT)
      0004E7 AF               [ 4] 1008 	xor	a, a
      0004E8 DD B6 FA         [19] 1009 	or	a, -6 (ix)
      0004EB 28 05            [12] 1010 	jr	Z, 00102$
                                   1011 ;./alex.c:47: alex.oriented = 1;
      0004ED 21r07r00         [10] 1012 	ld	hl, #_alex+4
      0004F0 36 01            [10] 1013 	ld	(hl), #0x01
      0004F2                       1014 00102$:
                                   1015 ;./alex.c:48: if (keys & PORT_A_KEY_RIGHT)
      0004F2 AF               [ 4] 1016 	xor	a, a
      0004F3 DD B6 FC         [19] 1017 	or	a, -4 (ix)
      0004F6 28 05            [12] 1018 	jr	Z, 00104$
                                   1019 ;./alex.c:49: alex.oriented = 0;
      0004F8 21r07r00         [10] 1020 	ld	hl, #_alex+4
      0004FB 36 00            [10] 1021 	ld	(hl), #0x00
      0004FD                       1022 00104$:
                                   1023 ;./alex.c:50: if (!alex.oriented)
      0004FD 3Ar07r00         [13] 1024 	ld	a,(#_alex + 4)
                                   1025 ;./alex.c:51: alex.frame = 7;
                                   1026 ;./alex.c:50: if (!alex.oriented)
      000500 DD 77 FD         [19] 1027 	ld	-3 (ix), a
      000503 B7               [ 4] 1028 	or	a, a
      000504 20 07            [12] 1029 	jr	NZ, 00106$
                                   1030 ;./alex.c:51: alex.frame = 7;
      000506 21r05r00         [10] 1031 	ld	hl, #(_alex + 2)
      000509 36 07            [10] 1032 	ld	(hl), #0x07
      00050B 18 05            [12] 1033 	jr	00107$
      00050D                       1034 00106$:
                                   1035 ;./alex.c:53: alex.frame = 15;
      00050D 21r05r00         [10] 1036 	ld	hl, #(_alex + 2)
      000510 36 0F            [10] 1037 	ld	(hl), #0x0f
      000512                       1038 00107$:
                                   1039 ;./alex.c:54: alex.lastChangeFrame = 15;
      000512 21r06r00         [10] 1040 	ld	hl, #_alex + 3
      000515 36 0F            [10] 1041 	ld	(hl), #0x0f
                                   1042 ;./alex.c:55: return; // not move
      000517 C3r30r06         [10] 1043 	jp	00146$
      00051A                       1044 00109$:
                                   1045 ;./alex.c:58: if (keys & PORT_A_KEY_2) {
      00051A DD CB FE 6E      [20] 1046 	bit	5, -2 (ix)
      00051E 28 2A            [12] 1047 	jr	Z, 00116$
                                   1048 ;./alex.c:59: if (alex.y > 100)
      000520 01r04r00         [10] 1049 	ld	bc, #_alex+1
      000523 0A               [ 7] 1050 	ld	a, (bc)
      000524 5F               [ 4] 1051 	ld	e, a
      000525 3E 64            [ 7] 1052 	ld	a, #0x64
      000527 93               [ 4] 1053 	sub	a, e
      000528 30 09            [12] 1054 	jr	NC, 00111$
                                   1055 ;./alex.c:60: maxSalto = alex.y - 100;
      00052A 7B               [ 4] 1056 	ld	a, e
      00052B 21r02r00         [10] 1057 	ld	hl, #_maxSalto
      00052E C6 9C            [ 7] 1058 	add	a, #0x9c
      000530 77               [ 7] 1059 	ld	(hl), a
      000531 18 05            [12] 1060 	jr	00112$
      000533                       1061 00111$:
                                   1062 ;./alex.c:62: maxSalto = 0;
      000533 21r02r00         [10] 1063 	ld	hl, #_maxSalto
      000536 36 00            [10] 1064 	ld	(hl), #0x00
      000538                       1065 00112$:
                                   1066 ;./alex.c:63: alex.y--;
      000538 0A               [ 7] 1067 	ld	a, (bc)
      000539 3D               [ 4] 1068 	dec	a
      00053A 02               [ 7] 1069 	ld	(bc), a
                                   1070 ;./alex.c:64: alex.y--;
      00053B 3D               [ 4] 1071 	dec	a
      00053C 02               [ 7] 1072 	ld	(bc), a
                                   1073 ;./alex.c:65: PSGSFXPlay(salto_psg, SFX_CHANNEL1);
      00053D 3E 08            [ 7] 1074 	ld	a, #0x08
      00053F F5               [11] 1075 	push	af
      000540 33               [ 6] 1076 	inc	sp
      000541 21r00r00         [10] 1077 	ld	hl, #_salto_psg
      000544 CDr00r00         [17] 1078 	call	_PSGSFXPlay
                                   1079 ;./alex.c:66: return;
      000547 C3r30r06         [10] 1080 	jp	00146$
      00054A                       1081 00116$:
                                   1082 ;./alex.c:68: else if (keys & PORT_A_KEY_1) {
      00054A DD CB FE 66      [20] 1083 	bit	4, -2 (ix)
      00054E 28 0A            [12] 1084 	jr	Z, 00117$
                                   1085 ;./alex.c:69: alex.state = PUÑETAZO_SUELO;
      000550 21r08r00         [10] 1086 	ld	hl, #_alex + 5
      000553 36 20            [10] 1087 	ld	(hl), #0x20
                                   1088 ;./alex.c:70: alex.lastChangeFrame = 15;
      000555 21r06r00         [10] 1089 	ld	hl, #_alex + 3
      000558 36 0F            [10] 1090 	ld	(hl), #0x0f
      00055A                       1091 00117$:
                                   1092 ;./alex.c:72: if(alex.state != PUÑETAZO_SUELO) {
      00055A 21r08r00         [10] 1093 	ld	hl, #(_alex + 5)
      00055D 6E               [ 7] 1094 	ld	l, (hl)
                                   1095 ;	spillPairReg hl
                                   1096 ;./alex.c:76: alex.oriented = 1;
                                   1097 ;./alex.c:77: alex.lastChangeFrame++;
      00055E 01r06r00         [10] 1098 	ld	bc, #_alex + 3
                                   1099 ;./alex.c:80: alex.frame++;
      000561 11r05r00         [10] 1100 	ld	de, #_alex + 2
                                   1101 ;./alex.c:72: if(alex.state != PUÑETAZO_SUELO) {
      000564 7D               [ 4] 1102 	ld	a, l
      000565 D6 20            [ 7] 1103 	sub	a, #0x20
      000567 28 76            [12] 1104 	jr	Z, 00144$
                                   1105 ;./alex.c:73: if ((keys & PORT_A_KEY_LEFT) && alex.x > 8 )
      000569 AF               [ 4] 1106 	xor	a, a
      00056A DD B6 FA         [19] 1107 	or	a, -6 (ix)
      00056D 28 32            [12] 1108 	jr	Z, 00135$
      00056F 21r03r00         [10] 1109 	ld	hl, #_alex
      000572 6E               [ 7] 1110 	ld	l, (hl)
                                   1111 ;	spillPairReg hl
      000573 3E 08            [ 7] 1112 	ld	a, #0x08
      000575 95               [ 4] 1113 	sub	a, l
      000576 30 29            [12] 1114 	jr	NC, 00135$
                                   1115 ;./alex.c:75: alex.x -= 1;
      000578 7D               [ 4] 1116 	ld	a, l
      000579 3D               [ 4] 1117 	dec	a
      00057A 32r03r00         [13] 1118 	ld	(#_alex),a
                                   1119 ;./alex.c:76: alex.oriented = 1;
      00057D 21r07r00         [10] 1120 	ld	hl, #(_alex + 4)
      000580 36 01            [10] 1121 	ld	(hl), #0x01
                                   1122 ;./alex.c:77: alex.lastChangeFrame++;
      000582 0A               [ 7] 1123 	ld	a, (bc)
      000583 3C               [ 4] 1124 	inc	a
      000584 02               [ 7] 1125 	ld	(bc), a
                                   1126 ;./alex.c:78: if (alex.lastChangeFrame == 11) {
      000585 D6 0B            [ 7] 1127 	sub	a, #0x0b
      000587 20 05            [12] 1128 	jr	NZ, 00119$
                                   1129 ;./alex.c:79: alex.lastChangeFrame = 0;
      000589 AF               [ 4] 1130 	xor	a, a
      00058A 02               [ 7] 1131 	ld	(bc), a
                                   1132 ;./alex.c:80: alex.frame++;
      00058B 1A               [ 7] 1133 	ld	a, (de)
      00058C 3C               [ 4] 1134 	inc	a
      00058D 12               [ 7] 1135 	ld	(de), a
      00058E                       1136 00119$:
                                   1137 ;./alex.c:82: if (alex.frame > 11 || alex.frame < 8)
      00058E 1A               [ 7] 1138 	ld	a, (de)
      00058F 4F               [ 4] 1139 	ld	c, a
      000590 3E 0B            [ 7] 1140 	ld	a, #0x0b
      000592 91               [ 4] 1141 	sub	a, c
      000593 38 06            [12] 1142 	jr	C, 00120$
      000595 79               [ 4] 1143 	ld	a, c
      000596 D6 08            [ 7] 1144 	sub	a, #0x08
      000598 D2r30r06         [10] 1145 	jp	NC, 00146$
      00059B                       1146 00120$:
                                   1147 ;./alex.c:83: alex.frame = 8;
      00059B 3E 08            [ 7] 1148 	ld	a, #0x08
      00059D 12               [ 7] 1149 	ld	(de), a
      00059E C3r30r06         [10] 1150 	jp	00146$
      0005A1                       1151 00135$:
                                   1152 ;./alex.c:85: else if ((keys & PORT_A_KEY_RIGHT) && alex.x <240)
      0005A1 AF               [ 4] 1153 	xor	a, a
      0005A2 DD B6 FC         [19] 1154 	or	a, -4 (ix)
      0005A5 28 27            [12] 1155 	jr	Z, 00131$
      0005A7 3Ar03r00         [13] 1156 	ld	a, (#_alex + 0)
      0005AA FE F0            [ 7] 1157 	cp	a, #0xf0
      0005AC 30 20            [12] 1158 	jr	NC, 00131$
                                   1159 ;./alex.c:87: alex.x += 1;
      0005AE 3C               [ 4] 1160 	inc	a
      0005AF 32r03r00         [13] 1161 	ld	(#_alex),a
                                   1162 ;./alex.c:88: alex.oriented = 0;
      0005B2 21r07r00         [10] 1163 	ld	hl, #(_alex + 4)
      0005B5 36 00            [10] 1164 	ld	(hl), #0x00
                                   1165 ;./alex.c:89: alex.lastChangeFrame++;
      0005B7 0A               [ 7] 1166 	ld	a, (bc)
      0005B8 3C               [ 4] 1167 	inc	a
      0005B9 02               [ 7] 1168 	ld	(bc), a
                                   1169 ;./alex.c:90: if (alex.lastChangeFrame == 11) {
      0005BA D6 0B            [ 7] 1170 	sub	a, #0x0b
      0005BC 20 05            [12] 1171 	jr	NZ, 00124$
                                   1172 ;./alex.c:91: alex.lastChangeFrame = 0;
      0005BE AF               [ 4] 1173 	xor	a, a
      0005BF 02               [ 7] 1174 	ld	(bc), a
                                   1175 ;./alex.c:92: alex.frame++;
      0005C0 1A               [ 7] 1176 	ld	a, (de)
      0005C1 3C               [ 4] 1177 	inc	a
      0005C2 12               [ 7] 1178 	ld	(de), a
      0005C3                       1179 00124$:
                                   1180 ;./alex.c:94: if (alex.frame > 3 || alex.frame < 0)
      0005C3 1A               [ 7] 1181 	ld	a, (de)
      0005C4 4F               [ 4] 1182 	ld	c, a
      0005C5 3E 03            [ 7] 1183 	ld	a, #0x03
      0005C7 91               [ 4] 1184 	sub	a, c
      0005C8 30 66            [12] 1185 	jr	NC, 00146$
                                   1186 ;./alex.c:95: alex.frame = 0;
      0005CA AF               [ 4] 1187 	xor	a, a
      0005CB 12               [ 7] 1188 	ld	(de), a
      0005CC 18 62            [12] 1189 	jr	00146$
      0005CE                       1190 00131$:
                                   1191 ;./alex.c:99: alex.frame = 4;
      0005CE 3E 04            [ 7] 1192 	ld	a, #0x04
      0005D0 12               [ 7] 1193 	ld	(de), a
                                   1194 ;./alex.c:100: if (alex.oriented)
      0005D1 3Ar07r00         [13] 1195 	ld	a, (#(_alex + 4) + 0)
      0005D4 B7               [ 4] 1196 	or	a, a
      0005D5 28 03            [12] 1197 	jr	Z, 00129$
                                   1198 ;./alex.c:101: alex.frame = 12;
      0005D7 3E 0C            [ 7] 1199 	ld	a, #0x0c
      0005D9 12               [ 7] 1200 	ld	(de), a
      0005DA                       1201 00129$:
                                   1202 ;./alex.c:102: alex.lastChangeFrame = 10;
      0005DA 3E 0A            [ 7] 1203 	ld	a, #0x0a
      0005DC 02               [ 7] 1204 	ld	(bc), a
      0005DD 18 51            [12] 1205 	jr	00146$
      0005DF                       1206 00144$:
                                   1207 ;./alex.c:106: if (!alex.oriented) {
      0005DF 3Ar07r00         [13] 1208 	ld	a, (#(_alex + 4) + 0)
                                   1209 ;./alex.c:108: SMS_addSprite (alex.x + 16, alex.y + 9, 9);
                                   1210 ;./alex.c:106: if (!alex.oriented) {
      0005E2 DD 77 FD         [19] 1211 	ld	-3 (ix), a
      0005E5 B7               [ 4] 1212 	or	a, a
      0005E6 20 22            [12] 1213 	jr	NZ, 00139$
                                   1214 ;./alex.c:107: alex.frame = 5;
      0005E8 3E 05            [ 7] 1215 	ld	a, #0x05
      0005EA 12               [ 7] 1216 	ld	(de), a
                                   1217 ;./alex.c:108: SMS_addSprite (alex.x + 16, alex.y + 9, 9);
      0005EB 21r03r00         [10] 1218 	ld	hl, #_alex
      0005EE 5E               [ 7] 1219 	ld	e, (hl)
      0005EF 16 00            [ 7] 1220 	ld	d, #0x00
      0005F1 21 10 00         [10] 1221 	ld	hl, #0x0010
      0005F4 19               [11] 1222 	add	hl, de
      0005F5 55               [ 4] 1223 	ld	d, l
      0005F6 1E 09            [ 7] 1224 	ld	e, #0x09
      0005F8 3Ar04r00         [13] 1225 	ld	a, (#(_alex + 1) + 0)
      0005FB 26 00            [ 7] 1226 	ld	h, #0x00
                                   1227 ;	spillPairReg hl
                                   1228 ;	spillPairReg hl
      0005FD C6 09            [ 7] 1229 	add	a, #0x09
      0005FF 6F               [ 4] 1230 	ld	l, a
                                   1231 ;	spillPairReg hl
                                   1232 ;	spillPairReg hl
      000600 30 01            [12] 1233 	jr	NC, 00289$
      000602 24               [ 4] 1234 	inc	h
      000603                       1235 00289$:
      000603 C5               [11] 1236 	push	bc
      000604 CDr00r00         [17] 1237 	call	_SMS_addSprite_f
      000607 C1               [10] 1238 	pop	bc
      000608 18 1B            [12] 1239 	jr	00140$
      00060A                       1240 00139$:
                                   1241 ;./alex.c:111: alex.frame = 13;
      00060A 3E 0D            [ 7] 1242 	ld	a, #0x0d
      00060C 12               [ 7] 1243 	ld	(de), a
                                   1244 ;./alex.c:112: SMS_addSprite (alex.x - 8,  alex.y + 9, 11);
      00060D 3Ar03r00         [13] 1245 	ld	a, (#_alex + 0)
      000610 C6 F8            [ 7] 1246 	add	a, #0xf8
                                   1247 ;	spillPairReg hl
                                   1248 ;	spillPairReg hl
      000612 57               [ 4] 1249 	ld	d, a
      000613 1E 0B            [ 7] 1250 	ld	e, #0x0b
      000615 3Ar04r00         [13] 1251 	ld	a, (#(_alex + 1) + 0)
      000618 26 00            [ 7] 1252 	ld	h, #0x00
                                   1253 ;	spillPairReg hl
                                   1254 ;	spillPairReg hl
      00061A C6 09            [ 7] 1255 	add	a, #0x09
      00061C 6F               [ 4] 1256 	ld	l, a
                                   1257 ;	spillPairReg hl
                                   1258 ;	spillPairReg hl
      00061D 30 01            [12] 1259 	jr	NC, 00290$
      00061F 24               [ 4] 1260 	inc	h
      000620                       1261 00290$:
      000620 C5               [11] 1262 	push	bc
      000621 CDr00r00         [17] 1263 	call	_SMS_addSprite_f
      000624 C1               [10] 1264 	pop	bc
      000625                       1265 00140$:
                                   1266 ;./alex.c:114: alex.lastChangeFrame--;
      000625 0A               [ 7] 1267 	ld	a, (bc)
      000626 3D               [ 4] 1268 	dec	a
      000627 02               [ 7] 1269 	ld	(bc), a
                                   1270 ;./alex.c:115: if(!alex.lastChangeFrame) {
      000628 B7               [ 4] 1271 	or	a, a
      000629 20 05            [12] 1272 	jr	NZ, 00146$
                                   1273 ;./alex.c:116: alex.state = 0;
      00062B 21r08r00         [10] 1274 	ld	hl, #(_alex + 5)
      00062E 36 00            [10] 1275 	ld	(hl), #0x00
      000630                       1276 00146$:
                                   1277 ;./alex.c:119: }
      000630 DD F9            [10] 1278 	ld	sp, ix
      000632 DD E1            [14] 1279 	pop	ix
      000634 C9               [10] 1280 	ret
                                   1281 ;./alex.c:121: void moveAlexAire(int keys, unsigned char puedeSubir, unsigned char puedeDerecha, unsigned char puedeIzquieda) {
                                   1282 ;	---------------------------------
                                   1283 ; Function moveAlexAire
                                   1284 ; ---------------------------------
      000635                       1285 _moveAlexAire::
      000635 DD E5            [15] 1286 	push	ix
      000637 DD 21 00 00      [14] 1287 	ld	ix,#0
      00063B DD 39            [15] 1288 	add	ix,sp
      00063D F5               [11] 1289 	push	af
      00063E 3B               [ 6] 1290 	dec	sp
      00063F DD 75 FE         [19] 1291 	ld	-2 (ix), l
      000642 DD 74 FF         [19] 1292 	ld	-1 (ix), h
                                   1293 ;./alex.c:122: if (alex.y > maxSalto) {
      000645 21r04r00         [10] 1294 	ld	hl, #(_alex + 1)
      000648 46               [ 7] 1295 	ld	b, (hl)
                                   1296 ;./alex.c:123: alex.y -= 2;
      000649 48               [ 4] 1297 	ld	c, b
                                   1298 ;./alex.c:122: if (alex.y > maxSalto) {
      00064A 3Ar02r00         [13] 1299 	ld	a, (_maxSalto+0)
      00064D 90               [ 4] 1300 	sub	a, b
      00064E 30 08            [12] 1301 	jr	NC, 00102$
                                   1302 ;./alex.c:123: alex.y -= 2;
      000650 0D               [ 4] 1303 	dec	c
      000651 0D               [ 4] 1304 	dec	c
      000652 21r04r00         [10] 1305 	ld	hl, #(_alex + 1)
      000655 71               [ 7] 1306 	ld	(hl), c
      000656 18 0E            [12] 1307 	jr	00103$
      000658                       1308 00102$:
                                   1309 ;./alex.c:126: alex.y += 2; // bajando
      000658 0C               [ 4] 1310 	inc	c
      000659 0C               [ 4] 1311 	inc	c
      00065A 21r04r00         [10] 1312 	ld	hl, #(_alex + 1)
      00065D 71               [ 7] 1313 	ld	(hl), c
                                   1314 ;./alex.c:127: maxSalto = 255;
      00065E FD 21r02r00      [14] 1315 	ld	iy, #_maxSalto
      000662 FD 36 00 FF      [19] 1316 	ld	0 (iy), #0xff
      000666                       1317 00103$:
                                   1318 ;./alex.c:130: if (alex.state != PUÑETAZO_SALTANDO)
                                   1319 ;./alex.c:131: alex.oriented = 1;
                                   1320 ;./alex.c:129: if (keys & PORT_A_KEY_LEFT) {
      000666 DD CB FE 56      [20] 1321 	bit	2, -2 (ix)
      00066A 28 1A            [12] 1322 	jr	Z, 00109$
                                   1323 ;./alex.c:130: if (alex.state != PUÑETAZO_SALTANDO)
      00066C 3Ar08r00         [13] 1324 	ld	a, (#(_alex + 5) + 0)
      00066F D6 10            [ 7] 1325 	sub	a, #0x10
      000671 28 05            [12] 1326 	jr	Z, 00105$
                                   1327 ;./alex.c:131: alex.oriented = 1;
      000673 21r07r00         [10] 1328 	ld	hl, #(_alex + 4)
      000676 36 01            [10] 1329 	ld	(hl), #0x01
      000678                       1330 00105$:
                                   1331 ;./alex.c:132: if (puedeIzquieda)
      000678 DD 7E 06         [19] 1332 	ld	a, 6 (ix)
      00067B B7               [ 4] 1333 	or	a, a
      00067C 28 08            [12] 1334 	jr	Z, 00109$
                                   1335 ;./alex.c:133: alex.x -= 2;
      00067E 3Ar03r00         [13] 1336 	ld	a, (#_alex + 0)
      000681 3D               [ 4] 1337 	dec	a
      000682 3D               [ 4] 1338 	dec	a
      000683 32r03r00         [13] 1339 	ld	(#_alex),a
      000686                       1340 00109$:
                                   1341 ;./alex.c:135: if (keys & PORT_A_KEY_RIGHT) {
      000686 DD CB FE 5E      [20] 1342 	bit	3, -2 (ix)
      00068A 28 1A            [12] 1343 	jr	Z, 00115$
                                   1344 ;./alex.c:136: if (alex.state != PUÑETAZO_SALTANDO)
      00068C 3Ar08r00         [13] 1345 	ld	a, (#(_alex + 5) + 0)
      00068F D6 10            [ 7] 1346 	sub	a, #0x10
      000691 28 05            [12] 1347 	jr	Z, 00111$
                                   1348 ;./alex.c:137: alex.oriented = 0;
      000693 21r07r00         [10] 1349 	ld	hl, #(_alex + 4)
      000696 36 00            [10] 1350 	ld	(hl), #0x00
      000698                       1351 00111$:
                                   1352 ;./alex.c:138: if (puedeDerecha)
      000698 DD 7E 05         [19] 1353 	ld	a, 5 (ix)
      00069B B7               [ 4] 1354 	or	a, a
      00069C 28 08            [12] 1355 	jr	Z, 00115$
                                   1356 ;./alex.c:139: alex.x += 2;
      00069E 3Ar03r00         [13] 1357 	ld	a, (#_alex + 0)
      0006A1 C6 02            [ 7] 1358 	add	a, #0x02
      0006A3 32r03r00         [13] 1359 	ld	(#_alex),a
      0006A6                       1360 00115$:
                                   1361 ;./alex.c:141: if (alex.state == PUÑETAZO_SALTANDO) {
      0006A6 21r08r00         [10] 1362 	ld	hl, #(_alex + 5)
      0006A9 4E               [ 7] 1363 	ld	c, (hl)
                                   1364 ;./alex.c:142: alex.lastChangeFrame--;
                                   1365 ;./alex.c:147: alex.frame = 5;
                                   1366 ;./alex.c:141: if (alex.state == PUÑETAZO_SALTANDO) {
      0006AA 79               [ 4] 1367 	ld	a, c
      0006AB D6 10            [ 7] 1368 	sub	a, #0x10
      0006AD 20 55            [12] 1369 	jr	NZ, 00127$
                                   1370 ;./alex.c:142: alex.lastChangeFrame--;
      0006AF 21r06r00         [10] 1371 	ld	hl, #(_alex + 3)
      0006B2 4E               [ 7] 1372 	ld	c, (hl)
      0006B3 0D               [ 4] 1373 	dec	c
      0006B4 21r06r00         [10] 1374 	ld	hl, #(_alex + 3)
                                   1375 ;./alex.c:143: if  (!alex.lastChangeFrame) {
      0006B7 79               [ 4] 1376 	ld	a,c
      0006B8 77               [ 7] 1377 	ld	(hl),a
      0006B9 B7               [ 4] 1378 	or	a, a
      0006BA 20 05            [12] 1379 	jr	NZ, 00117$
                                   1380 ;./alex.c:144: alex.state = 0;
      0006BC 21r08r00         [10] 1381 	ld	hl, #(_alex + 5)
      0006BF 36 00            [10] 1382 	ld	(hl), #0x00
      0006C1                       1383 00117$:
                                   1384 ;./alex.c:146: if (!alex.oriented) {
      0006C1 3Ar07r00         [13] 1385 	ld	a, (#(_alex + 4) + 0)
      0006C4 B7               [ 4] 1386 	or	a, a
      0006C5 20 21            [12] 1387 	jr	NZ, 00119$
                                   1388 ;./alex.c:147: alex.frame = 5;
      0006C7 21r05r00         [10] 1389 	ld	hl, #(_alex + 2)
      0006CA 36 05            [10] 1390 	ld	(hl), #0x05
                                   1391 ;./alex.c:148: SMS_addSprite (alex.x + 16, alex.y + 9, 9);
      0006CC 21r03r00         [10] 1392 	ld	hl, #_alex
      0006CF 4E               [ 7] 1393 	ld	c, (hl)
      0006D0 06 00            [ 7] 1394 	ld	b, #0x00
      0006D2 21 10 00         [10] 1395 	ld	hl, #0x0010
      0006D5 09               [11] 1396 	add	hl, bc
      0006D6 55               [ 4] 1397 	ld	d, l
      0006D7 1E 09            [ 7] 1398 	ld	e, #0x09
      0006D9 21r04r00         [10] 1399 	ld	hl, #(_alex + 1)
      0006DC 4E               [ 7] 1400 	ld	c, (hl)
      0006DD 06 00            [ 7] 1401 	ld	b, #0x00
      0006DF 21 09 00         [10] 1402 	ld	hl, #0x0009
      0006E2 09               [11] 1403 	add	hl, bc
      0006E3 CDr00r00         [17] 1404 	call	_SMS_addSprite_f
      0006E6 18 41            [12] 1405 	jr	00129$
      0006E8                       1406 00119$:
                                   1407 ;./alex.c:151: alex.frame = 13;
      0006E8 21r05r00         [10] 1408 	ld	hl, #(_alex + 2)
      0006EB 36 0D            [10] 1409 	ld	(hl), #0x0d
                                   1410 ;./alex.c:152: SMS_addSprite (alex.x - 8,  alex.y + 9, 11);
      0006ED 3Ar03r00         [13] 1411 	ld	a, (#_alex + 0)
      0006F0 C6 F8            [ 7] 1412 	add	a, #0xf8
      0006F2 57               [ 4] 1413 	ld	d, a
      0006F3 1E 0B            [ 7] 1414 	ld	e, #0x0b
      0006F5 21r04r00         [10] 1415 	ld	hl, #(_alex + 1)
      0006F8 4E               [ 7] 1416 	ld	c, (hl)
      0006F9 06 00            [ 7] 1417 	ld	b, #0x00
      0006FB 21 09 00         [10] 1418 	ld	hl, #0x0009
      0006FE 09               [11] 1419 	add	hl, bc
      0006FF CDr00r00         [17] 1420 	call	_SMS_addSprite_f
      000702 18 25            [12] 1421 	jr	00129$
      000704                       1422 00127$:
                                   1423 ;./alex.c:156: if (!alex.oriented)
      000704 3Ar07r00         [13] 1424 	ld	a, (#(_alex + 4) + 0)
      000707 DD 77 FD         [19] 1425 	ld	-3 (ix), a
      00070A B7               [ 4] 1426 	or	a, a
      00070B 20 07            [12] 1427 	jr	NZ, 00122$
                                   1428 ;./alex.c:157: alex.frame = 6;
      00070D 21r05r00         [10] 1429 	ld	hl, #(_alex + 2)
      000710 36 06            [10] 1430 	ld	(hl), #0x06
      000712 18 05            [12] 1431 	jr	00123$
      000714                       1432 00122$:
                                   1433 ;./alex.c:159: alex.frame = 14;
      000714 21r05r00         [10] 1434 	ld	hl, #(_alex + 2)
      000717 36 0E            [10] 1435 	ld	(hl), #0x0e
      000719                       1436 00123$:
                                   1437 ;./alex.c:160: if (keys & PORT_A_KEY_1) {
      000719 DD CB FE 66      [20] 1438 	bit	4, -2 (ix)
      00071D 28 0A            [12] 1439 	jr	Z, 00129$
                                   1440 ;./alex.c:161: alex.state = PUÑETAZO_SALTANDO;
      00071F 21r08r00         [10] 1441 	ld	hl, #(_alex + 5)
      000722 36 10            [10] 1442 	ld	(hl), #0x10
                                   1443 ;./alex.c:162: alex.lastChangeFrame = 20;
      000724 21r06r00         [10] 1444 	ld	hl, #(_alex + 3)
      000727 36 14            [10] 1445 	ld	(hl), #0x14
      000729                       1446 00129$:
                                   1447 ;./alex.c:166: }
      000729 DD F9            [10] 1448 	ld	sp, ix
      00072B DD E1            [14] 1449 	pop	ix
      00072D E1               [10] 1450 	pop	hl
      00072E F1               [10] 1451 	pop	af
      00072F 33               [ 6] 1452 	inc	sp
      000730 E9               [ 4] 1453 	jp	(hl)
                                   1454 ;./alex.c:169: void moveAlex(int keys) {
                                   1455 ;	---------------------------------
                                   1456 ; Function moveAlex
                                   1457 ; ---------------------------------
      000731                       1458 _moveAlex::
      000731 DD E5            [15] 1459 	push	ix
      000733 DD 21 00 00      [14] 1460 	ld	ix,#0
      000737 DD 39            [15] 1461 	add	ix,sp
      000739 3B               [ 6] 1462 	dec	sp
                                   1463 ;./alex.c:170: unsigned char puedeBajar = canDown();
      00073A E5               [11] 1464 	push	hl
      00073B CDr90r04         [17] 1465 	call	_canDown
      00073E 4F               [ 4] 1466 	ld	c, a
      00073F C5               [11] 1467 	push	bc
      000740 CDr84r04         [17] 1468 	call	_canUp
      000743 DD 77 FF         [19] 1469 	ld	-1 (ix), a
      000746 CDrAAr04         [17] 1470 	call	_canRight
      000749 5F               [ 4] 1471 	ld	e, a
      00074A D5               [11] 1472 	push	de
      00074B CDr9Er04         [17] 1473 	call	_canLeft
      00074E D1               [10] 1474 	pop	de
      00074F C1               [10] 1475 	pop	bc
      000750 E1               [10] 1476 	pop	hl
                                   1477 ;./alex.c:174: if (puedeBajar)
      000751 0C               [ 4] 1478 	inc	c
      000752 0D               [ 4] 1479 	dec	c
      000753 28 0C            [12] 1480 	jr	Z, 00102$
                                   1481 ;./alex.c:175: moveAlexAire(keys, puedeSubir, puedeDerecha, puedeIzquierda);
      000755 57               [ 4] 1482 	ld	d,a
      000756 D5               [11] 1483 	push	de
      000757 DD 7E FF         [19] 1484 	ld	a, -1 (ix)
      00075A F5               [11] 1485 	push	af
      00075B 33               [ 6] 1486 	inc	sp
      00075C CDr35r06         [17] 1487 	call	_moveAlexAire
      00075F 18 03            [12] 1488 	jr	00104$
      000761                       1489 00102$:
                                   1490 ;./alex.c:177: moveAlexSuelo(keys);
      000761 CDrB8r04         [17] 1491 	call	_moveAlexSuelo
      000764                       1492 00104$:
                                   1493 ;./alex.c:178: }
      000764 33               [ 6] 1494 	inc	sp
      000765 DD E1            [14] 1495 	pop	ix
      000767 C9               [10] 1496 	ret
                                   1497 ;main.c:20: void inicializaPajaros()
                                   1498 ;	---------------------------------
                                   1499 ; Function inicializaPajaros
                                   1500 ; ---------------------------------
      000768                       1501 _inicializaPajaros::
      000768 DD E5            [15] 1502 	push	ix
      00076A DD 21 00 00      [14] 1503 	ld	ix,#0
      00076E DD 39            [15] 1504 	add	ix,sp
      000770 F5               [11] 1505 	push	af
                                   1506 ;main.c:23: for (i = 0; i < NUM_PAJAROS; i++)
      000771 0E 00            [ 7] 1507 	ld	c, #0x00
      000773                       1508 00102$:
                                   1509 ;main.c:25: pajaros[i].x = 15 + 32 * i;
      000773 06 00            [ 7] 1510 	ld	b, #0x00
      000775 69               [ 4] 1511 	ld	l, c
      000776 60               [ 4] 1512 	ld	h, b
      000777 29               [11] 1513 	add	hl, hl
      000778 09               [11] 1514 	add	hl, bc
      000779 29               [11] 1515 	add	hl, hl
      00077A EB               [ 4] 1516 	ex	de, hl
      00077B 21r06r03         [10] 1517 	ld	hl, #_pajaros
      00077E 19               [11] 1518 	add	hl, de
      00077F EB               [ 4] 1519 	ex	de, hl
      000780 79               [ 4] 1520 	ld	a, c
      000781 0F               [ 4] 1521 	rrca
      000782 0F               [ 4] 1522 	rrca
      000783 0F               [ 4] 1523 	rrca
      000784 E6 E0            [ 7] 1524 	and	a, #0xe0
      000786 C6 0F            [ 7] 1525 	add	a, #0x0f
      000788 12               [ 7] 1526 	ld	(de), a
                                   1527 ;main.c:26: pajaros[i].y = 15 + 16 * (i / 2);
      000789 6B               [ 4] 1528 	ld	l, e
      00078A 62               [ 4] 1529 	ld	h, d
      00078B 23               [ 6] 1530 	inc	hl
      00078C E3               [19] 1531 	ex	(sp), hl
      00078D 69               [ 4] 1532 	ld	l, c
                                   1533 ;	spillPairReg hl
                                   1534 ;	spillPairReg hl
      00078E 26 00            [ 7] 1535 	ld	h, #0x00
                                   1536 ;	spillPairReg hl
                                   1537 ;	spillPairReg hl
      000790 CB 2C            [ 8] 1538 	sra	h
      000792 CB 1D            [ 8] 1539 	rr	l
      000794 7D               [ 4] 1540 	ld	a, l
      000795 87               [ 4] 1541 	add	a, a
      000796 87               [ 4] 1542 	add	a, a
      000797 87               [ 4] 1543 	add	a, a
      000798 87               [ 4] 1544 	add	a, a
      000799 C6 0F            [ 7] 1545 	add	a, #0x0f
      00079B E1               [10] 1546 	pop	hl
      00079C E5               [11] 1547 	push	hl
      00079D 77               [ 7] 1548 	ld	(hl), a
                                   1549 ;main.c:27: pajaros[i].lastChangeFrame = i * 3;
      00079E 13               [ 6] 1550 	inc	de
      00079F 13               [ 6] 1551 	inc	de
      0007A0 13               [ 6] 1552 	inc	de
      0007A1 79               [ 4] 1553 	ld	a, c
      0007A2 87               [ 4] 1554 	add	a, a
      0007A3 81               [ 4] 1555 	add	a, c
      0007A4 12               [ 7] 1556 	ld	(de), a
                                   1557 ;main.c:23: for (i = 0; i < NUM_PAJAROS; i++)
      0007A5 0C               [ 4] 1558 	inc	c
      0007A6 79               [ 4] 1559 	ld	a, c
      0007A7 D6 0A            [ 7] 1560 	sub	a, #0x0a
      0007A9 38 C8            [12] 1561 	jr	C, 00102$
                                   1562 ;main.c:29: }
      0007AB DD F9            [10] 1563 	ld	sp, ix
      0007AD DD E1            [14] 1564 	pop	ix
      0007AF C9               [10] 1565 	ret
                                   1566 ;main.c:31: void loadGrapVRAM()
                                   1567 ;	---------------------------------
                                   1568 ; Function loadGrapVRAM
                                   1569 ; ---------------------------------
      0007B0                       1570 _loadGrapVRAM::
      0007B0 DD E5            [15] 1571 	push	ix
      0007B2 DD 21 00 00      [14] 1572 	ld	ix,#0
      0007B6 DD 39            [15] 1573 	add	ix,sp
      0007B8 21 E2 FF         [10] 1574 	ld	hl, #-30
      0007BB 39               [11] 1575 	add	hl, sp
      0007BC F9               [ 6] 1576 	ld	sp, hl
                                   1577 ;main.c:33: SMS_init();
      0007BD CDr00r00         [17] 1578 	call	_SMS_init
                                   1579 ;main.c:34: inicializaPajaros();
      0007C0 CDr68r07         [17] 1580 	call	_inicializaPajaros
                                   1581 ;main.c:36: SMS_setSpriteMode(SPRITEMODE_TALL);
      0007C3 2E 01            [ 7] 1582 	ld	l, #0x01
                                   1583 ;	spillPairReg hl
                                   1584 ;	spillPairReg hl
      0007C5 CDr00r00         [17] 1585 	call	_SMS_setSpriteMode
                                   1586 ;main.c:37: SMS_displayOn();
      0007C8 21 40 01         [10] 1587 	ld	hl, #0x0140
      0007CB CDr00r00         [17] 1588 	call	_SMS_VDPturnOnFeature
                                   1589 ;main.c:38: SMS_loadBGPalette(sonicpalette_inc);
      0007CE 21r00r00         [10] 1590 	ld	hl, #_sonicpalette_inc
      0007D1 CDr00r00         [17] 1591 	call	_SMS_loadBGPalette
                                   1592 ;main.c:39: SMS_loadSpritePalette(palleteAlex_inc);
      0007D4 21r00r00         [10] 1593 	ld	hl, #_palleteAlex_inc
      0007D7 CDr00r00         [17] 1594 	call	_SMS_loadSpritePalette
                                   1595 ;main.c:40: SMS_loadTiles(sonictiles_inc, 0, sonictiles_inc_size);
      0007DA 21 C0 14         [10] 1596 	ld	hl, #0x14c0
      0007DD E5               [11] 1597 	push	hl
      0007DE 11r00r00         [10] 1598 	ld	de, #_sonictiles_inc
      0007E1 21 00 40         [10] 1599 	ld	hl, #0x4000
      0007E4 CDr00r00         [17] 1600 	call	_SMS_VRAMmemcpy
                                   1601 ;main.c:41: spriteAlex = generateSpriteNoRAM(2, 2, spriteAlex_inc_size, spriteAlex_inc);
      0007E7 21r00r00         [10] 1602 	ld	hl, #_spriteAlex_inc
      0007EA E5               [11] 1603 	push	hl
      0007EB 21 00 10         [10] 1604 	ld	hl, #0x1000
      0007EE E5               [11] 1605 	push	hl
                                   1606 ;	spillPairReg hl
                                   1607 ;	spillPairReg hl
      0007EF 3E 02            [ 7] 1608 	ld	a,#0x02
      0007F1 6F               [ 4] 1609 	ld	l,a
      0007F2 E5               [11] 1610 	push	hl
      0007F3 21 06 00         [10] 1611 	ld	hl, #0x0006
      0007F6 39               [11] 1612 	add	hl, sp
      0007F7 EB               [ 4] 1613 	ex	de,hl
      0007F8 E1               [10] 1614 	pop	hl
      0007F9 D5               [11] 1615 	push	de
      0007FA CDrAAr00         [17] 1616 	call	_generateSpriteNoRAM
      0007FD F1               [10] 1617 	pop	af
      0007FE F1               [10] 1618 	pop	af
      0007FF F1               [10] 1619 	pop	af
      000800 11r09r00         [10] 1620 	ld	de, #_spriteAlex
      000803 21 00 00         [10] 1621 	ld	hl, #0
      000806 39               [11] 1622 	add	hl, sp
      000807 01 0A 00         [10] 1623 	ld	bc, #0x000a
      00080A ED B0            [21] 1624 	ldir
                                   1625 ;main.c:42: spritePuno = generateSprite(1, 2, puno_inc_size, puno_inc);
      00080C 21r00r00         [10] 1626 	ld	hl, #_puno_inc
      00080F E5               [11] 1627 	push	hl
      000810 21 80 00         [10] 1628 	ld	hl, #0x0080
      000813 E5               [11] 1629 	push	hl
      000814 2E 02            [ 7] 1630 	ld	l, #0x02
                                   1631 ;	spillPairReg hl
                                   1632 ;	spillPairReg hl
      000816 3E 01            [ 7] 1633 	ld	a, #0x01
      000818 E5               [11] 1634 	push	hl
      000819 21 10 00         [10] 1635 	ld	hl, #0x0010
      00081C 39               [11] 1636 	add	hl, sp
      00081D EB               [ 4] 1637 	ex	de,hl
      00081E E1               [10] 1638 	pop	hl
      00081F D5               [11] 1639 	push	de
      000820 CDr00r00         [17] 1640 	call	_generateSprite
      000823 F1               [10] 1641 	pop	af
      000824 F1               [10] 1642 	pop	af
      000825 F1               [10] 1643 	pop	af
      000826 11r1Dr00         [10] 1644 	ld	de, #_spritePuno
      000829 21 0A 00         [10] 1645 	ld	hl, #10
      00082C 39               [11] 1646 	add	hl, sp
      00082D 01 0A 00         [10] 1647 	ld	bc, #0x000a
      000830 ED B0            [21] 1648 	ldir
                                   1649 ;main.c:43: spritePajaro = generateSprite(3, 1, spritePajaro_inc_size, spritePajaro_inc);
      000832 21r00r00         [10] 1650 	ld	hl, #_spritePajaro_inc
      000835 E5               [11] 1651 	push	hl
      000836 21 80 01         [10] 1652 	ld	hl, #0x0180
      000839 E5               [11] 1653 	push	hl
      00083A 2E 01            [ 7] 1654 	ld	l, #0x01
                                   1655 ;	spillPairReg hl
                                   1656 ;	spillPairReg hl
      00083C 3E 03            [ 7] 1657 	ld	a, #0x03
      00083E E5               [11] 1658 	push	hl
      00083F 21 1A 00         [10] 1659 	ld	hl, #0x001a
      000842 39               [11] 1660 	add	hl, sp
      000843 EB               [ 4] 1661 	ex	de,hl
      000844 E1               [10] 1662 	pop	hl
      000845 D5               [11] 1663 	push	de
      000846 CDr00r00         [17] 1664 	call	_generateSprite
      000849 F1               [10] 1665 	pop	af
      00084A F1               [10] 1666 	pop	af
      00084B F1               [10] 1667 	pop	af
      00084C 11r13r00         [10] 1668 	ld	de, #_spritePajaro
      00084F 21 14 00         [10] 1669 	ld	hl, #20
      000852 39               [11] 1670 	add	hl, sp
      000853 01 0A 00         [10] 1671 	ld	bc, #0x000a
      000856 ED B0            [21] 1672 	ldir
                                   1673 ;main.c:45: SMS_loadTileMap(0, 0, sonictilemap_inc, sonictilemap_inc_size);
      000858 21 00 06         [10] 1674 	ld	hl, #0x0600
      00085B E5               [11] 1675 	push	hl
      00085C 11r00r00         [10] 1676 	ld	de, #_sonictilemap_inc
      00085F 26 78            [ 7] 1677 	ld	h, #0x78
      000861 CDr00r00         [17] 1678 	call	_SMS_VRAMmemcpy
                                   1679 ;main.c:46: }
      000864 DD F9            [10] 1680 	ld	sp, ix
      000866 DD E1            [14] 1681 	pop	ix
      000868 C9               [10] 1682 	ret
                                   1683 ;main.c:48: void dibujaPajaros()
                                   1684 ;	---------------------------------
                                   1685 ; Function dibujaPajaros
                                   1686 ; ---------------------------------
      000869                       1687 _dibujaPajaros::
      000869 DD E5            [15] 1688 	push	ix
      00086B DD 21 00 00      [14] 1689 	ld	ix,#0
      00086F DD 39            [15] 1690 	add	ix,sp
      000871 F5               [11] 1691 	push	af
                                   1692 ;main.c:51: for (i = 0; i < NUM_PAJAROS; i++)
      000872 DD 36 FF 00      [19] 1693 	ld	-1 (ix), #0x00
      000876                       1694 00106$:
                                   1695 ;main.c:53: pajaros[i].x++;
      000876 DD 4E FF         [19] 1696 	ld	c, -1 (ix)
      000879 06 00            [ 7] 1697 	ld	b, #0x00
      00087B 69               [ 4] 1698 	ld	l, c
      00087C 60               [ 4] 1699 	ld	h, b
      00087D 29               [11] 1700 	add	hl, hl
      00087E 09               [11] 1701 	add	hl, bc
      00087F 29               [11] 1702 	add	hl, hl
      000880 11r06r03         [10] 1703 	ld	de, #_pajaros
      000883 19               [11] 1704 	add	hl, de
      000884 4D               [ 4] 1705 	ld	c, l
      000885 44               [ 4] 1706 	ld	b, h
      000886 0A               [ 7] 1707 	ld	a, (bc)
      000887 3C               [ 4] 1708 	inc	a
      000888 02               [ 7] 1709 	ld	(bc), a
                                   1710 ;main.c:54: pajaros[i].lastChangeFrame++;
      000889 59               [ 4] 1711 	ld	e, c
      00088A 50               [ 4] 1712 	ld	d, b
      00088B 13               [ 6] 1713 	inc	de
      00088C 13               [ 6] 1714 	inc	de
      00088D 13               [ 6] 1715 	inc	de
      00088E 1A               [ 7] 1716 	ld	a, (de)
      00088F 3C               [ 4] 1717 	inc	a
      000890 12               [ 7] 1718 	ld	(de), a
                                   1719 ;main.c:55: if (pajaros[i].lastChangeFrame == 20)
      000891 D6 14            [ 7] 1720 	sub	a, #0x14
      000893 20 15            [12] 1721 	jr	NZ, 00104$
                                   1722 ;main.c:57: pajaros[i].frame++;
      000895 69               [ 4] 1723 	ld	l, c
                                   1724 ;	spillPairReg hl
                                   1725 ;	spillPairReg hl
      000896 60               [ 4] 1726 	ld	h, b
                                   1727 ;	spillPairReg hl
                                   1728 ;	spillPairReg hl
      000897 23               [ 6] 1729 	inc	hl
      000898 23               [ 6] 1730 	inc	hl
      000899 7E               [ 7] 1731 	ld	a, (hl)
      00089A 3C               [ 4] 1732 	inc	a
      00089B DD 77 FE         [19] 1733 	ld	-2 (ix), a
      00089E 77               [ 7] 1734 	ld	(hl), a
                                   1735 ;main.c:58: if (pajaros[i].frame > 1)
      00089F 3E 01            [ 7] 1736 	ld	a, #0x01
      0008A1 DD 96 FE         [19] 1737 	sub	a, -2 (ix)
      0008A4 30 02            [12] 1738 	jr	NC, 00102$
                                   1739 ;main.c:59: pajaros[i].frame = 0;
      0008A6 36 00            [10] 1740 	ld	(hl), #0x00
      0008A8                       1741 00102$:
                                   1742 ;main.c:60: pajaros[i].lastChangeFrame = 0;
      0008A8 AF               [ 4] 1743 	xor	a, a
      0008A9 12               [ 7] 1744 	ld	(de), a
      0008AA                       1745 00104$:
                                   1746 ;main.c:62: numSprites = draw_entidad(&(pajaros[i]), &spritePajaro, numSprites);
      0008AA 2Ar42r03         [16] 1747 	ld	hl, (_numSprites)
      0008AD E5               [11] 1748 	push	hl
      0008AE 11r13r00         [10] 1749 	ld	de, #_spritePajaro
      0008B1 69               [ 4] 1750 	ld	l, c
                                   1751 ;	spillPairReg hl
                                   1752 ;	spillPairReg hl
      0008B2 60               [ 4] 1753 	ld	h, b
                                   1754 ;	spillPairReg hl
                                   1755 ;	spillPairReg hl
      0008B3 CDr3Ar02         [17] 1756 	call	_draw_entidad
      0008B6 EB               [ 4] 1757 	ex	de, hl
      0008B7 22r42r03         [16] 1758 	ld	(_numSprites), hl
                                   1759 ;main.c:51: for (i = 0; i < NUM_PAJAROS; i++)
      0008BA DD 34 FF         [23] 1760 	inc	-1 (ix)
      0008BD DD 7E FF         [19] 1761 	ld	a, -1 (ix)
      0008C0 D6 0A            [ 7] 1762 	sub	a, #0x0a
      0008C2 38 B2            [12] 1763 	jr	C, 00106$
                                   1764 ;main.c:64: }
      0008C4 DD F9            [10] 1765 	ld	sp, ix
      0008C6 DD E1            [14] 1766 	pop	ix
      0008C8 C9               [10] 1767 	ret
                                   1768 ;main.c:66: void playMusic() {
                                   1769 ;	---------------------------------
                                   1770 ; Function playMusic
                                   1771 ; ---------------------------------
      0008C9                       1772 _playMusic::
                                   1773 ;main.c:67: PSGFrame();
      0008C9 CDr00r00         [17] 1774 	call	_PSGFrame
                                   1775 ;main.c:68: PSGSFXFrame();
                                   1776 ;main.c:69: }
      0008CC C3r00r00         [10] 1777 	jp	_PSGSFXFrame
                                   1778 ;main.c:71: void disableSprites() {
                                   1779 ;	---------------------------------
                                   1780 ; Function disableSprites
                                   1781 ; ---------------------------------
      0008CF                       1782 _disableSprites::
                                   1783 ;main.c:74: while (i < 64) {
      0008CF 0E 00            [ 7] 1784 	ld	c, #0x00
      0008D1                       1785 00101$:
      0008D1 79               [ 4] 1786 	ld	a, c
      0008D2 D6 40            [ 7] 1787 	sub	a, #0x40
      0008D4 30 10            [12] 1788 	jr	NC, 00103$
                                   1789 ;main.c:75: SMS_updateSpritePosition(i,10,240); 
      0008D6 41               [ 4] 1790 	ld	b, c
      0008D7 C5               [11] 1791 	push	bc
      0008D8 3E F0            [ 7] 1792 	ld	a, #0xf0
      0008DA F5               [11] 1793 	push	af
      0008DB 33               [ 6] 1794 	inc	sp
      0008DC 2E 0A            [ 7] 1795 	ld	l, #0x0a
                                   1796 ;	spillPairReg hl
                                   1797 ;	spillPairReg hl
      0008DE 78               [ 4] 1798 	ld	a, b
      0008DF CDr00r00         [17] 1799 	call	_SMS_updateSpritePosition
      0008E2 C1               [10] 1800 	pop	bc
                                   1801 ;main.c:76: i++;
      0008E3 0C               [ 4] 1802 	inc	c
      0008E4 18 EB            [12] 1803 	jr	00101$
      0008E6                       1804 00103$:
                                   1805 ;main.c:78: numSprites = 0;
      0008E6 21 00 00         [10] 1806 	ld	hl, #0x0000
      0008E9 22r42r03         [16] 1807 	ld	(_numSprites), hl
                                   1808 ;main.c:79: }
      0008EC C9               [10] 1809 	ret
                                   1810 ;main.c:81: void main(void)
                                   1811 ;	---------------------------------
                                   1812 ; Function main
                                   1813 ; ---------------------------------
      0008ED                       1814 _main::
      0008ED DD E5            [15] 1815 	push	ix
      0008EF DD 21 00 00      [14] 1816 	ld	ix,#0
      0008F3 DD 39            [15] 1817 	add	ix,sp
      0008F5 F5               [11] 1818 	push	af
                                   1819 ;main.c:86: SMS_VRAMmemsetW(0, 0x0000, 16384);
      0008F6 DD 36 FF 00      [19] 1820 	ld	-1 (ix), #0x00
      0008FA DD 36 FE 00      [19] 1821 	ld	-2 (ix), #0x00
      0008FE 21 00 40         [10] 1822 	ld	hl, #0x4000
      000901 E5               [11] 1823 	push	hl
      000902 11 00 00         [10] 1824 	ld	de, #0x0000
      000905 65               [ 4] 1825 	ld	h, l
      000906 CDr00r00         [17] 1826 	call	_SMS_VRAMmemsetW
                                   1827 ;main.c:96: printf("Hello, World! [1/3]");
      000909 21rCDr09         [10] 1828 	ld	hl, #___str_0
      00090C E5               [11] 1829 	push	hl
      00090D CDr00r00         [17] 1830 	call	_printf
      000910 F1               [10] 1831 	pop	af
                                   1832 ;main.c:100: loadGrapVRAM();
      000911 CDrB0r07         [17] 1833 	call	_loadGrapVRAM
                                   1834 ;main.c:102: SMS_displayOn();
      000914 21 40 01         [10] 1835 	ld	hl, #0x0140
      000917 CDr00r00         [17] 1836 	call	_SMS_VDPturnOnFeature
                                   1837 ;main.c:103: SMS_setBGScrollX(scroll_x);
      00091A 2E 00            [ 7] 1838 	ld	l, #0x00
                                   1839 ;	spillPairReg hl
                                   1840 ;	spillPairReg hl
      00091C CDr00r00         [17] 1841 	call	_SMS_setBGScrollX
                                   1842 ;main.c:104: SMS_setBGScrollY(scroll_y);
      00091F 2E 00            [ 7] 1843 	ld	l, #0x00
                                   1844 ;	spillPairReg hl
                                   1845 ;	spillPairReg hl
      000921 CDr00r00         [17] 1846 	call	_SMS_setBGScrollY
                                   1847 ;main.c:105: SMS_init();
      000924 CDr00r00         [17] 1848 	call	_SMS_init
                                   1849 ;main.c:111: PSGPlay(special_psg);
      000927 21r00r00         [10] 1850 	ld	hl, #_special_psg
      00092A CDr00r00         [17] 1851 	call	_PSGPlay
                                   1852 ;main.c:112: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      00092D 21 20 00         [10] 1853 	ld	hl, #0x0020
      000930 CDr00r00         [17] 1854 	call	_SMS_VDPturnOnFeature
                                   1855 ;main.c:116: SMS_setFrameInterruptHandler(playMusic);
      000933 21rC9r08         [10] 1856 	ld	hl, #_playMusic
      000936 CDr00r00         [17] 1857 	call	_SMS_setFrameInterruptHandler
                                   1858 ;main.c:117: initSpritesVariables();
      000939 CDr0Br02         [17] 1859 	call	_initSpritesVariables
      00093C                       1860 00115$:
                                   1861 ;main.c:121: if (SMS_queryPauseRequested())
      00093C CDr00r00         [17] 1862 	call	_SMS_queryPauseRequested
      00093F CB 47            [ 8] 1863 	bit	0,a
      000941 28 1E            [12] 1864 	jr	Z, 00105$
                                   1865 ;main.c:123: PSGPlay(emeraldhill_psg);
      000943 21r00r00         [10] 1866 	ld	hl, #_emeraldhill_psg
      000946 CDr00r00         [17] 1867 	call	_PSGPlay
                                   1868 ;main.c:124: SMS_resetPauseRequest();
      000949 CDr00r00         [17] 1869 	call	_SMS_resetPauseRequest
                                   1870 ;main.c:125: while (!SMS_queryPauseRequested())
      00094C                       1871 00101$:
      00094C CDr00r00         [17] 1872 	call	_SMS_queryPauseRequested
      00094F CB 47            [ 8] 1873 	bit	0,a
      000951 20 05            [12] 1874 	jr	NZ, 00103$
                                   1875 ;main.c:127: SMS_waitForVBlank();
      000953 CDr00r00         [17] 1876 	call	_SMS_waitForVBlank
      000956 18 F4            [12] 1877 	jr	00101$
      000958                       1878 00103$:
                                   1879 ;main.c:131: SMS_resetPauseRequest();
      000958 CDr00r00         [17] 1880 	call	_SMS_resetPauseRequest
                                   1881 ;main.c:132: PSGPlay(titulo_psg);
      00095B 21r00r00         [10] 1882 	ld	hl, #_titulo_psg
      00095E CDr00r00         [17] 1883 	call	_PSGPlay
      000961                       1884 00105$:
                                   1885 ;main.c:136: int keys = SMS_getKeysHeld();
      000961 CDr00r00         [17] 1886 	call	_SMS_getKeysHeld
      000964 EB               [ 4] 1887 	ex	de, hl
                                   1888 ;main.c:137: if(keys & PORT_A_KEY_2)
      000965 CB 6D            [ 8] 1889 	bit	5, l
      000967 28 04            [12] 1890 	jr	Z, 00107$
                                   1891 ;main.c:138: keys = keys  ^ PORT_A_KEY_2;
      000969 7D               [ 4] 1892 	ld	a, l
      00096A EE 20            [ 7] 1893 	xor	a, #0x20
      00096C 6F               [ 4] 1894 	ld	l, a
                                   1895 ;	spillPairReg hl
                                   1896 ;	spillPairReg hl
      00096D                       1897 00107$:
                                   1898 ;main.c:139: if(keys & PORT_A_KEY_1)
      00096D CB 65            [ 8] 1899 	bit	4, l
      00096F 28 04            [12] 1900 	jr	Z, 00109$
                                   1901 ;main.c:140: keys = keys  ^ PORT_A_KEY_1;
      000971 7D               [ 4] 1902 	ld	a, l
      000972 EE 10            [ 7] 1903 	xor	a, #0x10
      000974 6F               [ 4] 1904 	ld	l, a
                                   1905 ;	spillPairReg hl
                                   1906 ;	spillPairReg hl
      000975                       1907 00109$:
                                   1908 ;main.c:142: keys = keys | (SMS_getKeysPressed() & (PORT_A_KEY_2 | PORT_A_KEY_1));
      000975 E5               [11] 1909 	push	hl
      000976 CDr00r00         [17] 1910 	call	_SMS_getKeysPressed
      000979 E1               [10] 1911 	pop	hl
      00097A 7B               [ 4] 1912 	ld	a, e
      00097B E6 30            [ 7] 1913 	and	a, #0x30
      00097D B5               [ 4] 1914 	or	a, l
      00097E 6F               [ 4] 1915 	ld	l, a
                                   1916 ;	spillPairReg hl
                                   1917 ;	spillPairReg hl
                                   1918 ;main.c:144: SMS_initSprites();
      00097F E5               [11] 1919 	push	hl
      000980 CDr00r00         [17] 1920 	call	_SMS_initSprites
      000983 E1               [10] 1921 	pop	hl
                                   1922 ;main.c:145: moveAlex(keys);
      000984 CDr31r07         [17] 1923 	call	_moveAlex
                                   1924 ;main.c:146: numSprites = draw_entidad(&alex, &spriteAlex, numSprites);
      000987 2Ar42r03         [16] 1925 	ld	hl, (_numSprites)
      00098A E5               [11] 1926 	push	hl
      00098B 11r09r00         [10] 1927 	ld	de, #_spriteAlex
      00098E 21r03r00         [10] 1928 	ld	hl, #_alex
      000991 CDr3Ar02         [17] 1929 	call	_draw_entidad
      000994 ED 53r42r03      [20] 1930 	ld	(_numSprites), de
                                   1931 ;main.c:147: dibujaPajaros();
      000998 CDr69r08         [17] 1932 	call	_dibujaPajaros
                                   1933 ;main.c:152: SMS_waitForVBlank();
      00099B CDr00r00         [17] 1934 	call	_SMS_waitForVBlank
                                   1935 ;main.c:156: SMS_copySpritestoSAT();
      00099E CDr00r00         [17] 1936 	call	_SMS_copySpritestoSAT
                                   1937 ;main.c:161: SMS_displayOff();
      0009A1 21 40 01         [10] 1938 	ld	hl, #0x0140
      0009A4 CDr00r00         [17] 1939 	call	_SMS_VDPturnOffFeature
                                   1940 ;main.c:162: if (scroll_y % 2 == 0)
      0009A7 DD CB FF 46      [20] 1941 	bit	0, -1 (ix)
      0009AB 20 03            [12] 1942 	jr	NZ, 00111$
                                   1943 ;main.c:163: scroll_x += 1;
      0009AD DD 34 FE         [23] 1944 	inc	-2 (ix)
      0009B0                       1945 00111$:
                                   1946 ;main.c:164: scroll_y++;
      0009B0 DD 34 FF         [23] 1947 	inc	-1 (ix)
                                   1948 ;main.c:165: if (scroll_y == 224)
      0009B3 DD 7E FF         [19] 1949 	ld	a, -1 (ix)
      0009B6 D6 E0            [ 7] 1950 	sub	a, #0xe0
      0009B8 20 04            [12] 1951 	jr	NZ, 00113$
                                   1952 ;main.c:166: scroll_y = 0;
      0009BA DD 36 FF 00      [19] 1953 	ld	-1 (ix), #0x00
      0009BE                       1954 00113$:
                                   1955 ;main.c:168: SMS_setBGScrollX(scroll_x);
      0009BE DD 6E FE         [19] 1956 	ld	l, -2 (ix)
                                   1957 ;	spillPairReg hl
                                   1958 ;	spillPairReg hl
      0009C1 CDr00r00         [17] 1959 	call	_SMS_setBGScrollX
                                   1960 ;main.c:170: SMS_displayOn();
      0009C4 21 40 01         [10] 1961 	ld	hl, #0x0140
      0009C7 CDr00r00         [17] 1962 	call	_SMS_VDPturnOnFeature
                                   1963 ;main.c:172: }
      0009CA C3r3Cr09         [10] 1964 	jp	00115$
      0009CD                       1965 ___str_0:
      0009CD 48 65 6C 6C 6F 2C 20  1966 	.ascii "Hello, World! [1/3]"
             57 6F 72 6C 64 21 20
             5B 31 2F 33 5D
      0009E0 00                    1967 	.db 0x00
                                   1968 	.area _CODE
      0009E1                       1969 __str_1:
      0009E1 53 45 47 41           1970 	.ascii "SEGA"
      0009E5 00                    1971 	.db 0x00
      0009E6                       1972 __str_2:
      0009E6 62 61 73 69 63 20 65  1973 	.ascii "basic example"
             78 61 6D 70 6C 65
      0009F3 00                    1974 	.db 0x00
      0009F4                       1975 __str_3:
      0009F4 41 20 73 69 6D 70 6C  1976 	.ascii "A simple example"
             65 20 65 78 61 6D 70
             6C 65
      000A04 00                    1977 	.db 0x00
                                   1978 	.area _INITIALIZER
      000000                       1979 __xinit__nextVRAMsprites:
      000000 00 01                 1980 	.dw #0x0100
      000002                       1981 __xinit__maxSalto:
      000002 FF                    1982 	.db #0xff	; 255
      000003                       1983 __xinit__alex:
      000003 1E                    1984 	.db #0x1e	; 30
      000004 14                    1985 	.db #0x14	; 20
      000005 00                    1986 	.db #0x00	; 0
      000006 00                    1987 	.db #0x00	; 0
      000007 00                    1988 	.db #0x00	; 0
      000008 00                    1989 	.db #0x00	; 0
      000009                       1990 __xinit__spriteAlex:
      000009 02                    1991 	.db #0x02	; 2
      00000A 02                    1992 	.db #0x02	; 2
      00000B 08                    1993 	.db #0x08	; 8
      00000C 00                    1994 	.db #0x00	; 0
      00000D 00 00                 1995 	.dw #0x0000
      00000F 00                    1996 	.db #0x00	; 0
      000010 00 00                 1997 	.dw #0x0000
      000012 00                    1998 	.db #0x00	; 0
      000013                       1999 __xinit__spritePajaro:
      000013 02                    2000 	.db #0x02	; 2
      000014 02                    2001 	.db #0x02	; 2
      000015 08                    2002 	.db #0x08	; 8
      000016 00                    2003 	.db #0x00	; 0
      000017 00 00                 2004 	.dw #0x0000
      000019 00                    2005 	.db #0x00	; 0
      00001A 00 00                 2006 	.dw #0x0000
      00001C 00                    2007 	.db #0x00	; 0
      00001D                       2008 __xinit__spritePuno:
      00001D 02                    2009 	.db #0x02	; 2
      00001E 02                    2010 	.db #0x02	; 2
      00001F 08                    2011 	.db #0x08	; 8
      000020 00                    2012 	.db #0x00	; 0
      000021 00 00                 2013 	.dw #0x0000
      000023 00                    2014 	.db #0x00	; 0
      000024 00 00                 2015 	.dw #0x0000
      000026 00                    2016 	.db #0x00	; 0
                                   2017 	.area _CABS (ABS)
      007FF0                       2018 	.org 0x7FF0
      007FF0                       2019 ___SMS__SEGA_signature:
      007FF0 54                    2020 	.db #0x54	; 84	'T'
      007FF1 4D                    2021 	.db #0x4d	; 77	'M'
      007FF2 52                    2022 	.db #0x52	; 82	'R'
      007FF3 20                    2023 	.db #0x20	; 32
      007FF4 53                    2024 	.db #0x53	; 83	'S'
      007FF5 45                    2025 	.db #0x45	; 69	'E'
      007FF6 47                    2026 	.db #0x47	; 71	'G'
      007FF7 41                    2027 	.db #0x41	; 65	'A'
      007FF8 FF                    2028 	.db #0xff	; 255
      007FF9 FF                    2029 	.db #0xff	; 255
      007FFA FF                    2030 	.db #0xff	; 255
      007FFB FF                    2031 	.db #0xff	; 255
      007FFC 99                    2032 	.db #0x99	; 153
      007FFD 09                    2033 	.db #0x09	; 9
      007FFE 00                    2034 	.db #0x00	; 0
      007FFF 4C                    2035 	.db #0x4c	; 76	'L'
      007FDB                       2036 	.org 0x7FDB
      007FDB                       2037 ___SMS__SDSC_author:
      007FDB 53 45 47 41           2038 	.ascii "SEGA"
      007FDF 00                    2039 	.db 0x00
      007FCD                       2040 	.org 0x7FCD
      007FCD                       2041 ___SMS__SDSC_name:
      007FCD 62 61 73 69 63 20 65  2042 	.ascii "basic example"
             78 61 6D 70 6C 65
      007FDA 00                    2043 	.db 0x00
      007FBC                       2044 	.org 0x7FBC
      007FBC                       2045 ___SMS__SDSC_descr:
      007FBC 41 20 73 69 6D 70 6C  2046 	.ascii "A simple example"
             65 20 65 78 61 6D 70
             6C 65
      007FCC 00                    2047 	.db 0x00
      007FE0                       2048 	.org 0x7FE0
      007FE0                       2049 ___SMS__SDSC_signature:
      007FE0 53                    2050 	.db #0x53	; 83	'S'
      007FE1 44                    2051 	.db #0x44	; 68	'D'
      007FE2 53                    2052 	.db #0x53	; 83	'S'
      007FE3 43                    2053 	.db #0x43	; 67	'C'
      007FE4 01                    2054 	.db #0x01	; 1
      007FE5 00                    2055 	.db #0x00	; 0
      007FE6 00                    2056 	.db #0x00	; 0
      007FE7 00                    2057 	.db #0x00	; 0
      007FE8 00                    2058 	.db #0x00	; 0
      007FE9 00                    2059 	.db #0x00	; 0
      007FEA DB                    2060 	.db #0xdb	; 219
      007FEB 7F                    2061 	.db #0x7f	; 127
      007FEC CD                    2062 	.db #0xcd	; 205
      007FED 7F                    2063 	.db #0x7f	; 127
      007FEE BC                    2064 	.db #0xbc	; 188
      007FEF 7F                    2065 	.db #0x7f	; 127
