                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14549 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___SMS__SDSC_signature
                                     12 	.globl ___SMS__SDSC_descr
                                     13 	.globl ___SMS__SDSC_name
                                     14 	.globl ___SMS__SDSC_author
                                     15 	.globl ___SMS__SEGA_signature
                                     16 	.globl _main
                                     17 	.globl _playMusic
                                     18 	.globl _dibujaPajaros
                                     19 	.globl _loadGrapVRAM
                                     20 	.globl _inicializaPajaros
                                     21 	.globl _moveAlex
                                     22 	.globl _moveAlexAire
                                     23 	.globl _moveAlexSuelo
                                     24 	.globl _canRight
                                     25 	.globl _canLeft
                                     26 	.globl _canDown
                                     27 	.globl _canUp
                                     28 	.globl _PSGSFXFrame
                                     29 	.globl _PSGFrame
                                     30 	.globl _PSGSFXPlay
                                     31 	.globl _PSGPlay
                                     32 	.globl _SMS_VRAMmemsetW
                                     33 	.globl _SMS_VRAMmemcpy
                                     34 	.globl _SMS_setFrameInterruptHandler
                                     35 	.globl _SMS_resetPauseRequest
                                     36 	.globl _SMS_queryPauseRequested
                                     37 	.globl _SMS_getKeysHeld
                                     38 	.globl _SMS_getKeysPressed
                                     39 	.globl _SMS_loadSpritePalette
                                     40 	.globl _SMS_loadBGPalette
                                     41 	.globl _SMS_copySpritestoSAT
                                     42 	.globl _SMS_finalizeSprites
                                     43 	.globl _SMS_addSprite_f
                                     44 	.globl _SMS_initSprites
                                     45 	.globl _SMS_waitForVBlank
                                     46 	.globl _SMS_setSpriteMode
                                     47 	.globl _SMS_setBGScrollY
                                     48 	.globl _SMS_setBGScrollX
                                     49 	.globl _SMS_VDPturnOffFeature
                                     50 	.globl _SMS_VDPturnOnFeature
                                     51 	.globl _SMS_init
                                     52 	.globl _printf
                                     53 	.globl _spritePuno
                                     54 	.globl _spritePajaro
                                     55 	.globl _spriteAlex
                                     56 	.globl _alex
                                     57 	.globl _maxSalto
                                     58 	.globl _nextVRAMsprites
                                     59 	.globl _pajaros
                                     60 	.globl _SMS_SRAM
                                     61 	.globl _SRAM_bank_to_be_mapped_on_slot2
                                     62 	.globl _ROM_bank_to_be_mapped_on_slot0
                                     63 	.globl _ROM_bank_to_be_mapped_on_slot1
                                     64 	.globl _ROM_bank_to_be_mapped_on_slot2
                                     65 	.globl _generateSprite
                                     66 	.globl _generateSpriteNoRAM
                                     67 	.globl _draw_entidad
                                     68 ;--------------------------------------------------------
                                     69 ; special function registers
                                     70 ;--------------------------------------------------------
                                     71 ;--------------------------------------------------------
                                     72 ; ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area _DATA
                           00FFFF    75 _ROM_bank_to_be_mapped_on_slot2	=	0xffff
                           00FFFE    76 _ROM_bank_to_be_mapped_on_slot1	=	0xfffe
                           00FFFD    77 _ROM_bank_to_be_mapped_on_slot0	=	0xfffd
                           00FFFC    78 _SRAM_bank_to_be_mapped_on_slot2	=	0xfffc
                           008000    79 _SMS_SRAM	=	0x8000
      000000                         80 _pajaros::
      000000                         81 	.ds 60
                                     82 ;--------------------------------------------------------
                                     83 ; ram data
                                     84 ;--------------------------------------------------------
                                     85 	.area _INITIALIZED
      000000                         86 _nextVRAMsprites::
      000000                         87 	.ds 2
      000002                         88 _maxSalto::
      000002                         89 	.ds 1
      000003                         90 _alex::
      000003                         91 	.ds 6
      000009                         92 _spriteAlex::
      000009                         93 	.ds 10
      000013                         94 _spritePajaro::
      000013                         95 	.ds 10
      00001D                         96 _spritePuno::
      00001D                         97 	.ds 10
                                     98 ;--------------------------------------------------------
                                     99 ; absolute external ram data
                                    100 ;--------------------------------------------------------
                                    101 	.area _DABS (ABS)
                                    102 ;--------------------------------------------------------
                                    103 ; global & static initialisations
                                    104 ;--------------------------------------------------------
                                    105 	.area _HOME
                                    106 	.area _GSINIT
                                    107 	.area _GSFINAL
                                    108 	.area _GSINIT
                                    109 ;--------------------------------------------------------
                                    110 ; Home
                                    111 ;--------------------------------------------------------
                                    112 	.area _HOME
                                    113 	.area _HOME
                                    114 ;--------------------------------------------------------
                                    115 ; code
                                    116 ;--------------------------------------------------------
                                    117 	.area _CODE
                                    118 ;./lib/./sprite.c:18: T_sprite generateSprite(unsigned char ancho, unsigned char alto, int tam,const unsigned char data[]) {
                                    119 ;	---------------------------------
                                    120 ; Function generateSprite
                                    121 ; ---------------------------------
      000000                        122 _generateSprite::
      000000 DD E5            [15]  123 	push	ix
      000002 DD 21 00 00      [14]  124 	ld	ix,#0
      000006 DD 39            [15]  125 	add	ix,sp
      000008 FD 21 F6 FF      [14]  126 	ld	iy, #-10
      00000C FD 39            [15]  127 	add	iy, sp
      00000E FD F9            [10]  128 	ld	sp, iy
      000010 5F               [ 4]  129 	ld	e, a
      000011 55               [ 4]  130 	ld	d, l
                                    131 ;./lib/./sprite.c:19: unsigned char tamano = alto*ancho*2;
      000012 D5               [11]  132 	push	de
      000013 62               [ 4]  133 	ld	h, d
                                    134 ;	spillPairReg hl
                                    135 ;	spillPairReg hl
      000014 2E 00            [ 7]  136 	ld	l, #0x00
      000016 55               [ 4]  137 	ld	d, l
      000017 06 08            [ 7]  138 	ld	b, #0x08
      000019                        139 00103$:
      000019 29               [11]  140 	add	hl, hl
      00001A 30 01            [12]  141 	jr	NC, 00104$
      00001C 19               [11]  142 	add	hl, de
      00001D                        143 00104$:
      00001D 10 FA            [13]  144 	djnz	00103$
      00001F D1               [10]  145 	pop	de
      000020 4D               [ 4]  146 	ld	c, l
      000021 CB 21            [ 8]  147 	sla	c
                                    148 ;./lib/./sprite.c:20: T_sprite sprite = {alto,ancho,tamano,tam/(tamano*32),nextVRAMsprites, 1,0};
      000023 DD 72 F6         [19]  149 	ld	-10 (ix), d
      000026 DD 73 F7         [19]  150 	ld	-9 (ix), e
      000029 DD 71 F8         [19]  151 	ld	-8 (ix), c
      00002C 69               [ 4]  152 	ld	l, c
                                    153 ;	spillPairReg hl
                                    154 ;	spillPairReg hl
      00002D 26 00            [ 7]  155 	ld	h, #0x00
                                    156 ;	spillPairReg hl
                                    157 ;	spillPairReg hl
      00002F 29               [11]  158 	add	hl, hl
      000030 29               [11]  159 	add	hl, hl
      000031 29               [11]  160 	add	hl, hl
      000032 29               [11]  161 	add	hl, hl
      000033 29               [11]  162 	add	hl, hl
      000034 C5               [11]  163 	push	bc
      000035 EB               [ 4]  164 	ex	de, hl
      000036 DD 6E 06         [19]  165 	ld	l, 6 (ix)
                                    166 ;	spillPairReg hl
                                    167 ;	spillPairReg hl
      000039 DD 66 07         [19]  168 	ld	h, 7 (ix)
                                    169 ;	spillPairReg hl
                                    170 ;	spillPairReg hl
      00003C CDr00r00         [17]  171 	call	__divsint
      00003F C1               [10]  172 	pop	bc
      000040 DD 73 F9         [19]  173 	ld	-7 (ix), e
      000043 3Ar00r00         [13]  174 	ld	a, (_nextVRAMsprites+0)
      000046 DD 77 FA         [19]  175 	ld	-6 (ix), a
      000049 3Ar01r00         [13]  176 	ld	a, (_nextVRAMsprites+1)
      00004C DD 77 FB         [19]  177 	ld	-5 (ix), a
      00004F DD 36 FC 01      [19]  178 	ld	-4 (ix), #0x01
      000053 AF               [ 4]  179 	xor	a, a
      000054 DD 77 FD         [19]  180 	ld	-3 (ix), a
      000057 DD 77 FE         [19]  181 	ld	-2 (ix), a
      00005A DD 36 FF 00      [19]  182 	ld	-1 (ix), #0x00
                                    183 ;./lib/./sprite.c:21: SMS_loadTiles(data,nextVRAMsprites,tam);
      00005E DD 5E 08         [19]  184 	ld	e, 8 (ix)
      000061 DD 56 09         [19]  185 	ld	d, 9 (ix)
      000064 2Ar00r00         [16]  186 	ld	hl, (_nextVRAMsprites)
      000067 29               [11]  187 	add	hl, hl
      000068 29               [11]  188 	add	hl, hl
      000069 29               [11]  189 	add	hl, hl
      00006A 29               [11]  190 	add	hl, hl
      00006B 29               [11]  191 	add	hl, hl
      00006C CB F4            [ 8]  192 	set	6, h
      00006E C5               [11]  193 	push	bc
      00006F E5               [11]  194 	push	hl
      000070 DD 6E 06         [19]  195 	ld	l, 6 (ix)
                                    196 ;	spillPairReg hl
                                    197 ;	spillPairReg hl
      000073 DD 66 07         [19]  198 	ld	h, 7 (ix)
                                    199 ;	spillPairReg hl
                                    200 ;	spillPairReg hl
      000076 E3               [19]  201 	ex	(sp), hl
      000077 CDr00r00         [17]  202 	call	_SMS_VRAMmemcpy
      00007A C1               [10]  203 	pop	bc
                                    204 ;./lib/./sprite.c:22: nextVRAMsprites = nextVRAMsprites + (tamano*sprite.numFrames);
      00007B DD 5E F9         [19]  205 	ld	e, -7 (ix)
      00007E 61               [ 4]  206 	ld	h, c
                                    207 ;	spillPairReg hl
                                    208 ;	spillPairReg hl
      00007F 2E 00            [ 7]  209 	ld	l, #0x00
      000081 55               [ 4]  210 	ld	d, l
      000082 06 08            [ 7]  211 	ld	b, #0x08
      000084                        212 00105$:
      000084 29               [11]  213 	add	hl, hl
      000085 30 01            [12]  214 	jr	NC, 00106$
      000087 19               [11]  215 	add	hl, de
      000088                        216 00106$:
      000088 10 FA            [13]  217 	djnz	00105$
      00008A EB               [ 4]  218 	ex	de, hl
      00008B 21r00r00         [10]  219 	ld	hl, #_nextVRAMsprites
      00008E 7E               [ 7]  220 	ld	a, (hl)
      00008F 83               [ 4]  221 	add	a, e
      000090 77               [ 7]  222 	ld	(hl), a
      000091 23               [ 6]  223 	inc	hl
      000092 7E               [ 7]  224 	ld	a, (hl)
      000093 8A               [ 4]  225 	adc	a, d
      000094 77               [ 7]  226 	ld	(hl), a
                                    227 ;./lib/./sprite.c:23: return sprite;
      000095 21 0E 00         [10]  228 	ld	hl, #14
      000098 39               [11]  229 	add	hl, sp
      000099 5E               [ 7]  230 	ld	e, (hl)
      00009A 23               [ 6]  231 	inc	hl
      00009B 56               [ 7]  232 	ld	d, (hl)
      00009C 21 00 00         [10]  233 	ld	hl, #0
      00009F 39               [11]  234 	add	hl, sp
      0000A0 01 0A 00         [10]  235 	ld	bc, #10
      0000A3 ED B0            [21]  236 	ldir
                                    237 ;./lib/./sprite.c:24: }
      0000A5 DD F9            [10]  238 	ld	sp, ix
      0000A7 DD E1            [14]  239 	pop	ix
      0000A9 C9               [10]  240 	ret
                                    241 ;./lib/./sprite.c:26: T_sprite generateSpriteNoRAM(unsigned char ancho, unsigned char alto, int tam,const unsigned char data[]) {
                                    242 ;	---------------------------------
                                    243 ; Function generateSpriteNoRAM
                                    244 ; ---------------------------------
      0000AA                        245 _generateSpriteNoRAM::
      0000AA DD E5            [15]  246 	push	ix
      0000AC DD 21 00 00      [14]  247 	ld	ix,#0
      0000B0 DD 39            [15]  248 	add	ix,sp
      0000B2 FD 21 F4 FF      [14]  249 	ld	iy, #-12
      0000B6 FD 39            [15]  250 	add	iy, sp
      0000B8 FD F9            [10]  251 	ld	sp, iy
      0000BA 5F               [ 4]  252 	ld	e, a
      0000BB 55               [ 4]  253 	ld	d, l
                                    254 ;./lib/./sprite.c:27: unsigned char tamano = alto*ancho*2;
      0000BC D5               [11]  255 	push	de
      0000BD 62               [ 4]  256 	ld	h, d
                                    257 ;	spillPairReg hl
                                    258 ;	spillPairReg hl
      0000BE 2E 00            [ 7]  259 	ld	l, #0x00
      0000C0 55               [ 4]  260 	ld	d, l
      0000C1 06 08            [ 7]  261 	ld	b, #0x08
      0000C3                        262 00103$:
      0000C3 29               [11]  263 	add	hl, hl
      0000C4 30 01            [12]  264 	jr	NC, 00104$
      0000C6 19               [11]  265 	add	hl, de
      0000C7                        266 00104$:
      0000C7 10 FA            [13]  267 	djnz	00103$
      0000C9 D1               [10]  268 	pop	de
      0000CA 4D               [ 4]  269 	ld	c, l
      0000CB CB 21            [ 8]  270 	sla	c
                                    271 ;./lib/./sprite.c:28: T_sprite sprite = {alto,ancho,tamano,tam/(tamano*32),nextVRAMsprites, 0,0};
      0000CD DD 72 F4         [19]  272 	ld	-12 (ix), d
      0000D0 DD 73 F5         [19]  273 	ld	-11 (ix), e
      0000D3 DD 71 F6         [19]  274 	ld	-10 (ix), c
                                    275 ;	spillPairReg hl
                                    276 ;	spillPairReg hl
      0000D6 DD 71 FE         [19]  277 	ld	-2 (ix), c
      0000D9 DD 36 FF 00      [19]  278 	ld	-1 (ix), #0x00
      0000DD 69               [ 4]  279 	ld	l, c
      0000DE 26 00            [ 7]  280 	ld	h, #0x00
                                    281 ;	spillPairReg hl
                                    282 ;	spillPairReg hl
      0000E0 29               [11]  283 	add	hl, hl
      0000E1 29               [11]  284 	add	hl, hl
      0000E2 29               [11]  285 	add	hl, hl
      0000E3 29               [11]  286 	add	hl, hl
      0000E4 29               [11]  287 	add	hl, hl
      0000E5 EB               [ 4]  288 	ex	de,hl
      0000E6 D5               [11]  289 	push	de
      0000E7 DD 6E 06         [19]  290 	ld	l, 6 (ix)
                                    291 ;	spillPairReg hl
                                    292 ;	spillPairReg hl
      0000EA DD 66 07         [19]  293 	ld	h, 7 (ix)
                                    294 ;	spillPairReg hl
                                    295 ;	spillPairReg hl
      0000ED CDr00r00         [17]  296 	call	__divsint
      0000F0 EB               [ 4]  297 	ex	de, hl
      0000F1 D1               [10]  298 	pop	de
      0000F2 DD 75 F7         [19]  299 	ld	-9 (ix), l
      0000F5 3Ar00r00         [13]  300 	ld	a, (_nextVRAMsprites+0)
      0000F8 DD 77 F8         [19]  301 	ld	-8 (ix), a
      0000FB 3Ar01r00         [13]  302 	ld	a, (_nextVRAMsprites+1)
      0000FE DD 77 F9         [19]  303 	ld	-7 (ix), a
      000101 DD 36 FA 00      [19]  304 	ld	-6 (ix), #0x00
      000105 AF               [ 4]  305 	xor	a, a
      000106 DD 77 FB         [19]  306 	ld	-5 (ix), a
      000109 DD 77 FC         [19]  307 	ld	-4 (ix), a
      00010C DD 36 FD 00      [19]  308 	ld	-3 (ix), #0x00
                                    309 ;./lib/./sprite.c:29: sprite.data = data;
      000110 DD 7E 08         [19]  310 	ld	a, 8 (ix)
      000113 DD 77 FB         [19]  311 	ld	-5 (ix), a
      000116 DD 7E 09         [19]  312 	ld	a, 9 (ix)
      000119 DD 77 FC         [19]  313 	ld	-4 (ix), a
                                    314 ;./lib/./sprite.c:30: sprite.frameInVRAM = 0;
      00011C DD 36 FD 00      [19]  315 	ld	-3 (ix), #0x00
                                    316 ;./lib/./sprite.c:31: SMS_loadTiles(data,nextVRAMsprites,tamano*32);
      000120 DD 4E 08         [19]  317 	ld	c, 8 (ix)
      000123 DD 46 09         [19]  318 	ld	b, 9 (ix)
      000126 2Ar00r00         [16]  319 	ld	hl, (_nextVRAMsprites)
      000129 29               [11]  320 	add	hl, hl
      00012A 29               [11]  321 	add	hl, hl
      00012B 29               [11]  322 	add	hl, hl
      00012C 29               [11]  323 	add	hl, hl
      00012D 29               [11]  324 	add	hl, hl
      00012E CB F4            [ 8]  325 	set	6, h
      000130 D5               [11]  326 	push	de
      000131 59               [ 4]  327 	ld	e, c
      000132 50               [ 4]  328 	ld	d, b
      000133 CDr00r00         [17]  329 	call	_SMS_VRAMmemcpy
                                    330 ;./lib/./sprite.c:32: nextVRAMsprites = nextVRAMsprites + (tamano);
      000136 21r00r00         [10]  331 	ld	hl, #_nextVRAMsprites
      000139 7E               [ 7]  332 	ld	a, (hl)
      00013A DD 86 FE         [19]  333 	add	a, -2 (ix)
      00013D 77               [ 7]  334 	ld	(hl), a
      00013E 23               [ 6]  335 	inc	hl
      00013F 7E               [ 7]  336 	ld	a, (hl)
      000140 DD 8E FF         [19]  337 	adc	a, -1 (ix)
      000143 77               [ 7]  338 	ld	(hl), a
                                    339 ;./lib/./sprite.c:33: return sprite;
      000144 21 10 00         [10]  340 	ld	hl, #16
      000147 39               [11]  341 	add	hl, sp
      000148 5E               [ 7]  342 	ld	e, (hl)
      000149 23               [ 6]  343 	inc	hl
      00014A 56               [ 7]  344 	ld	d, (hl)
      00014B 21 00 00         [10]  345 	ld	hl, #0
      00014E 39               [11]  346 	add	hl, sp
      00014F 01 0A 00         [10]  347 	ld	bc, #10
      000152 ED B0            [21]  348 	ldir
                                    349 ;./lib/./sprite.c:34: }
      000154 DD F9            [10]  350 	ld	sp, ix
      000156 DD E1            [14]  351 	pop	ix
      000158 C9               [10]  352 	ret
                                    353 ;./lib/entities.c:10: void draw_entidad(T_entidad *entidad, T_sprite *sprite){
                                    354 ;	---------------------------------
                                    355 ; Function draw_entidad
                                    356 ; ---------------------------------
      000159                        357 _draw_entidad::
      000159 DD E5            [15]  358 	push	ix
      00015B DD 21 00 00      [14]  359 	ld	ix,#0
      00015F DD 39            [15]  360 	add	ix,sp
      000161 FD 21 EF FF      [14]  361 	ld	iy, #-17
      000165 FD 39            [15]  362 	add	iy, sp
      000167 FD F9            [10]  363 	ld	sp, iy
      000169 DD 75 FC         [19]  364 	ld	-4 (ix), l
      00016C DD 74 FD         [19]  365 	ld	-3 (ix), h
                                    366 ;./lib/entities.c:12: if (sprite->allInRAM == 1){
      00016F DD 73 FA         [19]  367 	ld	-6 (ix), e
      000172 DD 72 FB         [19]  368 	ld	-5 (ix), d
      000175 4B               [ 4]  369 	ld	c, e
      000176 42               [ 4]  370 	ld	b, d
      000177 21 06 00         [10]  371 	ld	hl, #6
      00017A 09               [11]  372 	add	hl, bc
      00017B 4E               [ 7]  373 	ld	c, (hl)
                                    374 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      00017C DD 5E FA         [19]  375 	ld	e, -6 (ix)
      00017F DD 56 FB         [19]  376 	ld	d, -5 (ix)
      000182 DD 7E FC         [19]  377 	ld	a, -4 (ix)
      000185 C6 02            [ 7]  378 	add	a, #0x02
      000187 DD 77 F0         [19]  379 	ld	-16 (ix), a
      00018A DD 7E FD         [19]  380 	ld	a, -3 (ix)
      00018D CE 00            [ 7]  381 	adc	a, #0x00
      00018F DD 77 F1         [19]  382 	ld	-15 (ix), a
      000192 DD 7E FA         [19]  383 	ld	a, -6 (ix)
      000195 C6 04            [ 7]  384 	add	a, #0x04
      000197 DD 77 F2         [19]  385 	ld	-14 (ix), a
      00019A DD 7E FB         [19]  386 	ld	a, -5 (ix)
      00019D CE 00            [ 7]  387 	adc	a, #0x00
      00019F DD 77 F3         [19]  388 	ld	-13 (ix), a
                                    389 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      0001A2 DD 7E FC         [19]  390 	ld	a, -4 (ix)
      0001A5 C6 01            [ 7]  391 	add	a, #0x01
      0001A7 DD 77 F8         [19]  392 	ld	-8 (ix), a
      0001AA DD 7E FD         [19]  393 	ld	a, -3 (ix)
      0001AD CE 00            [ 7]  394 	adc	a, #0x00
      0001AF DD 77 F9         [19]  395 	ld	-7 (ix), a
      0001B2 DD 7E FA         [19]  396 	ld	a, -6 (ix)
      0001B5 C6 01            [ 7]  397 	add	a, #0x01
      0001B7 DD 77 FE         [19]  398 	ld	-2 (ix), a
      0001BA DD 7E FB         [19]  399 	ld	a, -5 (ix)
      0001BD CE 00            [ 7]  400 	adc	a, #0x00
      0001BF DD 77 FF         [19]  401 	ld	-1 (ix), a
                                    402 ;./lib/entities.c:23: int frame = sprite->tamano*entidad->frame*32;
      0001C2 DD 6E F0         [19]  403 	ld	l, -16 (ix)
      0001C5 DD 66 F1         [19]  404 	ld	h, -15 (ix)
      0001C8 7E               [ 7]  405 	ld	a, (hl)
      0001C9 DD 77 F4         [19]  406 	ld	-12 (ix), a
                                    407 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      0001CC 13               [ 6]  408 	inc	de
      0001CD 13               [ 6]  409 	inc	de
      0001CE 1A               [ 7]  410 	ld	a, (de)
      0001CF DD 77 F5         [19]  411 	ld	-11 (ix), a
                                    412 ;./lib/entities.c:12: if (sprite->allInRAM == 1){
      0001D2 0D               [ 4]  413 	dec	c
      0001D3 C2r98r02         [10]  414 	jp	NZ,00108$
                                    415 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      0001D6 DD 5E F5         [19]  416 	ld	e, -11 (ix)
      0001D9 DD 66 F4         [19]  417 	ld	h, -12 (ix)
                                    418 ;	spillPairReg hl
                                    419 ;	spillPairReg hl
      0001DC 2E 00            [ 7]  420 	ld	l, #0x00
      0001DE 55               [ 4]  421 	ld	d, l
      0001DF 06 08            [ 7]  422 	ld	b, #0x08
      0001E1                        423 00200$:
      0001E1 29               [11]  424 	add	hl, hl
      0001E2 30 01            [12]  425 	jr	NC, 00201$
      0001E4 19               [11]  426 	add	hl, de
      0001E5                        427 00201$:
      0001E5 10 FA            [13]  428 	djnz	00200$
      0001E7 4D               [ 4]  429 	ld	c, l
      0001E8 DD 6E F2         [19]  430 	ld	l, -14 (ix)
      0001EB DD 66 F3         [19]  431 	ld	h, -13 (ix)
      0001EE 7E               [ 7]  432 	ld	a, (hl)
      0001EF 81               [ 4]  433 	add	a, c
      0001F0 DD 77 EF         [19]  434 	ld	-17 (ix), a
                                    435 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      0001F3 DD 7E F8         [19]  436 	ld	a, -8 (ix)
      0001F6 DD 77 F0         [19]  437 	ld	-16 (ix), a
      0001F9 DD 7E F9         [19]  438 	ld	a, -7 (ix)
      0001FC DD 77 F1         [19]  439 	ld	-15 (ix), a
      0001FF DD 7E FE         [19]  440 	ld	a, -2 (ix)
      000202 DD 77 F2         [19]  441 	ld	-14 (ix), a
      000205 DD 7E FF         [19]  442 	ld	a, -1 (ix)
      000208 DD 77 F3         [19]  443 	ld	-13 (ix), a
      00020B DD 36 FE 00      [19]  444 	ld	-2 (ix), #0x00
      00020F                        445 00114$:
      00020F DD 6E FA         [19]  446 	ld	l, -6 (ix)
      000212 DD 66 FB         [19]  447 	ld	h, -5 (ix)
      000215 DD 7E FE         [19]  448 	ld	a,-2 (ix)
      000218 96               [ 7]  449 	sub	a,(hl)
      000219 D2r84r03         [10]  450 	jp	NC, 00122$
                                    451 ;./lib/entities.c:15: unsigned char desplazado = (j<<2);
      00021C DD 7E FE         [19]  452 	ld	a, -2 (ix)
      00021F 87               [ 4]  453 	add	a, a
      000220 87               [ 4]  454 	add	a, a
                                    455 ;./lib/entities.c:16: unsigned char jCalculated = desplazado + frame, y = entidad->y+(desplazado<<2);
      000221 47               [ 4]  456 	ld	b, a
      000222 DD 86 EF         [19]  457 	add	a, -17 (ix)
      000225 DD 77 F4         [19]  458 	ld	-12 (ix), a
      000228 DD 6E F0         [19]  459 	ld	l, -16 (ix)
      00022B DD 66 F1         [19]  460 	ld	h, -15 (ix)
      00022E 4E               [ 7]  461 	ld	c, (hl)
      00022F 78               [ 4]  462 	ld	a, b
      000230 87               [ 4]  463 	add	a, a
      000231 87               [ 4]  464 	add	a, a
      000232 81               [ 4]  465 	add	a, c
      000233 DD 77 F5         [19]  466 	ld	-11 (ix), a
                                    467 ;./lib/entities.c:17: for(i=0;i<sprite->ancho;i++) {
      000236 DD 36 FF 00      [19]  468 	ld	-1 (ix), #0x00
      00023A                        469 00111$:
      00023A DD 6E F2         [19]  470 	ld	l, -14 (ix)
      00023D DD 66 F3         [19]  471 	ld	h, -13 (ix)
      000240 DD 7E FF         [19]  472 	ld	a,-1 (ix)
      000243 96               [ 7]  473 	sub	a,(hl)
      000244 30 4C            [12]  474 	jr	NC, 00115$
                                    475 ;./lib/entities.c:18: SMS_addSprite(entidad->x+(i<<3),y, jCalculated + (i<<1) );  
      000246 DD 6E FC         [19]  476 	ld	l, -4 (ix)
      000249 DD 66 FD         [19]  477 	ld	h, -3 (ix)
      00024C 7E               [ 7]  478 	ld	a, (hl)
      00024D DD 77 F9         [19]  479 	ld	-7 (ix), a
      000250 DD 77 F6         [19]  480 	ld	-10 (ix), a
      000253 DD 36 F7 00      [19]  481 	ld	-9 (ix), #0x00
      000257 DD 7E FF         [19]  482 	ld	a, -1 (ix)
      00025A DD 77 F8         [19]  483 	ld	-8 (ix), a
      00025D DD 36 F9 00      [19]  484 	ld	-7 (ix), #0x00
      000261 6F               [ 4]  485 	ld	l, a
      000262 26 00            [ 7]  486 	ld	h, #0x00
      000264 29               [11]  487 	add	hl, hl
      000265 29               [11]  488 	add	hl, hl
      000266 29               [11]  489 	add	hl, hl
      000267 DD 5E F6         [19]  490 	ld	e, -10 (ix)
      00026A 16 00            [ 7]  491 	ld	d, #0x00
      00026C 19               [11]  492 	add	hl, de
      00026D 45               [ 4]  493 	ld	b, l
      00026E 0E 00            [ 7]  494 	ld	c, #0x00
      000270 DD 5E F4         [19]  495 	ld	e, -12 (ix)
      000273 16 00            [ 7]  496 	ld	d, #0x00
      000275 DD 6E F8         [19]  497 	ld	l, -8 (ix)
      000278 DD 66 F9         [19]  498 	ld	h, -7 (ix)
      00027B 29               [11]  499 	add	hl, hl
      00027C 19               [11]  500 	add	hl, de
      00027D 7D               [ 4]  501 	ld	a, l
      00027E 16 00            [ 7]  502 	ld	d, #0x00
      000280 B1               [ 4]  503 	or	a, c
      000281 5F               [ 4]  504 	ld	e, a
      000282 7A               [ 4]  505 	ld	a, d
      000283 B0               [ 4]  506 	or	a, b
      000284 57               [ 4]  507 	ld	d, a
      000285 DD 6E F5         [19]  508 	ld	l, -11 (ix)
                                    509 ;	spillPairReg hl
                                    510 ;	spillPairReg hl
      000288 26 00            [ 7]  511 	ld	h, #0x00
                                    512 ;	spillPairReg hl
                                    513 ;	spillPairReg hl
      00028A CDr00r00         [17]  514 	call	_SMS_addSprite_f
                                    515 ;./lib/entities.c:17: for(i=0;i<sprite->ancho;i++) {
      00028D DD 34 FF         [23]  516 	inc	-1 (ix)
      000290 18 A8            [12]  517 	jr	00111$
      000292                        518 00115$:
                                    519 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      000292 DD 34 FE         [23]  520 	inc	-2 (ix)
      000295 C3r0Fr02         [10]  521 	jp	00114$
      000298                        522 00108$:
                                    523 ;./lib/entities.c:23: int frame = sprite->tamano*entidad->frame*32;
      000298 DD 5E F4         [19]  524 	ld	e, -12 (ix)
      00029B DD 66 F5         [19]  525 	ld	h, -11 (ix)
                                    526 ;	spillPairReg hl
                                    527 ;	spillPairReg hl
      00029E 2E 00            [ 7]  528 	ld	l, #0x00
      0002A0 55               [ 4]  529 	ld	d, l
      0002A1 06 08            [ 7]  530 	ld	b, #0x08
      0002A3                        531 00202$:
      0002A3 29               [11]  532 	add	hl, hl
      0002A4 30 01            [12]  533 	jr	NC, 00203$
      0002A6 19               [11]  534 	add	hl, de
      0002A7                        535 00203$:
      0002A7 10 FA            [13]  536 	djnz	00202$
      0002A9 29               [11]  537 	add	hl, hl
      0002AA 29               [11]  538 	add	hl, hl
      0002AB 29               [11]  539 	add	hl, hl
      0002AC 29               [11]  540 	add	hl, hl
      0002AD 29               [11]  541 	add	hl, hl
      0002AE DD 75 F6         [19]  542 	ld	-10 (ix), l
      0002B1 DD 74 F7         [19]  543 	ld	-9 (ix), h
                                    544 ;./lib/entities.c:24: if (entidad->frame != sprite->frameInVRAM){
      0002B4 DD 7E FA         [19]  545 	ld	a, -6 (ix)
      0002B7 C6 09            [ 7]  546 	add	a, #0x09
      0002B9 4F               [ 4]  547 	ld	c, a
      0002BA DD 7E FB         [19]  548 	ld	a, -5 (ix)
      0002BD CE 00            [ 7]  549 	adc	a, #0x00
      0002BF 47               [ 4]  550 	ld	b, a
      0002C0 0A               [ 7]  551 	ld	a, (bc)
      0002C1 5F               [ 4]  552 	ld	e, a
      0002C2 DD 7E F4         [19]  553 	ld	a, -12 (ix)
      0002C5 93               [ 4]  554 	sub	a, e
      0002C6 28 42            [12]  555 	jr	Z, 00133$
                                    556 ;./lib/entities.c:25: SMS_loadTiles(sprite->data + frame,sprite->beginVRAM,sprite->tamano<<5);
      0002C8 DD 6E F5         [19]  557 	ld	l, -11 (ix)
                                    558 ;	spillPairReg hl
                                    559 ;	spillPairReg hl
      0002CB 26 00            [ 7]  560 	ld	h, #0x00
                                    561 ;	spillPairReg hl
                                    562 ;	spillPairReg hl
      0002CD 29               [11]  563 	add	hl, hl
      0002CE 29               [11]  564 	add	hl, hl
      0002CF 29               [11]  565 	add	hl, hl
      0002D0 29               [11]  566 	add	hl, hl
      0002D1 29               [11]  567 	add	hl, hl
      0002D2 E5               [11]  568 	push	hl
      0002D3 FD E1            [14]  569 	pop	iy
      0002D5 DD 5E FA         [19]  570 	ld	e, -6 (ix)
      0002D8 DD 56 FB         [19]  571 	ld	d, -5 (ix)
      0002DB 21 07 00         [10]  572 	ld	hl, #7
      0002DE 19               [11]  573 	add	hl, de
      0002DF 5E               [ 7]  574 	ld	e, (hl)
      0002E0 23               [ 6]  575 	inc	hl
      0002E1 56               [ 7]  576 	ld	d, (hl)
      0002E2 DD 6E F6         [19]  577 	ld	l, -10 (ix)
                                    578 ;	spillPairReg hl
                                    579 ;	spillPairReg hl
      0002E5 DD 66 F7         [19]  580 	ld	h, -9 (ix)
                                    581 ;	spillPairReg hl
                                    582 ;	spillPairReg hl
      0002E8 19               [11]  583 	add	hl, de
      0002E9 EB               [ 4]  584 	ex	de, hl
      0002EA DD 6E F2         [19]  585 	ld	l, -14 (ix)
      0002ED DD 66 F3         [19]  586 	ld	h, -13 (ix)
      0002F0 7E               [ 7]  587 	ld	a, (hl)
      0002F1 23               [ 6]  588 	inc	hl
      0002F2 66               [ 7]  589 	ld	h, (hl)
                                    590 ;	spillPairReg hl
      0002F3 6F               [ 4]  591 	ld	l, a
                                    592 ;	spillPairReg hl
                                    593 ;	spillPairReg hl
      0002F4 29               [11]  594 	add	hl, hl
      0002F5 29               [11]  595 	add	hl, hl
      0002F6 29               [11]  596 	add	hl, hl
      0002F7 29               [11]  597 	add	hl, hl
      0002F8 29               [11]  598 	add	hl, hl
      0002F9 CB F4            [ 8]  599 	set	6, h
      0002FB C5               [11]  600 	push	bc
      0002FC FD E5            [15]  601 	push	iy
      0002FE CDr00r00         [17]  602 	call	_SMS_VRAMmemcpy
      000301 C1               [10]  603 	pop	bc
                                    604 ;./lib/entities.c:26: sprite->frameInVRAM = entidad->frame;
      000302 DD 6E F0         [19]  605 	ld	l, -16 (ix)
      000305 DD 66 F1         [19]  606 	ld	h, -15 (ix)
      000308 7E               [ 7]  607 	ld	a, (hl)
      000309 02               [ 7]  608 	ld	(bc), a
                                    609 ;./lib/entities.c:28: for(j=0;j<sprite->alto;j++) {
      00030A                        610 00133$:
      00030A DD 7E FE         [19]  611 	ld	a, -2 (ix)
      00030D DD 77 F6         [19]  612 	ld	-10 (ix), a
      000310 DD 7E FF         [19]  613 	ld	a, -1 (ix)
      000313 DD 77 F7         [19]  614 	ld	-9 (ix), a
      000316 DD 36 FF 00      [19]  615 	ld	-1 (ix), #0x00
      00031A                        616 00120$:
      00031A DD 6E FA         [19]  617 	ld	l, -6 (ix)
      00031D DD 66 FB         [19]  618 	ld	h, -5 (ix)
      000320 DD 7E FF         [19]  619 	ld	a,-1 (ix)
      000323 96               [ 7]  620 	sub	a,(hl)
      000324 30 5E            [12]  621 	jr	NC, 00122$
                                    622 ;./lib/entities.c:29: for(i=0;i<sprite->ancho;i++) {
      000326 0E 00            [ 7]  623 	ld	c, #0x00
      000328                        624 00117$:
      000328 DD 6E F6         [19]  625 	ld	l, -10 (ix)
      00032B DD 66 F7         [19]  626 	ld	h, -9 (ix)
      00032E 46               [ 7]  627 	ld	b, (hl)
      00032F 79               [ 4]  628 	ld	a, c
      000330 90               [ 4]  629 	sub	a, b
      000331 30 4C            [12]  630 	jr	NC, 00121$
                                    631 ;./lib/entities.c:30: SMS_addSprite(entidad->x+(i<<3),entidad->y+(j<<4), (j<<2) + (i<<1) );  
      000333 DD 6E FC         [19]  632 	ld	l, -4 (ix)
      000336 DD 66 FD         [19]  633 	ld	h, -3 (ix)
      000339 7E               [ 7]  634 	ld	a, (hl)
      00033A 59               [ 4]  635 	ld	e, c
      00033B 16 00            [ 7]  636 	ld	d, #0x00
      00033D 6B               [ 4]  637 	ld	l, e
      00033E 62               [ 4]  638 	ld	h, d
      00033F 29               [11]  639 	add	hl, hl
      000340 29               [11]  640 	add	hl, hl
      000341 29               [11]  641 	add	hl, hl
      000342 85               [ 4]  642 	add	a, l
                                    643 ;	spillPairReg hl
                                    644 ;	spillPairReg hl
                                    645 ;	spillPairReg hl
                                    646 ;	spillPairReg hl
      000343 67               [ 4]  647 	ld	h, a
                                    648 ;	spillPairReg hl
                                    649 ;	spillPairReg hl
      000344 2E 00            [ 7]  650 	ld	l, #0x00
                                    651 ;	spillPairReg hl
                                    652 ;	spillPairReg hl
      000346 DD 7E FF         [19]  653 	ld	a, -1 (ix)
      000349 DD 77 F4         [19]  654 	ld	-12 (ix), a
      00034C DD 36 F5 00      [19]  655 	ld	-11 (ix), #0x00
      000350 87               [ 4]  656 	add	a, a
      000351 87               [ 4]  657 	add	a, a
      000352 EB               [ 4]  658 	ex	de, hl
      000353 29               [11]  659 	add	hl, hl
      000354 EB               [ 4]  660 	ex	de, hl
      000355 83               [ 4]  661 	add	a, e
      000356 5F               [ 4]  662 	ld	e, a
      000357 16 00            [ 7]  663 	ld	d, #0x00
      000359 7B               [ 4]  664 	ld	a, e
      00035A B5               [ 4]  665 	or	a, l
      00035B 5F               [ 4]  666 	ld	e, a
      00035C 7A               [ 4]  667 	ld	a, d
      00035D B4               [ 4]  668 	or	a, h
      00035E 57               [ 4]  669 	ld	d, a
      00035F DD 6E F8         [19]  670 	ld	l, -8 (ix)
      000362 DD 66 F9         [19]  671 	ld	h, -7 (ix)
      000365 7E               [ 7]  672 	ld	a, (hl)
      000366 06 00            [ 7]  673 	ld	b, #0x00
      000368 DD 6E F4         [19]  674 	ld	l, -12 (ix)
      00036B DD 66 F5         [19]  675 	ld	h, -11 (ix)
      00036E 29               [11]  676 	add	hl, hl
      00036F 29               [11]  677 	add	hl, hl
      000370 29               [11]  678 	add	hl, hl
      000371 29               [11]  679 	add	hl, hl
      000372 85               [ 4]  680 	add	a, l
      000373 6F               [ 4]  681 	ld	l, a
                                    682 ;	spillPairReg hl
                                    683 ;	spillPairReg hl
      000374 78               [ 4]  684 	ld	a, b
      000375 8C               [ 4]  685 	adc	a, h
      000376 67               [ 4]  686 	ld	h, a
                                    687 ;	spillPairReg hl
                                    688 ;	spillPairReg hl
      000377 C5               [11]  689 	push	bc
      000378 CDr00r00         [17]  690 	call	_SMS_addSprite_f
      00037B C1               [10]  691 	pop	bc
                                    692 ;./lib/entities.c:29: for(i=0;i<sprite->ancho;i++) {
      00037C 0C               [ 4]  693 	inc	c
      00037D 18 A9            [12]  694 	jr	00117$
      00037F                        695 00121$:
                                    696 ;./lib/entities.c:28: for(j=0;j<sprite->alto;j++) {
      00037F DD 34 FF         [23]  697 	inc	-1 (ix)
      000382 18 96            [12]  698 	jr	00120$
      000384                        699 00122$:
                                    700 ;./lib/entities.c:34: }
      000384 DD F9            [10]  701 	ld	sp, ix
      000386 DD E1            [14]  702 	pop	ix
      000388 C9               [10]  703 	ret
                                    704 ;./alex.c:20: unsigned char canUp(){
                                    705 ;	---------------------------------
                                    706 ; Function canUp
                                    707 ; ---------------------------------
      000389                        708 _canUp::
                                    709 ;./alex.c:21: if (alex.x < 2)
      000389 3Ar03r00         [13]  710 	ld	a, (#_alex + 0)
      00038C D6 02            [ 7]  711 	sub	a, #0x02
      00038E 30 02            [12]  712 	jr	NC, 00102$
                                    713 ;./alex.c:22: return 0;
      000390 AF               [ 4]  714 	xor	a, a
      000391 C9               [10]  715 	ret
      000392                        716 00102$:
                                    717 ;./alex.c:23: return 1;
      000392 3E 01            [ 7]  718 	ld	a, #0x01
                                    719 ;./alex.c:24: }
      000394 C9               [10]  720 	ret
                                    721 ;./alex.c:26: unsigned char canDown() {
                                    722 ;	---------------------------------
                                    723 ; Function canDown
                                    724 ; ---------------------------------
      000395                        725 _canDown::
                                    726 ;./alex.c:27: if (alex.y > 155)
      000395 21r04r00         [10]  727 	ld	hl, #_alex+1
      000398 4E               [ 7]  728 	ld	c, (hl)
      000399 3E 9B            [ 7]  729 	ld	a, #0x9b
      00039B 91               [ 4]  730 	sub	a, c
      00039C 30 02            [12]  731 	jr	NC, 00102$
                                    732 ;./alex.c:28: return 0;
      00039E AF               [ 4]  733 	xor	a, a
      00039F C9               [10]  734 	ret
      0003A0                        735 00102$:
                                    736 ;./alex.c:29: return 1;
      0003A0 3E 01            [ 7]  737 	ld	a, #0x01
                                    738 ;./alex.c:30: }
      0003A2 C9               [10]  739 	ret
                                    740 ;./alex.c:32: unsigned char canLeft() {
                                    741 ;	---------------------------------
                                    742 ; Function canLeft
                                    743 ; ---------------------------------
      0003A3                        744 _canLeft::
                                    745 ;./alex.c:33: if (alex.x < 9)
      0003A3 3Ar03r00         [13]  746 	ld	a, (#_alex + 0)
      0003A6 D6 09            [ 7]  747 	sub	a, #0x09
      0003A8 30 02            [12]  748 	jr	NC, 00102$
                                    749 ;./alex.c:34: return 0;
      0003AA AF               [ 4]  750 	xor	a, a
      0003AB C9               [10]  751 	ret
      0003AC                        752 00102$:
                                    753 ;./alex.c:35: return 1;
      0003AC 3E 01            [ 7]  754 	ld	a, #0x01
                                    755 ;./alex.c:36: }
      0003AE C9               [10]  756 	ret
                                    757 ;./alex.c:38: unsigned char canRight() {
                                    758 ;	---------------------------------
                                    759 ; Function canRight
                                    760 ; ---------------------------------
      0003AF                        761 _canRight::
                                    762 ;./alex.c:39: if (alex.x > 238)
      0003AF 21r03r00         [10]  763 	ld	hl, #_alex+0
      0003B2 4E               [ 7]  764 	ld	c, (hl)
      0003B3 3E EE            [ 7]  765 	ld	a, #0xee
      0003B5 91               [ 4]  766 	sub	a, c
      0003B6 30 02            [12]  767 	jr	NC, 00102$
                                    768 ;./alex.c:40: return 0;
      0003B8 AF               [ 4]  769 	xor	a, a
      0003B9 C9               [10]  770 	ret
      0003BA                        771 00102$:
                                    772 ;./alex.c:41: return 1;
      0003BA 3E 01            [ 7]  773 	ld	a, #0x01
                                    774 ;./alex.c:42: }
      0003BC C9               [10]  775 	ret
                                    776 ;./alex.c:44: void moveAlexSuelo(int keys) {
                                    777 ;	---------------------------------
                                    778 ; Function moveAlexSuelo
                                    779 ; ---------------------------------
      0003BD                        780 _moveAlexSuelo::
      0003BD DD E5            [15]  781 	push	ix
      0003BF DD 21 00 00      [14]  782 	ld	ix,#0
      0003C3 DD 39            [15]  783 	add	ix,sp
      0003C5 F5               [11]  784 	push	af
      0003C6 F5               [11]  785 	push	af
      0003C7 F5               [11]  786 	push	af
      0003C8 DD 75 FE         [19]  787 	ld	-2 (ix), l
      0003CB DD 74 FF         [19]  788 	ld	-1 (ix), h
                                    789 ;./alex.c:46: if (keys & PORT_A_KEY_LEFT)
      0003CE DD 7E FE         [19]  790 	ld	a, -2 (ix)
      0003D1 E6 04            [ 7]  791 	and	a, #0x04
      0003D3 DD 77 FA         [19]  792 	ld	-6 (ix), a
      0003D6 DD 36 FB 00      [19]  793 	ld	-5 (ix), #0x00
                                    794 ;./alex.c:48: if (keys & PORT_A_KEY_RIGHT)
      0003DA DD 7E FE         [19]  795 	ld	a, -2 (ix)
      0003DD E6 08            [ 7]  796 	and	a, #0x08
      0003DF DD 77 FC         [19]  797 	ld	-4 (ix), a
      0003E2 DD 36 FD 00      [19]  798 	ld	-3 (ix), #0x00
                                    799 ;./alex.c:45: if ((keys & PORT_A_KEY_DOWN)){
      0003E6 DD CB FE 4E      [20]  800 	bit	1, -2 (ix)
      0003EA 28 33            [12]  801 	jr	Z, 00109$
                                    802 ;./alex.c:46: if (keys & PORT_A_KEY_LEFT)
      0003EC AF               [ 4]  803 	xor	a, a
      0003ED DD B6 FA         [19]  804 	or	a, -6 (ix)
      0003F0 28 05            [12]  805 	jr	Z, 00102$
                                    806 ;./alex.c:47: alex.oriented = 1;
      0003F2 21r07r00         [10]  807 	ld	hl, #_alex+4
      0003F5 36 01            [10]  808 	ld	(hl), #0x01
      0003F7                        809 00102$:
                                    810 ;./alex.c:48: if (keys & PORT_A_KEY_RIGHT)
      0003F7 AF               [ 4]  811 	xor	a, a
      0003F8 DD B6 FC         [19]  812 	or	a, -4 (ix)
      0003FB 28 05            [12]  813 	jr	Z, 00104$
                                    814 ;./alex.c:49: alex.oriented = 0;
      0003FD 21r07r00         [10]  815 	ld	hl, #_alex+4
      000400 36 00            [10]  816 	ld	(hl), #0x00
      000402                        817 00104$:
                                    818 ;./alex.c:50: if (!alex.oriented)
      000402 3Ar07r00         [13]  819 	ld	a,(#_alex + 4)
                                    820 ;./alex.c:51: alex.frame = 7;
                                    821 ;./alex.c:50: if (!alex.oriented)
      000405 DD 77 FD         [19]  822 	ld	-3 (ix), a
      000408 B7               [ 4]  823 	or	a, a
      000409 20 07            [12]  824 	jr	NZ, 00106$
                                    825 ;./alex.c:51: alex.frame = 7;
      00040B 21r05r00         [10]  826 	ld	hl, #(_alex + 2)
      00040E 36 07            [10]  827 	ld	(hl), #0x07
      000410 18 05            [12]  828 	jr	00107$
      000412                        829 00106$:
                                    830 ;./alex.c:53: alex.frame = 15;
      000412 21r05r00         [10]  831 	ld	hl, #(_alex + 2)
      000415 36 0F            [10]  832 	ld	(hl), #0x0f
      000417                        833 00107$:
                                    834 ;./alex.c:54: alex.lastChangeFrame = 15;
      000417 21r06r00         [10]  835 	ld	hl, #_alex + 3
      00041A 36 0F            [10]  836 	ld	(hl), #0x0f
                                    837 ;./alex.c:55: return; // not move
      00041C C3r35r05         [10]  838 	jp	00146$
      00041F                        839 00109$:
                                    840 ;./alex.c:58: if (keys & PORT_A_KEY_2) {
      00041F DD CB FE 6E      [20]  841 	bit	5, -2 (ix)
      000423 28 2A            [12]  842 	jr	Z, 00116$
                                    843 ;./alex.c:59: if (alex.y > 100)
      000425 01r04r00         [10]  844 	ld	bc, #_alex+1
      000428 0A               [ 7]  845 	ld	a, (bc)
      000429 5F               [ 4]  846 	ld	e, a
      00042A 3E 64            [ 7]  847 	ld	a, #0x64
      00042C 93               [ 4]  848 	sub	a, e
      00042D 30 09            [12]  849 	jr	NC, 00111$
                                    850 ;./alex.c:60: maxSalto = alex.y - 100;
      00042F 7B               [ 4]  851 	ld	a, e
      000430 21r02r00         [10]  852 	ld	hl, #_maxSalto
      000433 C6 9C            [ 7]  853 	add	a, #0x9c
      000435 77               [ 7]  854 	ld	(hl), a
      000436 18 05            [12]  855 	jr	00112$
      000438                        856 00111$:
                                    857 ;./alex.c:62: maxSalto = 0;
      000438 21r02r00         [10]  858 	ld	hl, #_maxSalto
      00043B 36 00            [10]  859 	ld	(hl), #0x00
      00043D                        860 00112$:
                                    861 ;./alex.c:63: alex.y--;
      00043D 0A               [ 7]  862 	ld	a, (bc)
      00043E 3D               [ 4]  863 	dec	a
      00043F 02               [ 7]  864 	ld	(bc), a
                                    865 ;./alex.c:64: alex.y--;
      000440 3D               [ 4]  866 	dec	a
      000441 02               [ 7]  867 	ld	(bc), a
                                    868 ;./alex.c:65: PSGSFXPlay(salto_psg, SFX_CHANNEL1);
      000442 3E 08            [ 7]  869 	ld	a, #0x08
      000444 F5               [11]  870 	push	af
      000445 33               [ 6]  871 	inc	sp
      000446 21r00r00         [10]  872 	ld	hl, #_salto_psg
      000449 CDr00r00         [17]  873 	call	_PSGSFXPlay
                                    874 ;./alex.c:66: return;
      00044C C3r35r05         [10]  875 	jp	00146$
      00044F                        876 00116$:
                                    877 ;./alex.c:68: else if (keys & PORT_A_KEY_1) {
      00044F DD CB FE 66      [20]  878 	bit	4, -2 (ix)
      000453 28 0A            [12]  879 	jr	Z, 00117$
                                    880 ;./alex.c:69: alex.state = PUÑETAZO_SUELO;
      000455 21r08r00         [10]  881 	ld	hl, #_alex + 5
      000458 36 20            [10]  882 	ld	(hl), #0x20
                                    883 ;./alex.c:70: alex.lastChangeFrame = 15;
      00045A 21r06r00         [10]  884 	ld	hl, #_alex + 3
      00045D 36 0F            [10]  885 	ld	(hl), #0x0f
      00045F                        886 00117$:
                                    887 ;./alex.c:72: if(alex.state != PUÑETAZO_SUELO) {
      00045F 21r08r00         [10]  888 	ld	hl, #(_alex + 5)
      000462 6E               [ 7]  889 	ld	l, (hl)
                                    890 ;	spillPairReg hl
                                    891 ;./alex.c:76: alex.oriented = 1;
                                    892 ;./alex.c:77: alex.lastChangeFrame++;
      000463 01r06r00         [10]  893 	ld	bc, #_alex + 3
                                    894 ;./alex.c:80: alex.frame++;
      000466 11r05r00         [10]  895 	ld	de, #_alex + 2
                                    896 ;./alex.c:72: if(alex.state != PUÑETAZO_SUELO) {
      000469 7D               [ 4]  897 	ld	a, l
      00046A D6 20            [ 7]  898 	sub	a, #0x20
      00046C 28 76            [12]  899 	jr	Z, 00144$
                                    900 ;./alex.c:73: if ((keys & PORT_A_KEY_LEFT) && alex.x > 8 )
      00046E AF               [ 4]  901 	xor	a, a
      00046F DD B6 FA         [19]  902 	or	a, -6 (ix)
      000472 28 32            [12]  903 	jr	Z, 00135$
      000474 21r03r00         [10]  904 	ld	hl, #_alex
      000477 6E               [ 7]  905 	ld	l, (hl)
                                    906 ;	spillPairReg hl
      000478 3E 08            [ 7]  907 	ld	a, #0x08
      00047A 95               [ 4]  908 	sub	a, l
      00047B 30 29            [12]  909 	jr	NC, 00135$
                                    910 ;./alex.c:75: alex.x -= 1;
      00047D 7D               [ 4]  911 	ld	a, l
      00047E 3D               [ 4]  912 	dec	a
      00047F 32r03r00         [13]  913 	ld	(#_alex),a
                                    914 ;./alex.c:76: alex.oriented = 1;
      000482 21r07r00         [10]  915 	ld	hl, #(_alex + 4)
      000485 36 01            [10]  916 	ld	(hl), #0x01
                                    917 ;./alex.c:77: alex.lastChangeFrame++;
      000487 0A               [ 7]  918 	ld	a, (bc)
      000488 3C               [ 4]  919 	inc	a
      000489 02               [ 7]  920 	ld	(bc), a
                                    921 ;./alex.c:78: if (alex.lastChangeFrame == 11) {
      00048A D6 0B            [ 7]  922 	sub	a, #0x0b
      00048C 20 05            [12]  923 	jr	NZ, 00119$
                                    924 ;./alex.c:79: alex.lastChangeFrame = 0;
      00048E AF               [ 4]  925 	xor	a, a
      00048F 02               [ 7]  926 	ld	(bc), a
                                    927 ;./alex.c:80: alex.frame++;
      000490 1A               [ 7]  928 	ld	a, (de)
      000491 3C               [ 4]  929 	inc	a
      000492 12               [ 7]  930 	ld	(de), a
      000493                        931 00119$:
                                    932 ;./alex.c:82: if (alex.frame > 11 || alex.frame < 8)
      000493 1A               [ 7]  933 	ld	a, (de)
      000494 4F               [ 4]  934 	ld	c, a
      000495 3E 0B            [ 7]  935 	ld	a, #0x0b
      000497 91               [ 4]  936 	sub	a, c
      000498 38 06            [12]  937 	jr	C, 00120$
      00049A 79               [ 4]  938 	ld	a, c
      00049B D6 08            [ 7]  939 	sub	a, #0x08
      00049D D2r35r05         [10]  940 	jp	NC, 00146$
      0004A0                        941 00120$:
                                    942 ;./alex.c:83: alex.frame = 8;
      0004A0 3E 08            [ 7]  943 	ld	a, #0x08
      0004A2 12               [ 7]  944 	ld	(de), a
      0004A3 C3r35r05         [10]  945 	jp	00146$
      0004A6                        946 00135$:
                                    947 ;./alex.c:85: else if ((keys & PORT_A_KEY_RIGHT) && alex.x <240)
      0004A6 AF               [ 4]  948 	xor	a, a
      0004A7 DD B6 FC         [19]  949 	or	a, -4 (ix)
      0004AA 28 27            [12]  950 	jr	Z, 00131$
      0004AC 3Ar03r00         [13]  951 	ld	a, (#_alex + 0)
      0004AF FE F0            [ 7]  952 	cp	a, #0xf0
      0004B1 30 20            [12]  953 	jr	NC, 00131$
                                    954 ;./alex.c:87: alex.x += 1;
      0004B3 3C               [ 4]  955 	inc	a
      0004B4 32r03r00         [13]  956 	ld	(#_alex),a
                                    957 ;./alex.c:88: alex.oriented = 0;
      0004B7 21r07r00         [10]  958 	ld	hl, #(_alex + 4)
      0004BA 36 00            [10]  959 	ld	(hl), #0x00
                                    960 ;./alex.c:89: alex.lastChangeFrame++;
      0004BC 0A               [ 7]  961 	ld	a, (bc)
      0004BD 3C               [ 4]  962 	inc	a
      0004BE 02               [ 7]  963 	ld	(bc), a
                                    964 ;./alex.c:90: if (alex.lastChangeFrame == 11) {
      0004BF D6 0B            [ 7]  965 	sub	a, #0x0b
      0004C1 20 05            [12]  966 	jr	NZ, 00124$
                                    967 ;./alex.c:91: alex.lastChangeFrame = 0;
      0004C3 AF               [ 4]  968 	xor	a, a
      0004C4 02               [ 7]  969 	ld	(bc), a
                                    970 ;./alex.c:92: alex.frame++;
      0004C5 1A               [ 7]  971 	ld	a, (de)
      0004C6 3C               [ 4]  972 	inc	a
      0004C7 12               [ 7]  973 	ld	(de), a
      0004C8                        974 00124$:
                                    975 ;./alex.c:94: if (alex.frame > 3 || alex.frame < 0)
      0004C8 1A               [ 7]  976 	ld	a, (de)
      0004C9 4F               [ 4]  977 	ld	c, a
      0004CA 3E 03            [ 7]  978 	ld	a, #0x03
      0004CC 91               [ 4]  979 	sub	a, c
      0004CD 30 66            [12]  980 	jr	NC, 00146$
                                    981 ;./alex.c:95: alex.frame = 0;
      0004CF AF               [ 4]  982 	xor	a, a
      0004D0 12               [ 7]  983 	ld	(de), a
      0004D1 18 62            [12]  984 	jr	00146$
      0004D3                        985 00131$:
                                    986 ;./alex.c:99: alex.frame = 4;
      0004D3 3E 04            [ 7]  987 	ld	a, #0x04
      0004D5 12               [ 7]  988 	ld	(de), a
                                    989 ;./alex.c:100: if (alex.oriented)
      0004D6 3Ar07r00         [13]  990 	ld	a, (#(_alex + 4) + 0)
      0004D9 B7               [ 4]  991 	or	a, a
      0004DA 28 03            [12]  992 	jr	Z, 00129$
                                    993 ;./alex.c:101: alex.frame = 12;
      0004DC 3E 0C            [ 7]  994 	ld	a, #0x0c
      0004DE 12               [ 7]  995 	ld	(de), a
      0004DF                        996 00129$:
                                    997 ;./alex.c:102: alex.lastChangeFrame = 10;
      0004DF 3E 0A            [ 7]  998 	ld	a, #0x0a
      0004E1 02               [ 7]  999 	ld	(bc), a
      0004E2 18 51            [12] 1000 	jr	00146$
      0004E4                       1001 00144$:
                                   1002 ;./alex.c:106: if (!alex.oriented) {
      0004E4 3Ar07r00         [13] 1003 	ld	a, (#(_alex + 4) + 0)
                                   1004 ;./alex.c:108: SMS_addSprite (alex.x + 16, alex.y + 9, 9);
                                   1005 ;./alex.c:106: if (!alex.oriented) {
      0004E7 DD 77 FD         [19] 1006 	ld	-3 (ix), a
      0004EA B7               [ 4] 1007 	or	a, a
      0004EB 20 22            [12] 1008 	jr	NZ, 00139$
                                   1009 ;./alex.c:107: alex.frame = 5;
      0004ED 3E 05            [ 7] 1010 	ld	a, #0x05
      0004EF 12               [ 7] 1011 	ld	(de), a
                                   1012 ;./alex.c:108: SMS_addSprite (alex.x + 16, alex.y + 9, 9);
      0004F0 21r03r00         [10] 1013 	ld	hl, #_alex
      0004F3 5E               [ 7] 1014 	ld	e, (hl)
      0004F4 16 00            [ 7] 1015 	ld	d, #0x00
      0004F6 21 10 00         [10] 1016 	ld	hl, #0x0010
      0004F9 19               [11] 1017 	add	hl, de
      0004FA 55               [ 4] 1018 	ld	d, l
      0004FB 1E 09            [ 7] 1019 	ld	e, #0x09
      0004FD 3Ar04r00         [13] 1020 	ld	a, (#(_alex + 1) + 0)
      000500 26 00            [ 7] 1021 	ld	h, #0x00
                                   1022 ;	spillPairReg hl
                                   1023 ;	spillPairReg hl
      000502 C6 09            [ 7] 1024 	add	a, #0x09
      000504 6F               [ 4] 1025 	ld	l, a
                                   1026 ;	spillPairReg hl
                                   1027 ;	spillPairReg hl
      000505 30 01            [12] 1028 	jr	NC, 00289$
      000507 24               [ 4] 1029 	inc	h
      000508                       1030 00289$:
      000508 C5               [11] 1031 	push	bc
      000509 CDr00r00         [17] 1032 	call	_SMS_addSprite_f
      00050C C1               [10] 1033 	pop	bc
      00050D 18 1B            [12] 1034 	jr	00140$
      00050F                       1035 00139$:
                                   1036 ;./alex.c:111: alex.frame = 13;
      00050F 3E 0D            [ 7] 1037 	ld	a, #0x0d
      000511 12               [ 7] 1038 	ld	(de), a
                                   1039 ;./alex.c:112: SMS_addSprite (alex.x - 8,  alex.y + 9, 11);
      000512 3Ar03r00         [13] 1040 	ld	a, (#_alex + 0)
      000515 C6 F8            [ 7] 1041 	add	a, #0xf8
                                   1042 ;	spillPairReg hl
                                   1043 ;	spillPairReg hl
      000517 57               [ 4] 1044 	ld	d, a
      000518 1E 0B            [ 7] 1045 	ld	e, #0x0b
      00051A 3Ar04r00         [13] 1046 	ld	a, (#(_alex + 1) + 0)
      00051D 26 00            [ 7] 1047 	ld	h, #0x00
                                   1048 ;	spillPairReg hl
                                   1049 ;	spillPairReg hl
      00051F C6 09            [ 7] 1050 	add	a, #0x09
      000521 6F               [ 4] 1051 	ld	l, a
                                   1052 ;	spillPairReg hl
                                   1053 ;	spillPairReg hl
      000522 30 01            [12] 1054 	jr	NC, 00290$
      000524 24               [ 4] 1055 	inc	h
      000525                       1056 00290$:
      000525 C5               [11] 1057 	push	bc
      000526 CDr00r00         [17] 1058 	call	_SMS_addSprite_f
      000529 C1               [10] 1059 	pop	bc
      00052A                       1060 00140$:
                                   1061 ;./alex.c:114: alex.lastChangeFrame--;
      00052A 0A               [ 7] 1062 	ld	a, (bc)
      00052B 3D               [ 4] 1063 	dec	a
      00052C 02               [ 7] 1064 	ld	(bc), a
                                   1065 ;./alex.c:115: if(!alex.lastChangeFrame) {
      00052D B7               [ 4] 1066 	or	a, a
      00052E 20 05            [12] 1067 	jr	NZ, 00146$
                                   1068 ;./alex.c:116: alex.state = 0;
      000530 21r08r00         [10] 1069 	ld	hl, #(_alex + 5)
      000533 36 00            [10] 1070 	ld	(hl), #0x00
      000535                       1071 00146$:
                                   1072 ;./alex.c:119: }
      000535 DD F9            [10] 1073 	ld	sp, ix
      000537 DD E1            [14] 1074 	pop	ix
      000539 C9               [10] 1075 	ret
                                   1076 ;./alex.c:121: void moveAlexAire(int keys, unsigned char puedeSubir, unsigned char puedeDerecha, unsigned char puedeIzquieda) {
                                   1077 ;	---------------------------------
                                   1078 ; Function moveAlexAire
                                   1079 ; ---------------------------------
      00053A                       1080 _moveAlexAire::
      00053A DD E5            [15] 1081 	push	ix
      00053C DD 21 00 00      [14] 1082 	ld	ix,#0
      000540 DD 39            [15] 1083 	add	ix,sp
      000542 F5               [11] 1084 	push	af
      000543 3B               [ 6] 1085 	dec	sp
      000544 DD 75 FE         [19] 1086 	ld	-2 (ix), l
      000547 DD 74 FF         [19] 1087 	ld	-1 (ix), h
                                   1088 ;./alex.c:122: if (alex.y > maxSalto) {
      00054A 21r04r00         [10] 1089 	ld	hl, #(_alex + 1)
      00054D 46               [ 7] 1090 	ld	b, (hl)
                                   1091 ;./alex.c:123: alex.y -= 2;
      00054E 48               [ 4] 1092 	ld	c, b
                                   1093 ;./alex.c:122: if (alex.y > maxSalto) {
      00054F 3Ar02r00         [13] 1094 	ld	a, (_maxSalto+0)
      000552 90               [ 4] 1095 	sub	a, b
      000553 30 08            [12] 1096 	jr	NC, 00102$
                                   1097 ;./alex.c:123: alex.y -= 2;
      000555 0D               [ 4] 1098 	dec	c
      000556 0D               [ 4] 1099 	dec	c
      000557 21r04r00         [10] 1100 	ld	hl, #(_alex + 1)
      00055A 71               [ 7] 1101 	ld	(hl), c
      00055B 18 0E            [12] 1102 	jr	00103$
      00055D                       1103 00102$:
                                   1104 ;./alex.c:126: alex.y += 2; // bajando
      00055D 0C               [ 4] 1105 	inc	c
      00055E 0C               [ 4] 1106 	inc	c
      00055F 21r04r00         [10] 1107 	ld	hl, #(_alex + 1)
      000562 71               [ 7] 1108 	ld	(hl), c
                                   1109 ;./alex.c:127: maxSalto = 255;
      000563 FD 21r02r00      [14] 1110 	ld	iy, #_maxSalto
      000567 FD 36 00 FF      [19] 1111 	ld	0 (iy), #0xff
      00056B                       1112 00103$:
                                   1113 ;./alex.c:130: if (alex.state != PUÑETAZO_SALTANDO)
                                   1114 ;./alex.c:131: alex.oriented = 1;
                                   1115 ;./alex.c:129: if (keys & PORT_A_KEY_LEFT) {
      00056B DD CB FE 56      [20] 1116 	bit	2, -2 (ix)
      00056F 28 1A            [12] 1117 	jr	Z, 00109$
                                   1118 ;./alex.c:130: if (alex.state != PUÑETAZO_SALTANDO)
      000571 3Ar08r00         [13] 1119 	ld	a, (#(_alex + 5) + 0)
      000574 D6 10            [ 7] 1120 	sub	a, #0x10
      000576 28 05            [12] 1121 	jr	Z, 00105$
                                   1122 ;./alex.c:131: alex.oriented = 1;
      000578 21r07r00         [10] 1123 	ld	hl, #(_alex + 4)
      00057B 36 01            [10] 1124 	ld	(hl), #0x01
      00057D                       1125 00105$:
                                   1126 ;./alex.c:132: if (puedeIzquieda)
      00057D DD 7E 06         [19] 1127 	ld	a, 6 (ix)
      000580 B7               [ 4] 1128 	or	a, a
      000581 28 08            [12] 1129 	jr	Z, 00109$
                                   1130 ;./alex.c:133: alex.x -= 2;
      000583 3Ar03r00         [13] 1131 	ld	a, (#_alex + 0)
      000586 3D               [ 4] 1132 	dec	a
      000587 3D               [ 4] 1133 	dec	a
      000588 32r03r00         [13] 1134 	ld	(#_alex),a
      00058B                       1135 00109$:
                                   1136 ;./alex.c:135: if (keys & PORT_A_KEY_RIGHT) {
      00058B DD CB FE 5E      [20] 1137 	bit	3, -2 (ix)
      00058F 28 1A            [12] 1138 	jr	Z, 00115$
                                   1139 ;./alex.c:136: if (alex.state != PUÑETAZO_SALTANDO)
      000591 3Ar08r00         [13] 1140 	ld	a, (#(_alex + 5) + 0)
      000594 D6 10            [ 7] 1141 	sub	a, #0x10
      000596 28 05            [12] 1142 	jr	Z, 00111$
                                   1143 ;./alex.c:137: alex.oriented = 0;
      000598 21r07r00         [10] 1144 	ld	hl, #(_alex + 4)
      00059B 36 00            [10] 1145 	ld	(hl), #0x00
      00059D                       1146 00111$:
                                   1147 ;./alex.c:138: if (puedeDerecha)
      00059D DD 7E 05         [19] 1148 	ld	a, 5 (ix)
      0005A0 B7               [ 4] 1149 	or	a, a
      0005A1 28 08            [12] 1150 	jr	Z, 00115$
                                   1151 ;./alex.c:139: alex.x += 2;
      0005A3 3Ar03r00         [13] 1152 	ld	a, (#_alex + 0)
      0005A6 C6 02            [ 7] 1153 	add	a, #0x02
      0005A8 32r03r00         [13] 1154 	ld	(#_alex),a
      0005AB                       1155 00115$:
                                   1156 ;./alex.c:141: if (alex.state == PUÑETAZO_SALTANDO) {
      0005AB 21r08r00         [10] 1157 	ld	hl, #(_alex + 5)
      0005AE 4E               [ 7] 1158 	ld	c, (hl)
                                   1159 ;./alex.c:142: alex.lastChangeFrame--;
                                   1160 ;./alex.c:147: alex.frame = 5;
                                   1161 ;./alex.c:141: if (alex.state == PUÑETAZO_SALTANDO) {
      0005AF 79               [ 4] 1162 	ld	a, c
      0005B0 D6 10            [ 7] 1163 	sub	a, #0x10
      0005B2 20 55            [12] 1164 	jr	NZ, 00127$
                                   1165 ;./alex.c:142: alex.lastChangeFrame--;
      0005B4 21r06r00         [10] 1166 	ld	hl, #(_alex + 3)
      0005B7 4E               [ 7] 1167 	ld	c, (hl)
      0005B8 0D               [ 4] 1168 	dec	c
      0005B9 21r06r00         [10] 1169 	ld	hl, #(_alex + 3)
                                   1170 ;./alex.c:143: if  (!alex.lastChangeFrame) {
      0005BC 79               [ 4] 1171 	ld	a,c
      0005BD 77               [ 7] 1172 	ld	(hl),a
      0005BE B7               [ 4] 1173 	or	a, a
      0005BF 20 05            [12] 1174 	jr	NZ, 00117$
                                   1175 ;./alex.c:144: alex.state = 0;
      0005C1 21r08r00         [10] 1176 	ld	hl, #(_alex + 5)
      0005C4 36 00            [10] 1177 	ld	(hl), #0x00
      0005C6                       1178 00117$:
                                   1179 ;./alex.c:146: if (!alex.oriented) {
      0005C6 3Ar07r00         [13] 1180 	ld	a, (#(_alex + 4) + 0)
      0005C9 B7               [ 4] 1181 	or	a, a
      0005CA 20 21            [12] 1182 	jr	NZ, 00119$
                                   1183 ;./alex.c:147: alex.frame = 5;
      0005CC 21r05r00         [10] 1184 	ld	hl, #(_alex + 2)
      0005CF 36 05            [10] 1185 	ld	(hl), #0x05
                                   1186 ;./alex.c:148: SMS_addSprite (alex.x + 16, alex.y + 9, 9);
      0005D1 21r03r00         [10] 1187 	ld	hl, #_alex
      0005D4 4E               [ 7] 1188 	ld	c, (hl)
      0005D5 06 00            [ 7] 1189 	ld	b, #0x00
      0005D7 21 10 00         [10] 1190 	ld	hl, #0x0010
      0005DA 09               [11] 1191 	add	hl, bc
      0005DB 55               [ 4] 1192 	ld	d, l
      0005DC 1E 09            [ 7] 1193 	ld	e, #0x09
      0005DE 21r04r00         [10] 1194 	ld	hl, #(_alex + 1)
      0005E1 4E               [ 7] 1195 	ld	c, (hl)
      0005E2 06 00            [ 7] 1196 	ld	b, #0x00
      0005E4 21 09 00         [10] 1197 	ld	hl, #0x0009
      0005E7 09               [11] 1198 	add	hl, bc
      0005E8 CDr00r00         [17] 1199 	call	_SMS_addSprite_f
      0005EB 18 41            [12] 1200 	jr	00129$
      0005ED                       1201 00119$:
                                   1202 ;./alex.c:151: alex.frame = 13;
      0005ED 21r05r00         [10] 1203 	ld	hl, #(_alex + 2)
      0005F0 36 0D            [10] 1204 	ld	(hl), #0x0d
                                   1205 ;./alex.c:152: SMS_addSprite (alex.x - 8,  alex.y + 9, 11);
      0005F2 3Ar03r00         [13] 1206 	ld	a, (#_alex + 0)
      0005F5 C6 F8            [ 7] 1207 	add	a, #0xf8
      0005F7 57               [ 4] 1208 	ld	d, a
      0005F8 1E 0B            [ 7] 1209 	ld	e, #0x0b
      0005FA 21r04r00         [10] 1210 	ld	hl, #(_alex + 1)
      0005FD 4E               [ 7] 1211 	ld	c, (hl)
      0005FE 06 00            [ 7] 1212 	ld	b, #0x00
      000600 21 09 00         [10] 1213 	ld	hl, #0x0009
      000603 09               [11] 1214 	add	hl, bc
      000604 CDr00r00         [17] 1215 	call	_SMS_addSprite_f
      000607 18 25            [12] 1216 	jr	00129$
      000609                       1217 00127$:
                                   1218 ;./alex.c:156: if (!alex.oriented)
      000609 3Ar07r00         [13] 1219 	ld	a, (#(_alex + 4) + 0)
      00060C DD 77 FD         [19] 1220 	ld	-3 (ix), a
      00060F B7               [ 4] 1221 	or	a, a
      000610 20 07            [12] 1222 	jr	NZ, 00122$
                                   1223 ;./alex.c:157: alex.frame = 6;
      000612 21r05r00         [10] 1224 	ld	hl, #(_alex + 2)
      000615 36 06            [10] 1225 	ld	(hl), #0x06
      000617 18 05            [12] 1226 	jr	00123$
      000619                       1227 00122$:
                                   1228 ;./alex.c:159: alex.frame = 14;
      000619 21r05r00         [10] 1229 	ld	hl, #(_alex + 2)
      00061C 36 0E            [10] 1230 	ld	(hl), #0x0e
      00061E                       1231 00123$:
                                   1232 ;./alex.c:160: if (keys & PORT_A_KEY_1) {
      00061E DD CB FE 66      [20] 1233 	bit	4, -2 (ix)
      000622 28 0A            [12] 1234 	jr	Z, 00129$
                                   1235 ;./alex.c:161: alex.state = PUÑETAZO_SALTANDO;
      000624 21r08r00         [10] 1236 	ld	hl, #(_alex + 5)
      000627 36 10            [10] 1237 	ld	(hl), #0x10
                                   1238 ;./alex.c:162: alex.lastChangeFrame = 20;
      000629 21r06r00         [10] 1239 	ld	hl, #(_alex + 3)
      00062C 36 14            [10] 1240 	ld	(hl), #0x14
      00062E                       1241 00129$:
                                   1242 ;./alex.c:166: }
      00062E DD F9            [10] 1243 	ld	sp, ix
      000630 DD E1            [14] 1244 	pop	ix
      000632 E1               [10] 1245 	pop	hl
      000633 F1               [10] 1246 	pop	af
      000634 33               [ 6] 1247 	inc	sp
      000635 E9               [ 4] 1248 	jp	(hl)
                                   1249 ;./alex.c:169: void moveAlex(int keys) {
                                   1250 ;	---------------------------------
                                   1251 ; Function moveAlex
                                   1252 ; ---------------------------------
      000636                       1253 _moveAlex::
      000636 DD E5            [15] 1254 	push	ix
      000638 DD 21 00 00      [14] 1255 	ld	ix,#0
      00063C DD 39            [15] 1256 	add	ix,sp
      00063E 3B               [ 6] 1257 	dec	sp
                                   1258 ;./alex.c:170: unsigned char puedeBajar = canDown();
      00063F E5               [11] 1259 	push	hl
      000640 CDr95r03         [17] 1260 	call	_canDown
      000643 4F               [ 4] 1261 	ld	c, a
      000644 C5               [11] 1262 	push	bc
      000645 CDr89r03         [17] 1263 	call	_canUp
      000648 DD 77 FF         [19] 1264 	ld	-1 (ix), a
      00064B CDrAFr03         [17] 1265 	call	_canRight
      00064E 5F               [ 4] 1266 	ld	e, a
      00064F D5               [11] 1267 	push	de
      000650 CDrA3r03         [17] 1268 	call	_canLeft
      000653 D1               [10] 1269 	pop	de
      000654 C1               [10] 1270 	pop	bc
      000655 E1               [10] 1271 	pop	hl
                                   1272 ;./alex.c:174: if (puedeBajar)
      000656 0C               [ 4] 1273 	inc	c
      000657 0D               [ 4] 1274 	dec	c
      000658 28 0C            [12] 1275 	jr	Z, 00102$
                                   1276 ;./alex.c:175: moveAlexAire(keys, puedeSubir, puedeDerecha, puedeIzquierda);
      00065A 57               [ 4] 1277 	ld	d,a
      00065B D5               [11] 1278 	push	de
      00065C DD 7E FF         [19] 1279 	ld	a, -1 (ix)
      00065F F5               [11] 1280 	push	af
      000660 33               [ 6] 1281 	inc	sp
      000661 CDr3Ar05         [17] 1282 	call	_moveAlexAire
      000664 18 03            [12] 1283 	jr	00104$
      000666                       1284 00102$:
                                   1285 ;./alex.c:177: moveAlexSuelo(keys);
      000666 CDrBDr03         [17] 1286 	call	_moveAlexSuelo
      000669                       1287 00104$:
                                   1288 ;./alex.c:178: }
      000669 33               [ 6] 1289 	inc	sp
      00066A DD E1            [14] 1290 	pop	ix
      00066C C9               [10] 1291 	ret
                                   1292 ;main.c:18: void inicializaPajaros()
                                   1293 ;	---------------------------------
                                   1294 ; Function inicializaPajaros
                                   1295 ; ---------------------------------
      00066D                       1296 _inicializaPajaros::
      00066D DD E5            [15] 1297 	push	ix
      00066F DD 21 00 00      [14] 1298 	ld	ix,#0
      000673 DD 39            [15] 1299 	add	ix,sp
      000675 F5               [11] 1300 	push	af
                                   1301 ;main.c:21: for (i = 0; i < NUM_PAJAROS; i++)
      000676 0E 00            [ 7] 1302 	ld	c, #0x00
      000678                       1303 00102$:
                                   1304 ;main.c:23: pajaros[i].x = 15 + 32 * i;
      000678 06 00            [ 7] 1305 	ld	b, #0x00
      00067A 69               [ 4] 1306 	ld	l, c
      00067B 60               [ 4] 1307 	ld	h, b
      00067C 29               [11] 1308 	add	hl, hl
      00067D 09               [11] 1309 	add	hl, bc
      00067E 29               [11] 1310 	add	hl, hl
      00067F EB               [ 4] 1311 	ex	de, hl
      000680 21r00r00         [10] 1312 	ld	hl, #_pajaros
      000683 19               [11] 1313 	add	hl, de
      000684 EB               [ 4] 1314 	ex	de, hl
      000685 79               [ 4] 1315 	ld	a, c
      000686 0F               [ 4] 1316 	rrca
      000687 0F               [ 4] 1317 	rrca
      000688 0F               [ 4] 1318 	rrca
      000689 E6 E0            [ 7] 1319 	and	a, #0xe0
      00068B C6 0F            [ 7] 1320 	add	a, #0x0f
      00068D 12               [ 7] 1321 	ld	(de), a
                                   1322 ;main.c:24: pajaros[i].y = 15 + 16 * (i / 2);
      00068E 6B               [ 4] 1323 	ld	l, e
      00068F 62               [ 4] 1324 	ld	h, d
      000690 23               [ 6] 1325 	inc	hl
      000691 E3               [19] 1326 	ex	(sp), hl
      000692 69               [ 4] 1327 	ld	l, c
                                   1328 ;	spillPairReg hl
                                   1329 ;	spillPairReg hl
      000693 26 00            [ 7] 1330 	ld	h, #0x00
                                   1331 ;	spillPairReg hl
                                   1332 ;	spillPairReg hl
      000695 CB 2C            [ 8] 1333 	sra	h
      000697 CB 1D            [ 8] 1334 	rr	l
      000699 7D               [ 4] 1335 	ld	a, l
      00069A 87               [ 4] 1336 	add	a, a
      00069B 87               [ 4] 1337 	add	a, a
      00069C 87               [ 4] 1338 	add	a, a
      00069D 87               [ 4] 1339 	add	a, a
      00069E C6 0F            [ 7] 1340 	add	a, #0x0f
      0006A0 E1               [10] 1341 	pop	hl
      0006A1 E5               [11] 1342 	push	hl
      0006A2 77               [ 7] 1343 	ld	(hl), a
                                   1344 ;main.c:25: pajaros[i].lastChangeFrame = i * 3;
      0006A3 13               [ 6] 1345 	inc	de
      0006A4 13               [ 6] 1346 	inc	de
      0006A5 13               [ 6] 1347 	inc	de
      0006A6 79               [ 4] 1348 	ld	a, c
      0006A7 87               [ 4] 1349 	add	a, a
      0006A8 81               [ 4] 1350 	add	a, c
      0006A9 12               [ 7] 1351 	ld	(de), a
                                   1352 ;main.c:21: for (i = 0; i < NUM_PAJAROS; i++)
      0006AA 0C               [ 4] 1353 	inc	c
      0006AB 79               [ 4] 1354 	ld	a, c
      0006AC D6 0A            [ 7] 1355 	sub	a, #0x0a
      0006AE 38 C8            [12] 1356 	jr	C, 00102$
                                   1357 ;main.c:27: }
      0006B0 DD F9            [10] 1358 	ld	sp, ix
      0006B2 DD E1            [14] 1359 	pop	ix
      0006B4 C9               [10] 1360 	ret
                                   1361 ;main.c:29: void loadGrapVRAM()
                                   1362 ;	---------------------------------
                                   1363 ; Function loadGrapVRAM
                                   1364 ; ---------------------------------
      0006B5                       1365 _loadGrapVRAM::
      0006B5 DD E5            [15] 1366 	push	ix
      0006B7 DD 21 00 00      [14] 1367 	ld	ix,#0
      0006BB DD 39            [15] 1368 	add	ix,sp
      0006BD 21 E2 FF         [10] 1369 	ld	hl, #-30
      0006C0 39               [11] 1370 	add	hl, sp
      0006C1 F9               [ 6] 1371 	ld	sp, hl
                                   1372 ;main.c:31: SMS_init();
      0006C2 CDr00r00         [17] 1373 	call	_SMS_init
                                   1374 ;main.c:32: inicializaPajaros();
      0006C5 CDr6Dr06         [17] 1375 	call	_inicializaPajaros
                                   1376 ;main.c:34: SMS_setSpriteMode(SPRITEMODE_TALL);
      0006C8 2E 01            [ 7] 1377 	ld	l, #0x01
                                   1378 ;	spillPairReg hl
                                   1379 ;	spillPairReg hl
      0006CA CDr00r00         [17] 1380 	call	_SMS_setSpriteMode
                                   1381 ;main.c:35: SMS_displayOn();
      0006CD 21 40 01         [10] 1382 	ld	hl, #0x0140
      0006D0 CDr00r00         [17] 1383 	call	_SMS_VDPturnOnFeature
                                   1384 ;main.c:36: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      0006D3 21 20 00         [10] 1385 	ld	hl, #0x0020
      0006D6 CDr00r00         [17] 1386 	call	_SMS_VDPturnOnFeature
                                   1387 ;main.c:37: SMS_loadBGPalette(sonicpalette_inc);
      0006D9 21r00r00         [10] 1388 	ld	hl, #_sonicpalette_inc
      0006DC CDr00r00         [17] 1389 	call	_SMS_loadBGPalette
                                   1390 ;main.c:38: SMS_loadSpritePalette(palleteAlex_inc);
      0006DF 21r00r00         [10] 1391 	ld	hl, #_palleteAlex_inc
      0006E2 CDr00r00         [17] 1392 	call	_SMS_loadSpritePalette
                                   1393 ;main.c:39: SMS_loadTiles(sonictiles_inc, 0, sonictiles_inc_size);
      0006E5 21 C0 14         [10] 1394 	ld	hl, #0x14c0
      0006E8 E5               [11] 1395 	push	hl
      0006E9 11r00r00         [10] 1396 	ld	de, #_sonictiles_inc
      0006EC 21 00 40         [10] 1397 	ld	hl, #0x4000
      0006EF CDr00r00         [17] 1398 	call	_SMS_VRAMmemcpy
                                   1399 ;main.c:40: spriteAlex = generateSpriteNoRAM(2, 2, spriteAlex_inc_size, spriteAlex_inc);
      0006F2 21r00r00         [10] 1400 	ld	hl, #_spriteAlex_inc
      0006F5 E5               [11] 1401 	push	hl
      0006F6 21 00 10         [10] 1402 	ld	hl, #0x1000
      0006F9 E5               [11] 1403 	push	hl
                                   1404 ;	spillPairReg hl
                                   1405 ;	spillPairReg hl
      0006FA 3E 02            [ 7] 1406 	ld	a,#0x02
      0006FC 6F               [ 4] 1407 	ld	l,a
      0006FD E5               [11] 1408 	push	hl
      0006FE 21 06 00         [10] 1409 	ld	hl, #0x0006
      000701 39               [11] 1410 	add	hl, sp
      000702 EB               [ 4] 1411 	ex	de,hl
      000703 E1               [10] 1412 	pop	hl
      000704 D5               [11] 1413 	push	de
      000705 CDrAAr00         [17] 1414 	call	_generateSpriteNoRAM
      000708 F1               [10] 1415 	pop	af
      000709 F1               [10] 1416 	pop	af
      00070A F1               [10] 1417 	pop	af
      00070B 11r09r00         [10] 1418 	ld	de, #_spriteAlex
      00070E 21 00 00         [10] 1419 	ld	hl, #0
      000711 39               [11] 1420 	add	hl, sp
      000712 01 0A 00         [10] 1421 	ld	bc, #0x000a
      000715 ED B0            [21] 1422 	ldir
                                   1423 ;main.c:41: spritePuno = generateSprite(1, 2, puno_inc_size, puno_inc);
      000717 21r00r00         [10] 1424 	ld	hl, #_puno_inc
      00071A E5               [11] 1425 	push	hl
      00071B 21 80 00         [10] 1426 	ld	hl, #0x0080
      00071E E5               [11] 1427 	push	hl
      00071F 2E 02            [ 7] 1428 	ld	l, #0x02
                                   1429 ;	spillPairReg hl
                                   1430 ;	spillPairReg hl
      000721 3E 01            [ 7] 1431 	ld	a, #0x01
      000723 E5               [11] 1432 	push	hl
      000724 21 10 00         [10] 1433 	ld	hl, #0x0010
      000727 39               [11] 1434 	add	hl, sp
      000728 EB               [ 4] 1435 	ex	de,hl
      000729 E1               [10] 1436 	pop	hl
      00072A D5               [11] 1437 	push	de
      00072B CDr00r00         [17] 1438 	call	_generateSprite
      00072E F1               [10] 1439 	pop	af
      00072F F1               [10] 1440 	pop	af
      000730 F1               [10] 1441 	pop	af
      000731 11r1Dr00         [10] 1442 	ld	de, #_spritePuno
      000734 21 0A 00         [10] 1443 	ld	hl, #10
      000737 39               [11] 1444 	add	hl, sp
      000738 01 0A 00         [10] 1445 	ld	bc, #0x000a
      00073B ED B0            [21] 1446 	ldir
                                   1447 ;main.c:42: spritePajaro = generateSprite(3, 1, spritePajaro_inc_size, spritePajaro_inc);
      00073D 21r00r00         [10] 1448 	ld	hl, #_spritePajaro_inc
      000740 E5               [11] 1449 	push	hl
      000741 21 80 01         [10] 1450 	ld	hl, #0x0180
      000744 E5               [11] 1451 	push	hl
      000745 2E 01            [ 7] 1452 	ld	l, #0x01
                                   1453 ;	spillPairReg hl
                                   1454 ;	spillPairReg hl
      000747 3E 03            [ 7] 1455 	ld	a, #0x03
      000749 E5               [11] 1456 	push	hl
      00074A 21 1A 00         [10] 1457 	ld	hl, #0x001a
      00074D 39               [11] 1458 	add	hl, sp
      00074E EB               [ 4] 1459 	ex	de,hl
      00074F E1               [10] 1460 	pop	hl
      000750 D5               [11] 1461 	push	de
      000751 CDr00r00         [17] 1462 	call	_generateSprite
      000754 F1               [10] 1463 	pop	af
      000755 F1               [10] 1464 	pop	af
      000756 F1               [10] 1465 	pop	af
      000757 11r13r00         [10] 1466 	ld	de, #_spritePajaro
      00075A 21 14 00         [10] 1467 	ld	hl, #20
      00075D 39               [11] 1468 	add	hl, sp
      00075E 01 0A 00         [10] 1469 	ld	bc, #0x000a
      000761 ED B0            [21] 1470 	ldir
                                   1471 ;main.c:44: SMS_loadTileMap(0, 0, sonictilemap_inc, sonictilemap_inc_size);
      000763 21 00 06         [10] 1472 	ld	hl, #0x0600
      000766 E5               [11] 1473 	push	hl
      000767 11r00r00         [10] 1474 	ld	de, #_sonictilemap_inc
      00076A 26 78            [ 7] 1475 	ld	h, #0x78
      00076C CDr00r00         [17] 1476 	call	_SMS_VRAMmemcpy
                                   1477 ;main.c:45: }
      00076F DD F9            [10] 1478 	ld	sp, ix
      000771 DD E1            [14] 1479 	pop	ix
      000773 C9               [10] 1480 	ret
                                   1481 ;main.c:47: void dibujaPajaros()
                                   1482 ;	---------------------------------
                                   1483 ; Function dibujaPajaros
                                   1484 ; ---------------------------------
      000774                       1485 _dibujaPajaros::
      000774 DD E5            [15] 1486 	push	ix
      000776 DD 21 00 00      [14] 1487 	ld	ix,#0
      00077A DD 39            [15] 1488 	add	ix,sp
      00077C F5               [11] 1489 	push	af
                                   1490 ;main.c:50: for (i = 0; i < NUM_PAJAROS; i++)
      00077D DD 36 FF 00      [19] 1491 	ld	-1 (ix), #0x00
      000781                       1492 00106$:
                                   1493 ;main.c:52: pajaros[i].x++;
      000781 DD 4E FF         [19] 1494 	ld	c, -1 (ix)
      000784 06 00            [ 7] 1495 	ld	b, #0x00
      000786 69               [ 4] 1496 	ld	l, c
      000787 60               [ 4] 1497 	ld	h, b
      000788 29               [11] 1498 	add	hl, hl
      000789 09               [11] 1499 	add	hl, bc
      00078A 29               [11] 1500 	add	hl, hl
      00078B EB               [ 4] 1501 	ex	de, hl
      00078C 21r00r00         [10] 1502 	ld	hl, #_pajaros
      00078F 19               [11] 1503 	add	hl, de
      000790 EB               [ 4] 1504 	ex	de, hl
      000791 1A               [ 7] 1505 	ld	a, (de)
      000792 3C               [ 4] 1506 	inc	a
      000793 12               [ 7] 1507 	ld	(de), a
                                   1508 ;main.c:53: pajaros[i].lastChangeFrame++;
      000794 4B               [ 4] 1509 	ld	c, e
      000795 42               [ 4] 1510 	ld	b, d
      000796 03               [ 6] 1511 	inc	bc
      000797 03               [ 6] 1512 	inc	bc
      000798 03               [ 6] 1513 	inc	bc
      000799 0A               [ 7] 1514 	ld	a, (bc)
      00079A 3C               [ 4] 1515 	inc	a
      00079B 02               [ 7] 1516 	ld	(bc), a
                                   1517 ;main.c:54: if (pajaros[i].lastChangeFrame == 20)
      00079C D6 14            [ 7] 1518 	sub	a, #0x14
      00079E 20 15            [12] 1519 	jr	NZ, 00104$
                                   1520 ;main.c:56: pajaros[i].frame++;
      0007A0 6B               [ 4] 1521 	ld	l, e
                                   1522 ;	spillPairReg hl
                                   1523 ;	spillPairReg hl
      0007A1 62               [ 4] 1524 	ld	h, d
                                   1525 ;	spillPairReg hl
                                   1526 ;	spillPairReg hl
      0007A2 23               [ 6] 1527 	inc	hl
      0007A3 23               [ 6] 1528 	inc	hl
      0007A4 7E               [ 7] 1529 	ld	a, (hl)
      0007A5 3C               [ 4] 1530 	inc	a
      0007A6 DD 77 FE         [19] 1531 	ld	-2 (ix), a
      0007A9 77               [ 7] 1532 	ld	(hl), a
                                   1533 ;main.c:57: if (pajaros[i].frame > 1)
      0007AA 3E 01            [ 7] 1534 	ld	a, #0x01
      0007AC DD 96 FE         [19] 1535 	sub	a, -2 (ix)
      0007AF 30 02            [12] 1536 	jr	NC, 00102$
                                   1537 ;main.c:58: pajaros[i].frame = 0;
      0007B1 36 00            [10] 1538 	ld	(hl), #0x00
      0007B3                       1539 00102$:
                                   1540 ;main.c:59: pajaros[i].lastChangeFrame = 0;
      0007B3 AF               [ 4] 1541 	xor	a, a
      0007B4 02               [ 7] 1542 	ld	(bc), a
      0007B5                       1543 00104$:
                                   1544 ;main.c:61: draw_entidad(&(pajaros[i]), &spritePajaro);
      0007B5 EB               [ 4] 1545 	ex	de, hl
      0007B6 11r13r00         [10] 1546 	ld	de, #_spritePajaro
      0007B9 CDr59r01         [17] 1547 	call	_draw_entidad
                                   1548 ;main.c:50: for (i = 0; i < NUM_PAJAROS; i++)
      0007BC DD 34 FF         [23] 1549 	inc	-1 (ix)
      0007BF DD 7E FF         [19] 1550 	ld	a, -1 (ix)
      0007C2 D6 0A            [ 7] 1551 	sub	a, #0x0a
      0007C4 38 BB            [12] 1552 	jr	C, 00106$
                                   1553 ;main.c:63: }
      0007C6 DD F9            [10] 1554 	ld	sp, ix
      0007C8 DD E1            [14] 1555 	pop	ix
      0007CA C9               [10] 1556 	ret
                                   1557 ;main.c:65: void playMusic() {
                                   1558 ;	---------------------------------
                                   1559 ; Function playMusic
                                   1560 ; ---------------------------------
      0007CB                       1561 _playMusic::
                                   1562 ;main.c:66: PSGFrame();
      0007CB CDr00r00         [17] 1563 	call	_PSGFrame
                                   1564 ;main.c:67: PSGSFXFrame();
                                   1565 ;main.c:68: }
      0007CE C3r00r00         [10] 1566 	jp	_PSGSFXFrame
                                   1567 ;main.c:70: void main(void)
                                   1568 ;	---------------------------------
                                   1569 ; Function main
                                   1570 ; ---------------------------------
      0007D1                       1571 _main::
      0007D1 DD E5            [15] 1572 	push	ix
      0007D3 DD 21 00 00      [14] 1573 	ld	ix,#0
      0007D7 DD 39            [15] 1574 	add	ix,sp
      0007D9 F5               [11] 1575 	push	af
                                   1576 ;main.c:75: SMS_VRAMmemsetW(0, 0x0000, 16384);
      0007DA DD 36 FF 00      [19] 1577 	ld	-1 (ix), #0x00
      0007DE DD 36 FE 00      [19] 1578 	ld	-2 (ix), #0x00
      0007E2 21 00 40         [10] 1579 	ld	hl, #0x4000
      0007E5 E5               [11] 1580 	push	hl
      0007E6 11 00 00         [10] 1581 	ld	de, #0x0000
      0007E9 65               [ 4] 1582 	ld	h, l
      0007EA CDr00r00         [17] 1583 	call	_SMS_VRAMmemsetW
                                   1584 ;main.c:85: printf("Hello, World! [1/3]");
      0007ED 21rA9r08         [10] 1585 	ld	hl, #___str_0
      0007F0 E5               [11] 1586 	push	hl
      0007F1 CDr00r00         [17] 1587 	call	_printf
      0007F4 F1               [10] 1588 	pop	af
                                   1589 ;main.c:89: loadGrapVRAM();
      0007F5 CDrB5r06         [17] 1590 	call	_loadGrapVRAM
                                   1591 ;main.c:91: SMS_displayOn();
      0007F8 21 40 01         [10] 1592 	ld	hl, #0x0140
      0007FB CDr00r00         [17] 1593 	call	_SMS_VDPturnOnFeature
                                   1594 ;main.c:92: SMS_setBGScrollX(scroll_x);
      0007FE 2E 00            [ 7] 1595 	ld	l, #0x00
                                   1596 ;	spillPairReg hl
                                   1597 ;	spillPairReg hl
      000800 CDr00r00         [17] 1598 	call	_SMS_setBGScrollX
                                   1599 ;main.c:93: SMS_setBGScrollY(scroll_y);
      000803 2E 00            [ 7] 1600 	ld	l, #0x00
                                   1601 ;	spillPairReg hl
                                   1602 ;	spillPairReg hl
      000805 CDr00r00         [17] 1603 	call	_SMS_setBGScrollY
                                   1604 ;main.c:94: SMS_init();
      000808 CDr00r00         [17] 1605 	call	_SMS_init
                                   1606 ;main.c:100: PSGPlay(special_psg);
      00080B 21r00r00         [10] 1607 	ld	hl, #_special_psg
      00080E CDr00r00         [17] 1608 	call	_PSGPlay
                                   1609 ;main.c:101: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      000811 21 20 00         [10] 1610 	ld	hl, #0x0020
      000814 CDr00r00         [17] 1611 	call	_SMS_VDPturnOnFeature
                                   1612 ;main.c:102: SMS_setFrameInterruptHandler(playMusic);
      000817 21rCBr07         [10] 1613 	ld	hl, #_playMusic
      00081A CDr00r00         [17] 1614 	call	_SMS_setFrameInterruptHandler
      00081D                       1615 00115$:
                                   1616 ;main.c:106: if (SMS_queryPauseRequested())
      00081D CDr00r00         [17] 1617 	call	_SMS_queryPauseRequested
      000820 CB 47            [ 8] 1618 	bit	0,a
      000822 28 1E            [12] 1619 	jr	Z, 00105$
                                   1620 ;main.c:108: PSGPlay(emeraldhill_psg);
      000824 21r00r00         [10] 1621 	ld	hl, #_emeraldhill_psg
      000827 CDr00r00         [17] 1622 	call	_PSGPlay
                                   1623 ;main.c:109: SMS_resetPauseRequest();
      00082A CDr00r00         [17] 1624 	call	_SMS_resetPauseRequest
                                   1625 ;main.c:110: while (!SMS_queryPauseRequested())
      00082D                       1626 00101$:
      00082D CDr00r00         [17] 1627 	call	_SMS_queryPauseRequested
      000830 CB 47            [ 8] 1628 	bit	0,a
      000832 20 05            [12] 1629 	jr	NZ, 00103$
                                   1630 ;main.c:112: SMS_waitForVBlank();
      000834 CDr00r00         [17] 1631 	call	_SMS_waitForVBlank
      000837 18 F4            [12] 1632 	jr	00101$
      000839                       1633 00103$:
                                   1634 ;main.c:116: SMS_resetPauseRequest();
      000839 CDr00r00         [17] 1635 	call	_SMS_resetPauseRequest
                                   1636 ;main.c:117: PSGPlay(titulo_psg);
      00083C 21r00r00         [10] 1637 	ld	hl, #_titulo_psg
      00083F CDr00r00         [17] 1638 	call	_PSGPlay
      000842                       1639 00105$:
                                   1640 ;main.c:121: int keys = SMS_getKeysHeld();
      000842 CDr00r00         [17] 1641 	call	_SMS_getKeysHeld
      000845 EB               [ 4] 1642 	ex	de, hl
                                   1643 ;main.c:122: if(keys & PORT_A_KEY_2)
      000846 CB 6D            [ 8] 1644 	bit	5, l
      000848 28 04            [12] 1645 	jr	Z, 00107$
                                   1646 ;main.c:123: keys = keys  ^ PORT_A_KEY_2;
      00084A 7D               [ 4] 1647 	ld	a, l
      00084B EE 20            [ 7] 1648 	xor	a, #0x20
      00084D 6F               [ 4] 1649 	ld	l, a
                                   1650 ;	spillPairReg hl
                                   1651 ;	spillPairReg hl
      00084E                       1652 00107$:
                                   1653 ;main.c:124: if(keys & PORT_A_KEY_1)
      00084E CB 65            [ 8] 1654 	bit	4, l
      000850 28 04            [12] 1655 	jr	Z, 00109$
                                   1656 ;main.c:125: keys = keys  ^ PORT_A_KEY_1;
      000852 7D               [ 4] 1657 	ld	a, l
      000853 EE 10            [ 7] 1658 	xor	a, #0x10
      000855 6F               [ 4] 1659 	ld	l, a
                                   1660 ;	spillPairReg hl
                                   1661 ;	spillPairReg hl
      000856                       1662 00109$:
                                   1663 ;main.c:127: keys = keys | (SMS_getKeysPressed() & (PORT_A_KEY_2 | PORT_A_KEY_1));
      000856 E5               [11] 1664 	push	hl
      000857 CDr00r00         [17] 1665 	call	_SMS_getKeysPressed
      00085A E1               [10] 1666 	pop	hl
      00085B 7B               [ 4] 1667 	ld	a, e
      00085C E6 30            [ 7] 1668 	and	a, #0x30
      00085E B5               [ 4] 1669 	or	a, l
      00085F 6F               [ 4] 1670 	ld	l, a
                                   1671 ;	spillPairReg hl
                                   1672 ;	spillPairReg hl
                                   1673 ;main.c:129: SMS_initSprites();
      000860 E5               [11] 1674 	push	hl
      000861 CDr00r00         [17] 1675 	call	_SMS_initSprites
      000864 E1               [10] 1676 	pop	hl
                                   1677 ;main.c:130: moveAlex(keys);
      000865 CDr36r06         [17] 1678 	call	_moveAlex
                                   1679 ;main.c:131: draw_entidad(&alex, &spriteAlex);
      000868 11r09r00         [10] 1680 	ld	de, #_spriteAlex
      00086B 21r03r00         [10] 1681 	ld	hl, #_alex
      00086E CDr59r01         [17] 1682 	call	_draw_entidad
                                   1683 ;main.c:132: dibujaPajaros();
      000871 CDr74r07         [17] 1684 	call	_dibujaPajaros
                                   1685 ;main.c:134: SMS_finalizeSprites();
      000874 CDr00r00         [17] 1686 	call	_SMS_finalizeSprites
                                   1687 ;main.c:137: SMS_waitForVBlank();
      000877 CDr00r00         [17] 1688 	call	_SMS_waitForVBlank
                                   1689 ;main.c:138: SMS_copySpritestoSAT();
      00087A CDr00r00         [17] 1690 	call	_SMS_copySpritestoSAT
                                   1691 ;main.c:141: SMS_displayOff();
      00087D 21 40 01         [10] 1692 	ld	hl, #0x0140
      000880 CDr00r00         [17] 1693 	call	_SMS_VDPturnOffFeature
                                   1694 ;main.c:142: if (scroll_y % 2 == 0)
      000883 DD CB FF 46      [20] 1695 	bit	0, -1 (ix)
      000887 20 03            [12] 1696 	jr	NZ, 00111$
                                   1697 ;main.c:143: scroll_x += 1;
      000889 DD 34 FE         [23] 1698 	inc	-2 (ix)
      00088C                       1699 00111$:
                                   1700 ;main.c:144: scroll_y++;
      00088C DD 34 FF         [23] 1701 	inc	-1 (ix)
                                   1702 ;main.c:145: if (scroll_y == 224)
      00088F DD 7E FF         [19] 1703 	ld	a, -1 (ix)
      000892 D6 E0            [ 7] 1704 	sub	a, #0xe0
      000894 20 04            [12] 1705 	jr	NZ, 00113$
                                   1706 ;main.c:146: scroll_y = 0;
      000896 DD 36 FF 00      [19] 1707 	ld	-1 (ix), #0x00
      00089A                       1708 00113$:
                                   1709 ;main.c:148: SMS_setBGScrollX(scroll_x);
      00089A DD 6E FE         [19] 1710 	ld	l, -2 (ix)
                                   1711 ;	spillPairReg hl
                                   1712 ;	spillPairReg hl
      00089D CDr00r00         [17] 1713 	call	_SMS_setBGScrollX
                                   1714 ;main.c:150: SMS_displayOn();
      0008A0 21 40 01         [10] 1715 	ld	hl, #0x0140
      0008A3 CDr00r00         [17] 1716 	call	_SMS_VDPturnOnFeature
                                   1717 ;main.c:152: }
      0008A6 C3r1Dr08         [10] 1718 	jp	00115$
      0008A9                       1719 ___str_0:
      0008A9 48 65 6C 6C 6F 2C 20  1720 	.ascii "Hello, World! [1/3]"
             57 6F 72 6C 64 21 20
             5B 31 2F 33 5D
      0008BC 00                    1721 	.db 0x00
                                   1722 	.area _CODE
      0008BD                       1723 __str_1:
      0008BD 72 61 70 68 6E 65 74  1724 	.ascii "raphnet"
      0008C4 00                    1725 	.db 0x00
      0008C5                       1726 __str_2:
      0008C5 62 61 73 69 63 20 65  1727 	.ascii "basic example"
             78 61 6D 70 6C 65
      0008D2 00                    1728 	.db 0x00
      0008D3                       1729 __str_3:
      0008D3 41 20 73 69 6D 70 6C  1730 	.ascii "A simple example"
             65 20 65 78 61 6D 70
             6C 65
      0008E3 00                    1731 	.db 0x00
                                   1732 	.area _INITIALIZER
      000000                       1733 __xinit__nextVRAMsprites:
      000000 00 01                 1734 	.dw #0x0100
      000002                       1735 __xinit__maxSalto:
      000002 FF                    1736 	.db #0xff	; 255
      000003                       1737 __xinit__alex:
      000003 1E                    1738 	.db #0x1e	; 30
      000004 14                    1739 	.db #0x14	; 20
      000005 00                    1740 	.db #0x00	; 0
      000006 00                    1741 	.db #0x00	; 0
      000007 00                    1742 	.db #0x00	; 0
      000008 00                    1743 	.db #0x00	; 0
      000009                       1744 __xinit__spriteAlex:
      000009 02                    1745 	.db #0x02	; 2
      00000A 02                    1746 	.db #0x02	; 2
      00000B 08                    1747 	.db #0x08	; 8
      00000C 00                    1748 	.db #0x00	; 0
      00000D 00 00                 1749 	.dw #0x0000
      00000F 00                    1750 	.db #0x00	; 0
      000010 00 00                 1751 	.dw #0x0000
      000012 00                    1752 	.db #0x00	; 0
      000013                       1753 __xinit__spritePajaro:
      000013 02                    1754 	.db #0x02	; 2
      000014 02                    1755 	.db #0x02	; 2
      000015 08                    1756 	.db #0x08	; 8
      000016 00                    1757 	.db #0x00	; 0
      000017 00 00                 1758 	.dw #0x0000
      000019 00                    1759 	.db #0x00	; 0
      00001A 00 00                 1760 	.dw #0x0000
      00001C 00                    1761 	.db #0x00	; 0
      00001D                       1762 __xinit__spritePuno:
      00001D 02                    1763 	.db #0x02	; 2
      00001E 02                    1764 	.db #0x02	; 2
      00001F 08                    1765 	.db #0x08	; 8
      000020 00                    1766 	.db #0x00	; 0
      000021 00 00                 1767 	.dw #0x0000
      000023 00                    1768 	.db #0x00	; 0
      000024 00 00                 1769 	.dw #0x0000
      000026 00                    1770 	.db #0x00	; 0
                                   1771 	.area _CABS (ABS)
      007FF0                       1772 	.org 0x7FF0
      007FF0                       1773 ___SMS__SEGA_signature:
      007FF0 54                    1774 	.db #0x54	; 84	'T'
      007FF1 4D                    1775 	.db #0x4d	; 77	'M'
      007FF2 52                    1776 	.db #0x52	; 82	'R'
      007FF3 20                    1777 	.db #0x20	; 32
      007FF4 53                    1778 	.db #0x53	; 83	'S'
      007FF5 45                    1779 	.db #0x45	; 69	'E'
      007FF6 47                    1780 	.db #0x47	; 71	'G'
      007FF7 41                    1781 	.db #0x41	; 65	'A'
      007FF8 FF                    1782 	.db #0xff	; 255
      007FF9 FF                    1783 	.db #0xff	; 255
      007FFA FF                    1784 	.db #0xff	; 255
      007FFB FF                    1785 	.db #0xff	; 255
      007FFC 99                    1786 	.db #0x99	; 153
      007FFD 99                    1787 	.db #0x99	; 153
      007FFE 00                    1788 	.db #0x00	; 0
      007FFF 4C                    1789 	.db #0x4c	; 76	'L'
      007FD8                       1790 	.org 0x7FD8
      007FD8                       1791 ___SMS__SDSC_author:
      007FD8 72 61 70 68 6E 65 74  1792 	.ascii "raphnet"
      007FDF 00                    1793 	.db 0x00
      007FCA                       1794 	.org 0x7FCA
      007FCA                       1795 ___SMS__SDSC_name:
      007FCA 62 61 73 69 63 20 65  1796 	.ascii "basic example"
             78 61 6D 70 6C 65
      007FD7 00                    1797 	.db 0x00
      007FB9                       1798 	.org 0x7FB9
      007FB9                       1799 ___SMS__SDSC_descr:
      007FB9 41 20 73 69 6D 70 6C  1800 	.ascii "A simple example"
             65 20 65 78 61 6D 70
             6C 65
      007FC9 00                    1801 	.db 0x00
      007FE0                       1802 	.org 0x7FE0
      007FE0                       1803 ___SMS__SDSC_signature:
      007FE0 53                    1804 	.db #0x53	; 83	'S'
      007FE1 44                    1805 	.db #0x44	; 68	'D'
      007FE2 53                    1806 	.db #0x53	; 83	'S'
      007FE3 43                    1807 	.db #0x43	; 67	'C'
      007FE4 01                    1808 	.db #0x01	; 1
      007FE5 00                    1809 	.db #0x00	; 0
      007FE6 00                    1810 	.db #0x00	; 0
      007FE7 00                    1811 	.db #0x00	; 0
      007FE8 00                    1812 	.db #0x00	; 0
      007FE9 00                    1813 	.db #0x00	; 0
      007FEA D8                    1814 	.db #0xd8	; 216
      007FEB 7F                    1815 	.db #0x7f	; 127
      007FEC CA                    1816 	.db #0xca	; 202
      007FED 7F                    1817 	.db #0x7f	; 127
      007FEE B9                    1818 	.db #0xb9	; 185
      007FEF 7F                    1819 	.db #0x7f	; 127
