                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14549 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___SMS__SDSC_signature
                                     12 	.globl ___SMS__SDSC_descr
                                     13 	.globl ___SMS__SDSC_name
                                     14 	.globl ___SMS__SDSC_author
                                     15 	.globl ___SMS__SEGA_signature
                                     16 	.globl _main
                                     17 	.globl _dibujaPajaros
                                     18 	.globl _loadGrapVRAM
                                     19 	.globl _inicializaPajaros
                                     20 	.globl _moveAlex
                                     21 	.globl _moveAlexAire
                                     22 	.globl _moveAlexSuelo
                                     23 	.globl _canRight
                                     24 	.globl _canLeft
                                     25 	.globl _canDown
                                     26 	.globl _canUp
                                     27 	.globl _SMS_VRAMmemsetW
                                     28 	.globl _SMS_VRAMmemcpy
                                     29 	.globl _SMS_resetPauseRequest
                                     30 	.globl _SMS_queryPauseRequested
                                     31 	.globl _SMS_getKeysHeld
                                     32 	.globl _SMS_loadSpritePalette
                                     33 	.globl _SMS_loadBGPalette
                                     34 	.globl _SMS_copySpritestoSAT
                                     35 	.globl _SMS_finalizeSprites
                                     36 	.globl _SMS_initSprites
                                     37 	.globl _SMS_waitForVBlank
                                     38 	.globl _SMS_setSpriteMode
                                     39 	.globl _SMS_setBGScrollY
                                     40 	.globl _SMS_setBGScrollX
                                     41 	.globl _SMS_VDPturnOffFeature
                                     42 	.globl _SMS_VDPturnOnFeature
                                     43 	.globl _SMS_init
                                     44 	.globl _PSGFrame
                                     45 	.globl _PSGPlay
                                     46 	.globl _printf
                                     47 	.globl _spritePajaro
                                     48 	.globl _spriteAlex
                                     49 	.globl _alex
                                     50 	.globl _maxSalto
                                     51 	.globl _nextVRAMsprites
                                     52 	.globl _pajaros
                                     53 	.globl _SMS_SRAM
                                     54 	.globl _SRAM_bank_to_be_mapped_on_slot2
                                     55 	.globl _ROM_bank_to_be_mapped_on_slot0
                                     56 	.globl _ROM_bank_to_be_mapped_on_slot1
                                     57 	.globl _ROM_bank_to_be_mapped_on_slot2
                                     58 	.globl _generateSprite
                                     59 	.globl _generateSpriteNoRAM
                                     60 	.globl _draw_entidad
                                     61 ;--------------------------------------------------------
                                     62 ; special function registers
                                     63 ;--------------------------------------------------------
                                     64 ;--------------------------------------------------------
                                     65 ; ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area _DATA
                           00FFFF    68 _ROM_bank_to_be_mapped_on_slot2	=	0xffff
                           00FFFE    69 _ROM_bank_to_be_mapped_on_slot1	=	0xfffe
                           00FFFD    70 _ROM_bank_to_be_mapped_on_slot0	=	0xfffd
                           00FFFC    71 _SRAM_bank_to_be_mapped_on_slot2	=	0xfffc
                           008000    72 _SMS_SRAM	=	0x8000
      000000                         73 _pajaros::
      000000                         74 	.ds 60
                                     75 ;--------------------------------------------------------
                                     76 ; ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area _INITIALIZED
      000000                         79 _nextVRAMsprites::
      000000                         80 	.ds 2
      000002                         81 _maxSalto::
      000002                         82 	.ds 1
      000003                         83 _alex::
      000003                         84 	.ds 6
      000009                         85 _spriteAlex::
      000009                         86 	.ds 10
      000013                         87 _spritePajaro::
      000013                         88 	.ds 10
                                     89 ;--------------------------------------------------------
                                     90 ; absolute external ram data
                                     91 ;--------------------------------------------------------
                                     92 	.area _DABS (ABS)
                                     93 ;--------------------------------------------------------
                                     94 ; global & static initialisations
                                     95 ;--------------------------------------------------------
                                     96 	.area _HOME
                                     97 	.area _GSINIT
                                     98 	.area _GSFINAL
                                     99 	.area _GSINIT
                                    100 ;--------------------------------------------------------
                                    101 ; Home
                                    102 ;--------------------------------------------------------
                                    103 	.area _HOME
                                    104 	.area _HOME
                                    105 ;--------------------------------------------------------
                                    106 ; code
                                    107 ;--------------------------------------------------------
                                    108 	.area _CODE
                                    109 ;./lib/./sprite.c:18: T_sprite generateSprite(unsigned char ancho, unsigned char alto, int tam,const unsigned char data[]) {
                                    110 ;	---------------------------------
                                    111 ; Function generateSprite
                                    112 ; ---------------------------------
      000000                        113 _generateSprite::
      000000 DD E5            [15]  114 	push	ix
      000002 DD 21 00 00      [14]  115 	ld	ix,#0
      000006 DD 39            [15]  116 	add	ix,sp
      000008 FD 21 F6 FF      [14]  117 	ld	iy, #-10
      00000C FD 39            [15]  118 	add	iy, sp
      00000E FD F9            [10]  119 	ld	sp, iy
      000010 5F               [ 4]  120 	ld	e, a
      000011 55               [ 4]  121 	ld	d, l
                                    122 ;./lib/./sprite.c:19: unsigned char tamano = alto*ancho*2;
      000012 D5               [11]  123 	push	de
      000013 62               [ 4]  124 	ld	h, d
                                    125 ;	spillPairReg hl
                                    126 ;	spillPairReg hl
      000014 2E 00            [ 7]  127 	ld	l, #0x00
      000016 55               [ 4]  128 	ld	d, l
      000017 06 08            [ 7]  129 	ld	b, #0x08
      000019                        130 00103$:
      000019 29               [11]  131 	add	hl, hl
      00001A 30 01            [12]  132 	jr	NC, 00104$
      00001C 19               [11]  133 	add	hl, de
      00001D                        134 00104$:
      00001D 10 FA            [13]  135 	djnz	00103$
      00001F D1               [10]  136 	pop	de
      000020 4D               [ 4]  137 	ld	c, l
      000021 CB 21            [ 8]  138 	sla	c
                                    139 ;./lib/./sprite.c:20: T_sprite sprite = {alto,ancho,tamano,tam/(tamano*32),nextVRAMsprites, 1,0};
      000023 DD 72 F6         [19]  140 	ld	-10 (ix), d
      000026 DD 73 F7         [19]  141 	ld	-9 (ix), e
      000029 DD 71 F8         [19]  142 	ld	-8 (ix), c
      00002C 69               [ 4]  143 	ld	l, c
                                    144 ;	spillPairReg hl
                                    145 ;	spillPairReg hl
      00002D 26 00            [ 7]  146 	ld	h, #0x00
                                    147 ;	spillPairReg hl
                                    148 ;	spillPairReg hl
      00002F 29               [11]  149 	add	hl, hl
      000030 29               [11]  150 	add	hl, hl
      000031 29               [11]  151 	add	hl, hl
      000032 29               [11]  152 	add	hl, hl
      000033 29               [11]  153 	add	hl, hl
      000034 C5               [11]  154 	push	bc
      000035 EB               [ 4]  155 	ex	de, hl
      000036 DD 6E 06         [19]  156 	ld	l, 6 (ix)
                                    157 ;	spillPairReg hl
                                    158 ;	spillPairReg hl
      000039 DD 66 07         [19]  159 	ld	h, 7 (ix)
                                    160 ;	spillPairReg hl
                                    161 ;	spillPairReg hl
      00003C CDr00r00         [17]  162 	call	__divsint
      00003F C1               [10]  163 	pop	bc
      000040 DD 73 F9         [19]  164 	ld	-7 (ix), e
      000043 3Ar00r00         [13]  165 	ld	a, (_nextVRAMsprites+0)
      000046 DD 77 FA         [19]  166 	ld	-6 (ix), a
      000049 3Ar01r00         [13]  167 	ld	a, (_nextVRAMsprites+1)
      00004C DD 77 FB         [19]  168 	ld	-5 (ix), a
      00004F DD 36 FC 01      [19]  169 	ld	-4 (ix), #0x01
      000053 AF               [ 4]  170 	xor	a, a
      000054 DD 77 FD         [19]  171 	ld	-3 (ix), a
      000057 DD 77 FE         [19]  172 	ld	-2 (ix), a
      00005A DD 36 FF 00      [19]  173 	ld	-1 (ix), #0x00
                                    174 ;./lib/./sprite.c:21: SMS_loadTiles(data,nextVRAMsprites,tam);
      00005E DD 5E 08         [19]  175 	ld	e, 8 (ix)
      000061 DD 56 09         [19]  176 	ld	d, 9 (ix)
      000064 2Ar00r00         [16]  177 	ld	hl, (_nextVRAMsprites)
      000067 29               [11]  178 	add	hl, hl
      000068 29               [11]  179 	add	hl, hl
      000069 29               [11]  180 	add	hl, hl
      00006A 29               [11]  181 	add	hl, hl
      00006B 29               [11]  182 	add	hl, hl
      00006C CB F4            [ 8]  183 	set	6, h
      00006E C5               [11]  184 	push	bc
      00006F E5               [11]  185 	push	hl
      000070 DD 6E 06         [19]  186 	ld	l, 6 (ix)
                                    187 ;	spillPairReg hl
                                    188 ;	spillPairReg hl
      000073 DD 66 07         [19]  189 	ld	h, 7 (ix)
                                    190 ;	spillPairReg hl
                                    191 ;	spillPairReg hl
      000076 E3               [19]  192 	ex	(sp), hl
      000077 CDr00r00         [17]  193 	call	_SMS_VRAMmemcpy
      00007A C1               [10]  194 	pop	bc
                                    195 ;./lib/./sprite.c:22: nextVRAMsprites = nextVRAMsprites + (tamano*sprite.numFrames);
      00007B DD 5E F9         [19]  196 	ld	e, -7 (ix)
      00007E 61               [ 4]  197 	ld	h, c
                                    198 ;	spillPairReg hl
                                    199 ;	spillPairReg hl
      00007F 2E 00            [ 7]  200 	ld	l, #0x00
      000081 55               [ 4]  201 	ld	d, l
      000082 06 08            [ 7]  202 	ld	b, #0x08
      000084                        203 00105$:
      000084 29               [11]  204 	add	hl, hl
      000085 30 01            [12]  205 	jr	NC, 00106$
      000087 19               [11]  206 	add	hl, de
      000088                        207 00106$:
      000088 10 FA            [13]  208 	djnz	00105$
      00008A EB               [ 4]  209 	ex	de, hl
      00008B 21r00r00         [10]  210 	ld	hl, #_nextVRAMsprites
      00008E 7E               [ 7]  211 	ld	a, (hl)
      00008F 83               [ 4]  212 	add	a, e
      000090 77               [ 7]  213 	ld	(hl), a
      000091 23               [ 6]  214 	inc	hl
      000092 7E               [ 7]  215 	ld	a, (hl)
      000093 8A               [ 4]  216 	adc	a, d
      000094 77               [ 7]  217 	ld	(hl), a
                                    218 ;./lib/./sprite.c:23: return sprite;
      000095 21 0E 00         [10]  219 	ld	hl, #14
      000098 39               [11]  220 	add	hl, sp
      000099 5E               [ 7]  221 	ld	e, (hl)
      00009A 23               [ 6]  222 	inc	hl
      00009B 56               [ 7]  223 	ld	d, (hl)
      00009C 21 00 00         [10]  224 	ld	hl, #0
      00009F 39               [11]  225 	add	hl, sp
      0000A0 01 0A 00         [10]  226 	ld	bc, #10
      0000A3 ED B0            [21]  227 	ldir
                                    228 ;./lib/./sprite.c:24: }
      0000A5 DD F9            [10]  229 	ld	sp, ix
      0000A7 DD E1            [14]  230 	pop	ix
      0000A9 C9               [10]  231 	ret
                                    232 ;./lib/./sprite.c:26: T_sprite generateSpriteNoRAM(unsigned char ancho, unsigned char alto, int tam,const unsigned char data[]) {
                                    233 ;	---------------------------------
                                    234 ; Function generateSpriteNoRAM
                                    235 ; ---------------------------------
      0000AA                        236 _generateSpriteNoRAM::
      0000AA DD E5            [15]  237 	push	ix
      0000AC DD 21 00 00      [14]  238 	ld	ix,#0
      0000B0 DD 39            [15]  239 	add	ix,sp
      0000B2 FD 21 F4 FF      [14]  240 	ld	iy, #-12
      0000B6 FD 39            [15]  241 	add	iy, sp
      0000B8 FD F9            [10]  242 	ld	sp, iy
      0000BA 5F               [ 4]  243 	ld	e, a
      0000BB 55               [ 4]  244 	ld	d, l
                                    245 ;./lib/./sprite.c:27: unsigned char tamano = alto*ancho*2;
      0000BC D5               [11]  246 	push	de
      0000BD 62               [ 4]  247 	ld	h, d
                                    248 ;	spillPairReg hl
                                    249 ;	spillPairReg hl
      0000BE 2E 00            [ 7]  250 	ld	l, #0x00
      0000C0 55               [ 4]  251 	ld	d, l
      0000C1 06 08            [ 7]  252 	ld	b, #0x08
      0000C3                        253 00103$:
      0000C3 29               [11]  254 	add	hl, hl
      0000C4 30 01            [12]  255 	jr	NC, 00104$
      0000C6 19               [11]  256 	add	hl, de
      0000C7                        257 00104$:
      0000C7 10 FA            [13]  258 	djnz	00103$
      0000C9 D1               [10]  259 	pop	de
      0000CA 4D               [ 4]  260 	ld	c, l
      0000CB CB 21            [ 8]  261 	sla	c
                                    262 ;./lib/./sprite.c:28: T_sprite sprite = {alto,ancho,tamano,tam/(tamano*32),nextVRAMsprites, 0,0};
      0000CD DD 72 F4         [19]  263 	ld	-12 (ix), d
      0000D0 DD 73 F5         [19]  264 	ld	-11 (ix), e
      0000D3 DD 71 F6         [19]  265 	ld	-10 (ix), c
                                    266 ;	spillPairReg hl
                                    267 ;	spillPairReg hl
      0000D6 DD 71 FE         [19]  268 	ld	-2 (ix), c
      0000D9 DD 36 FF 00      [19]  269 	ld	-1 (ix), #0x00
      0000DD 69               [ 4]  270 	ld	l, c
      0000DE 26 00            [ 7]  271 	ld	h, #0x00
                                    272 ;	spillPairReg hl
                                    273 ;	spillPairReg hl
      0000E0 29               [11]  274 	add	hl, hl
      0000E1 29               [11]  275 	add	hl, hl
      0000E2 29               [11]  276 	add	hl, hl
      0000E3 29               [11]  277 	add	hl, hl
      0000E4 29               [11]  278 	add	hl, hl
      0000E5 EB               [ 4]  279 	ex	de,hl
      0000E6 D5               [11]  280 	push	de
      0000E7 DD 6E 06         [19]  281 	ld	l, 6 (ix)
                                    282 ;	spillPairReg hl
                                    283 ;	spillPairReg hl
      0000EA DD 66 07         [19]  284 	ld	h, 7 (ix)
                                    285 ;	spillPairReg hl
                                    286 ;	spillPairReg hl
      0000ED CDr00r00         [17]  287 	call	__divsint
      0000F0 EB               [ 4]  288 	ex	de, hl
      0000F1 D1               [10]  289 	pop	de
      0000F2 DD 75 F7         [19]  290 	ld	-9 (ix), l
      0000F5 3Ar00r00         [13]  291 	ld	a, (_nextVRAMsprites+0)
      0000F8 DD 77 F8         [19]  292 	ld	-8 (ix), a
      0000FB 3Ar01r00         [13]  293 	ld	a, (_nextVRAMsprites+1)
      0000FE DD 77 F9         [19]  294 	ld	-7 (ix), a
      000101 DD 36 FA 00      [19]  295 	ld	-6 (ix), #0x00
      000105 AF               [ 4]  296 	xor	a, a
      000106 DD 77 FB         [19]  297 	ld	-5 (ix), a
      000109 DD 77 FC         [19]  298 	ld	-4 (ix), a
      00010C DD 36 FD 00      [19]  299 	ld	-3 (ix), #0x00
                                    300 ;./lib/./sprite.c:29: sprite.data = data;
      000110 DD 7E 08         [19]  301 	ld	a, 8 (ix)
      000113 DD 77 FB         [19]  302 	ld	-5 (ix), a
      000116 DD 7E 09         [19]  303 	ld	a, 9 (ix)
      000119 DD 77 FC         [19]  304 	ld	-4 (ix), a
                                    305 ;./lib/./sprite.c:30: sprite.frameInVRAM = 0;
      00011C DD 36 FD 00      [19]  306 	ld	-3 (ix), #0x00
                                    307 ;./lib/./sprite.c:31: SMS_loadTiles(data,nextVRAMsprites,tamano*32);
      000120 DD 4E 08         [19]  308 	ld	c, 8 (ix)
      000123 DD 46 09         [19]  309 	ld	b, 9 (ix)
      000126 2Ar00r00         [16]  310 	ld	hl, (_nextVRAMsprites)
      000129 29               [11]  311 	add	hl, hl
      00012A 29               [11]  312 	add	hl, hl
      00012B 29               [11]  313 	add	hl, hl
      00012C 29               [11]  314 	add	hl, hl
      00012D 29               [11]  315 	add	hl, hl
      00012E CB F4            [ 8]  316 	set	6, h
      000130 D5               [11]  317 	push	de
      000131 59               [ 4]  318 	ld	e, c
      000132 50               [ 4]  319 	ld	d, b
      000133 CDr00r00         [17]  320 	call	_SMS_VRAMmemcpy
                                    321 ;./lib/./sprite.c:32: nextVRAMsprites = nextVRAMsprites + (tamano);
      000136 21r00r00         [10]  322 	ld	hl, #_nextVRAMsprites
      000139 7E               [ 7]  323 	ld	a, (hl)
      00013A DD 86 FE         [19]  324 	add	a, -2 (ix)
      00013D 77               [ 7]  325 	ld	(hl), a
      00013E 23               [ 6]  326 	inc	hl
      00013F 7E               [ 7]  327 	ld	a, (hl)
      000140 DD 8E FF         [19]  328 	adc	a, -1 (ix)
      000143 77               [ 7]  329 	ld	(hl), a
                                    330 ;./lib/./sprite.c:33: return sprite;
      000144 21 10 00         [10]  331 	ld	hl, #16
      000147 39               [11]  332 	add	hl, sp
      000148 5E               [ 7]  333 	ld	e, (hl)
      000149 23               [ 6]  334 	inc	hl
      00014A 56               [ 7]  335 	ld	d, (hl)
      00014B 21 00 00         [10]  336 	ld	hl, #0
      00014E 39               [11]  337 	add	hl, sp
      00014F 01 0A 00         [10]  338 	ld	bc, #10
      000152 ED B0            [21]  339 	ldir
                                    340 ;./lib/./sprite.c:34: }
      000154 DD F9            [10]  341 	ld	sp, ix
      000156 DD E1            [14]  342 	pop	ix
      000158 C9               [10]  343 	ret
                                    344 ;./lib/entities.c:10: void draw_entidad(T_entidad *entidad, T_sprite *sprite){
                                    345 ;	---------------------------------
                                    346 ; Function draw_entidad
                                    347 ; ---------------------------------
      000159                        348 _draw_entidad::
      000159 DD E5            [15]  349 	push	ix
      00015B DD 21 00 00      [14]  350 	ld	ix,#0
      00015F DD 39            [15]  351 	add	ix,sp
      000161 FD 21 EF FF      [14]  352 	ld	iy, #-17
      000165 FD 39            [15]  353 	add	iy, sp
      000167 FD F9            [10]  354 	ld	sp, iy
      000169 DD 75 FC         [19]  355 	ld	-4 (ix), l
      00016C DD 74 FD         [19]  356 	ld	-3 (ix), h
                                    357 ;./lib/entities.c:12: if (sprite->allInRAM == 1){
      00016F DD 73 FA         [19]  358 	ld	-6 (ix), e
      000172 DD 72 FB         [19]  359 	ld	-5 (ix), d
      000175 4B               [ 4]  360 	ld	c, e
      000176 42               [ 4]  361 	ld	b, d
      000177 21 06 00         [10]  362 	ld	hl, #6
      00017A 09               [11]  363 	add	hl, bc
      00017B 4E               [ 7]  364 	ld	c, (hl)
                                    365 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      00017C DD 5E FA         [19]  366 	ld	e, -6 (ix)
      00017F DD 56 FB         [19]  367 	ld	d, -5 (ix)
      000182 DD 7E FC         [19]  368 	ld	a, -4 (ix)
      000185 C6 02            [ 7]  369 	add	a, #0x02
      000187 DD 77 F0         [19]  370 	ld	-16 (ix), a
      00018A DD 7E FD         [19]  371 	ld	a, -3 (ix)
      00018D CE 00            [ 7]  372 	adc	a, #0x00
      00018F DD 77 F1         [19]  373 	ld	-15 (ix), a
      000192 DD 7E FA         [19]  374 	ld	a, -6 (ix)
      000195 C6 04            [ 7]  375 	add	a, #0x04
      000197 DD 77 F2         [19]  376 	ld	-14 (ix), a
      00019A DD 7E FB         [19]  377 	ld	a, -5 (ix)
      00019D CE 00            [ 7]  378 	adc	a, #0x00
      00019F DD 77 F3         [19]  379 	ld	-13 (ix), a
                                    380 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      0001A2 DD 7E FC         [19]  381 	ld	a, -4 (ix)
      0001A5 C6 01            [ 7]  382 	add	a, #0x01
      0001A7 DD 77 F8         [19]  383 	ld	-8 (ix), a
      0001AA DD 7E FD         [19]  384 	ld	a, -3 (ix)
      0001AD CE 00            [ 7]  385 	adc	a, #0x00
      0001AF DD 77 F9         [19]  386 	ld	-7 (ix), a
      0001B2 DD 7E FA         [19]  387 	ld	a, -6 (ix)
      0001B5 C6 01            [ 7]  388 	add	a, #0x01
      0001B7 DD 77 FE         [19]  389 	ld	-2 (ix), a
      0001BA DD 7E FB         [19]  390 	ld	a, -5 (ix)
      0001BD CE 00            [ 7]  391 	adc	a, #0x00
      0001BF DD 77 FF         [19]  392 	ld	-1 (ix), a
                                    393 ;./lib/entities.c:23: int frame = sprite->tamano*entidad->frame*32;
      0001C2 DD 6E F0         [19]  394 	ld	l, -16 (ix)
      0001C5 DD 66 F1         [19]  395 	ld	h, -15 (ix)
      0001C8 7E               [ 7]  396 	ld	a, (hl)
      0001C9 DD 77 F4         [19]  397 	ld	-12 (ix), a
                                    398 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      0001CC 13               [ 6]  399 	inc	de
      0001CD 13               [ 6]  400 	inc	de
      0001CE 1A               [ 7]  401 	ld	a, (de)
      0001CF DD 77 F5         [19]  402 	ld	-11 (ix), a
                                    403 ;./lib/entities.c:12: if (sprite->allInRAM == 1){
      0001D2 0D               [ 4]  404 	dec	c
      0001D3 C2r98r02         [10]  405 	jp	NZ,00108$
                                    406 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      0001D6 DD 5E F5         [19]  407 	ld	e, -11 (ix)
      0001D9 DD 66 F4         [19]  408 	ld	h, -12 (ix)
                                    409 ;	spillPairReg hl
                                    410 ;	spillPairReg hl
      0001DC 2E 00            [ 7]  411 	ld	l, #0x00
      0001DE 55               [ 4]  412 	ld	d, l
      0001DF 06 08            [ 7]  413 	ld	b, #0x08
      0001E1                        414 00200$:
      0001E1 29               [11]  415 	add	hl, hl
      0001E2 30 01            [12]  416 	jr	NC, 00201$
      0001E4 19               [11]  417 	add	hl, de
      0001E5                        418 00201$:
      0001E5 10 FA            [13]  419 	djnz	00200$
      0001E7 4D               [ 4]  420 	ld	c, l
      0001E8 DD 6E F2         [19]  421 	ld	l, -14 (ix)
      0001EB DD 66 F3         [19]  422 	ld	h, -13 (ix)
      0001EE 7E               [ 7]  423 	ld	a, (hl)
      0001EF 81               [ 4]  424 	add	a, c
      0001F0 DD 77 EF         [19]  425 	ld	-17 (ix), a
                                    426 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      0001F3 DD 7E F8         [19]  427 	ld	a, -8 (ix)
      0001F6 DD 77 F0         [19]  428 	ld	-16 (ix), a
      0001F9 DD 7E F9         [19]  429 	ld	a, -7 (ix)
      0001FC DD 77 F1         [19]  430 	ld	-15 (ix), a
      0001FF DD 7E FE         [19]  431 	ld	a, -2 (ix)
      000202 DD 77 F2         [19]  432 	ld	-14 (ix), a
      000205 DD 7E FF         [19]  433 	ld	a, -1 (ix)
      000208 DD 77 F3         [19]  434 	ld	-13 (ix), a
      00020B DD 36 FE 00      [19]  435 	ld	-2 (ix), #0x00
      00020F                        436 00114$:
      00020F DD 6E FA         [19]  437 	ld	l, -6 (ix)
      000212 DD 66 FB         [19]  438 	ld	h, -5 (ix)
      000215 DD 7E FE         [19]  439 	ld	a,-2 (ix)
      000218 96               [ 7]  440 	sub	a,(hl)
      000219 D2r84r03         [10]  441 	jp	NC, 00122$
                                    442 ;./lib/entities.c:15: unsigned char desplazado = (j<<2);
      00021C DD 7E FE         [19]  443 	ld	a, -2 (ix)
      00021F 87               [ 4]  444 	add	a, a
      000220 87               [ 4]  445 	add	a, a
                                    446 ;./lib/entities.c:16: unsigned char jCalculated = desplazado + frame, y = entidad->y+(desplazado<<2);
      000221 47               [ 4]  447 	ld	b, a
      000222 DD 86 EF         [19]  448 	add	a, -17 (ix)
      000225 DD 77 F4         [19]  449 	ld	-12 (ix), a
      000228 DD 6E F0         [19]  450 	ld	l, -16 (ix)
      00022B DD 66 F1         [19]  451 	ld	h, -15 (ix)
      00022E 4E               [ 7]  452 	ld	c, (hl)
      00022F 78               [ 4]  453 	ld	a, b
      000230 87               [ 4]  454 	add	a, a
      000231 87               [ 4]  455 	add	a, a
      000232 81               [ 4]  456 	add	a, c
      000233 DD 77 F5         [19]  457 	ld	-11 (ix), a
                                    458 ;./lib/entities.c:17: for(i=0;i<sprite->ancho;i++) {
      000236 DD 36 FF 00      [19]  459 	ld	-1 (ix), #0x00
      00023A                        460 00111$:
      00023A DD 6E F2         [19]  461 	ld	l, -14 (ix)
      00023D DD 66 F3         [19]  462 	ld	h, -13 (ix)
      000240 DD 7E FF         [19]  463 	ld	a,-1 (ix)
      000243 96               [ 7]  464 	sub	a,(hl)
      000244 30 4C            [12]  465 	jr	NC, 00115$
                                    466 ;./lib/entities.c:18: SMS_addSprite(entidad->x+(i<<3),y, jCalculated + (i<<1) );  
      000246 DD 6E FC         [19]  467 	ld	l, -4 (ix)
      000249 DD 66 FD         [19]  468 	ld	h, -3 (ix)
      00024C 7E               [ 7]  469 	ld	a, (hl)
      00024D DD 77 F9         [19]  470 	ld	-7 (ix), a
      000250 DD 77 F6         [19]  471 	ld	-10 (ix), a
      000253 DD 36 F7 00      [19]  472 	ld	-9 (ix), #0x00
      000257 DD 7E FF         [19]  473 	ld	a, -1 (ix)
      00025A DD 77 F8         [19]  474 	ld	-8 (ix), a
      00025D DD 36 F9 00      [19]  475 	ld	-7 (ix), #0x00
      000261 6F               [ 4]  476 	ld	l, a
      000262 26 00            [ 7]  477 	ld	h, #0x00
      000264 29               [11]  478 	add	hl, hl
      000265 29               [11]  479 	add	hl, hl
      000266 29               [11]  480 	add	hl, hl
      000267 DD 5E F6         [19]  481 	ld	e, -10 (ix)
      00026A 16 00            [ 7]  482 	ld	d, #0x00
      00026C 19               [11]  483 	add	hl, de
      00026D 45               [ 4]  484 	ld	b, l
      00026E 0E 00            [ 7]  485 	ld	c, #0x00
      000270 DD 5E F4         [19]  486 	ld	e, -12 (ix)
      000273 16 00            [ 7]  487 	ld	d, #0x00
      000275 DD 6E F8         [19]  488 	ld	l, -8 (ix)
      000278 DD 66 F9         [19]  489 	ld	h, -7 (ix)
      00027B 29               [11]  490 	add	hl, hl
      00027C 19               [11]  491 	add	hl, de
      00027D 7D               [ 4]  492 	ld	a, l
      00027E 16 00            [ 7]  493 	ld	d, #0x00
      000280 B1               [ 4]  494 	or	a, c
      000281 5F               [ 4]  495 	ld	e, a
      000282 7A               [ 4]  496 	ld	a, d
      000283 B0               [ 4]  497 	or	a, b
      000284 57               [ 4]  498 	ld	d, a
      000285 DD 6E F5         [19]  499 	ld	l, -11 (ix)
                                    500 ;	spillPairReg hl
                                    501 ;	spillPairReg hl
      000288 26 00            [ 7]  502 	ld	h, #0x00
                                    503 ;	spillPairReg hl
                                    504 ;	spillPairReg hl
      00028A CDr00r00         [17]  505 	call	_SMS_addSprite_f
                                    506 ;./lib/entities.c:17: for(i=0;i<sprite->ancho;i++) {
      00028D DD 34 FF         [23]  507 	inc	-1 (ix)
      000290 18 A8            [12]  508 	jr	00111$
      000292                        509 00115$:
                                    510 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      000292 DD 34 FE         [23]  511 	inc	-2 (ix)
      000295 C3r0Fr02         [10]  512 	jp	00114$
      000298                        513 00108$:
                                    514 ;./lib/entities.c:23: int frame = sprite->tamano*entidad->frame*32;
      000298 DD 5E F4         [19]  515 	ld	e, -12 (ix)
      00029B DD 66 F5         [19]  516 	ld	h, -11 (ix)
                                    517 ;	spillPairReg hl
                                    518 ;	spillPairReg hl
      00029E 2E 00            [ 7]  519 	ld	l, #0x00
      0002A0 55               [ 4]  520 	ld	d, l
      0002A1 06 08            [ 7]  521 	ld	b, #0x08
      0002A3                        522 00202$:
      0002A3 29               [11]  523 	add	hl, hl
      0002A4 30 01            [12]  524 	jr	NC, 00203$
      0002A6 19               [11]  525 	add	hl, de
      0002A7                        526 00203$:
      0002A7 10 FA            [13]  527 	djnz	00202$
      0002A9 29               [11]  528 	add	hl, hl
      0002AA 29               [11]  529 	add	hl, hl
      0002AB 29               [11]  530 	add	hl, hl
      0002AC 29               [11]  531 	add	hl, hl
      0002AD 29               [11]  532 	add	hl, hl
      0002AE DD 75 F6         [19]  533 	ld	-10 (ix), l
      0002B1 DD 74 F7         [19]  534 	ld	-9 (ix), h
                                    535 ;./lib/entities.c:24: if (entidad->frame != sprite->frameInVRAM){
      0002B4 DD 7E FA         [19]  536 	ld	a, -6 (ix)
      0002B7 C6 09            [ 7]  537 	add	a, #0x09
      0002B9 4F               [ 4]  538 	ld	c, a
      0002BA DD 7E FB         [19]  539 	ld	a, -5 (ix)
      0002BD CE 00            [ 7]  540 	adc	a, #0x00
      0002BF 47               [ 4]  541 	ld	b, a
      0002C0 0A               [ 7]  542 	ld	a, (bc)
      0002C1 5F               [ 4]  543 	ld	e, a
      0002C2 DD 7E F4         [19]  544 	ld	a, -12 (ix)
      0002C5 93               [ 4]  545 	sub	a, e
      0002C6 28 42            [12]  546 	jr	Z, 00133$
                                    547 ;./lib/entities.c:25: SMS_loadTiles(sprite->data + frame,sprite->beginVRAM,sprite->tamano<<5);
      0002C8 DD 6E F5         [19]  548 	ld	l, -11 (ix)
                                    549 ;	spillPairReg hl
                                    550 ;	spillPairReg hl
      0002CB 26 00            [ 7]  551 	ld	h, #0x00
                                    552 ;	spillPairReg hl
                                    553 ;	spillPairReg hl
      0002CD 29               [11]  554 	add	hl, hl
      0002CE 29               [11]  555 	add	hl, hl
      0002CF 29               [11]  556 	add	hl, hl
      0002D0 29               [11]  557 	add	hl, hl
      0002D1 29               [11]  558 	add	hl, hl
      0002D2 E5               [11]  559 	push	hl
      0002D3 FD E1            [14]  560 	pop	iy
      0002D5 DD 5E FA         [19]  561 	ld	e, -6 (ix)
      0002D8 DD 56 FB         [19]  562 	ld	d, -5 (ix)
      0002DB 21 07 00         [10]  563 	ld	hl, #7
      0002DE 19               [11]  564 	add	hl, de
      0002DF 5E               [ 7]  565 	ld	e, (hl)
      0002E0 23               [ 6]  566 	inc	hl
      0002E1 56               [ 7]  567 	ld	d, (hl)
      0002E2 DD 6E F6         [19]  568 	ld	l, -10 (ix)
                                    569 ;	spillPairReg hl
                                    570 ;	spillPairReg hl
      0002E5 DD 66 F7         [19]  571 	ld	h, -9 (ix)
                                    572 ;	spillPairReg hl
                                    573 ;	spillPairReg hl
      0002E8 19               [11]  574 	add	hl, de
      0002E9 EB               [ 4]  575 	ex	de, hl
      0002EA DD 6E F2         [19]  576 	ld	l, -14 (ix)
      0002ED DD 66 F3         [19]  577 	ld	h, -13 (ix)
      0002F0 7E               [ 7]  578 	ld	a, (hl)
      0002F1 23               [ 6]  579 	inc	hl
      0002F2 66               [ 7]  580 	ld	h, (hl)
                                    581 ;	spillPairReg hl
      0002F3 6F               [ 4]  582 	ld	l, a
                                    583 ;	spillPairReg hl
                                    584 ;	spillPairReg hl
      0002F4 29               [11]  585 	add	hl, hl
      0002F5 29               [11]  586 	add	hl, hl
      0002F6 29               [11]  587 	add	hl, hl
      0002F7 29               [11]  588 	add	hl, hl
      0002F8 29               [11]  589 	add	hl, hl
      0002F9 CB F4            [ 8]  590 	set	6, h
      0002FB C5               [11]  591 	push	bc
      0002FC FD E5            [15]  592 	push	iy
      0002FE CDr00r00         [17]  593 	call	_SMS_VRAMmemcpy
      000301 C1               [10]  594 	pop	bc
                                    595 ;./lib/entities.c:26: sprite->frameInVRAM = entidad->frame;
      000302 DD 6E F0         [19]  596 	ld	l, -16 (ix)
      000305 DD 66 F1         [19]  597 	ld	h, -15 (ix)
      000308 7E               [ 7]  598 	ld	a, (hl)
      000309 02               [ 7]  599 	ld	(bc), a
                                    600 ;./lib/entities.c:28: for(j=0;j<sprite->alto;j++) {
      00030A                        601 00133$:
      00030A DD 7E FE         [19]  602 	ld	a, -2 (ix)
      00030D DD 77 F6         [19]  603 	ld	-10 (ix), a
      000310 DD 7E FF         [19]  604 	ld	a, -1 (ix)
      000313 DD 77 F7         [19]  605 	ld	-9 (ix), a
      000316 DD 36 FF 00      [19]  606 	ld	-1 (ix), #0x00
      00031A                        607 00120$:
      00031A DD 6E FA         [19]  608 	ld	l, -6 (ix)
      00031D DD 66 FB         [19]  609 	ld	h, -5 (ix)
      000320 DD 7E FF         [19]  610 	ld	a,-1 (ix)
      000323 96               [ 7]  611 	sub	a,(hl)
      000324 30 5E            [12]  612 	jr	NC, 00122$
                                    613 ;./lib/entities.c:29: for(i=0;i<sprite->ancho;i++) {
      000326 0E 00            [ 7]  614 	ld	c, #0x00
      000328                        615 00117$:
      000328 DD 6E F6         [19]  616 	ld	l, -10 (ix)
      00032B DD 66 F7         [19]  617 	ld	h, -9 (ix)
      00032E 46               [ 7]  618 	ld	b, (hl)
      00032F 79               [ 4]  619 	ld	a, c
      000330 90               [ 4]  620 	sub	a, b
      000331 30 4C            [12]  621 	jr	NC, 00121$
                                    622 ;./lib/entities.c:30: SMS_addSprite(entidad->x+(i<<3),entidad->y+(j<<4), (j<<2) + (i<<1) );  
      000333 DD 6E FC         [19]  623 	ld	l, -4 (ix)
      000336 DD 66 FD         [19]  624 	ld	h, -3 (ix)
      000339 7E               [ 7]  625 	ld	a, (hl)
      00033A 59               [ 4]  626 	ld	e, c
      00033B 16 00            [ 7]  627 	ld	d, #0x00
      00033D 6B               [ 4]  628 	ld	l, e
      00033E 62               [ 4]  629 	ld	h, d
      00033F 29               [11]  630 	add	hl, hl
      000340 29               [11]  631 	add	hl, hl
      000341 29               [11]  632 	add	hl, hl
      000342 85               [ 4]  633 	add	a, l
                                    634 ;	spillPairReg hl
                                    635 ;	spillPairReg hl
                                    636 ;	spillPairReg hl
                                    637 ;	spillPairReg hl
      000343 67               [ 4]  638 	ld	h, a
                                    639 ;	spillPairReg hl
                                    640 ;	spillPairReg hl
      000344 2E 00            [ 7]  641 	ld	l, #0x00
                                    642 ;	spillPairReg hl
                                    643 ;	spillPairReg hl
      000346 DD 7E FF         [19]  644 	ld	a, -1 (ix)
      000349 DD 77 F4         [19]  645 	ld	-12 (ix), a
      00034C DD 36 F5 00      [19]  646 	ld	-11 (ix), #0x00
      000350 87               [ 4]  647 	add	a, a
      000351 87               [ 4]  648 	add	a, a
      000352 EB               [ 4]  649 	ex	de, hl
      000353 29               [11]  650 	add	hl, hl
      000354 EB               [ 4]  651 	ex	de, hl
      000355 83               [ 4]  652 	add	a, e
      000356 5F               [ 4]  653 	ld	e, a
      000357 16 00            [ 7]  654 	ld	d, #0x00
      000359 7B               [ 4]  655 	ld	a, e
      00035A B5               [ 4]  656 	or	a, l
      00035B 5F               [ 4]  657 	ld	e, a
      00035C 7A               [ 4]  658 	ld	a, d
      00035D B4               [ 4]  659 	or	a, h
      00035E 57               [ 4]  660 	ld	d, a
      00035F DD 6E F8         [19]  661 	ld	l, -8 (ix)
      000362 DD 66 F9         [19]  662 	ld	h, -7 (ix)
      000365 7E               [ 7]  663 	ld	a, (hl)
      000366 06 00            [ 7]  664 	ld	b, #0x00
      000368 DD 6E F4         [19]  665 	ld	l, -12 (ix)
      00036B DD 66 F5         [19]  666 	ld	h, -11 (ix)
      00036E 29               [11]  667 	add	hl, hl
      00036F 29               [11]  668 	add	hl, hl
      000370 29               [11]  669 	add	hl, hl
      000371 29               [11]  670 	add	hl, hl
      000372 85               [ 4]  671 	add	a, l
      000373 6F               [ 4]  672 	ld	l, a
                                    673 ;	spillPairReg hl
                                    674 ;	spillPairReg hl
      000374 78               [ 4]  675 	ld	a, b
      000375 8C               [ 4]  676 	adc	a, h
      000376 67               [ 4]  677 	ld	h, a
                                    678 ;	spillPairReg hl
                                    679 ;	spillPairReg hl
      000377 C5               [11]  680 	push	bc
      000378 CDr00r00         [17]  681 	call	_SMS_addSprite_f
      00037B C1               [10]  682 	pop	bc
                                    683 ;./lib/entities.c:29: for(i=0;i<sprite->ancho;i++) {
      00037C 0C               [ 4]  684 	inc	c
      00037D 18 A9            [12]  685 	jr	00117$
      00037F                        686 00121$:
                                    687 ;./lib/entities.c:28: for(j=0;j<sprite->alto;j++) {
      00037F DD 34 FF         [23]  688 	inc	-1 (ix)
      000382 18 96            [12]  689 	jr	00120$
      000384                        690 00122$:
                                    691 ;./lib/entities.c:34: }
      000384 DD F9            [10]  692 	ld	sp, ix
      000386 DD E1            [14]  693 	pop	ix
      000388 C9               [10]  694 	ret
                                    695 ;./alex.c:17: unsigned char canUp(){
                                    696 ;	---------------------------------
                                    697 ; Function canUp
                                    698 ; ---------------------------------
      000389                        699 _canUp::
                                    700 ;./alex.c:18: if (alex.x < 2)
      000389 3Ar03r00         [13]  701 	ld	a, (#_alex + 0)
      00038C D6 02            [ 7]  702 	sub	a, #0x02
      00038E 30 02            [12]  703 	jr	NC, 00102$
                                    704 ;./alex.c:19: return 0;
      000390 AF               [ 4]  705 	xor	a, a
      000391 C9               [10]  706 	ret
      000392                        707 00102$:
                                    708 ;./alex.c:20: return 1;
      000392 3E 01            [ 7]  709 	ld	a, #0x01
                                    710 ;./alex.c:21: }
      000394 C9               [10]  711 	ret
                                    712 ;./alex.c:23: unsigned char canDown() {
                                    713 ;	---------------------------------
                                    714 ; Function canDown
                                    715 ; ---------------------------------
      000395                        716 _canDown::
                                    717 ;./alex.c:24: if (alex.y > 155)
      000395 21r04r00         [10]  718 	ld	hl, #_alex+1
      000398 4E               [ 7]  719 	ld	c, (hl)
      000399 3E 9B            [ 7]  720 	ld	a, #0x9b
      00039B 91               [ 4]  721 	sub	a, c
      00039C 30 02            [12]  722 	jr	NC, 00102$
                                    723 ;./alex.c:25: return 0;
      00039E AF               [ 4]  724 	xor	a, a
      00039F C9               [10]  725 	ret
      0003A0                        726 00102$:
                                    727 ;./alex.c:26: return 1;
      0003A0 3E 01            [ 7]  728 	ld	a, #0x01
                                    729 ;./alex.c:27: }
      0003A2 C9               [10]  730 	ret
                                    731 ;./alex.c:29: unsigned char canLeft() {
                                    732 ;	---------------------------------
                                    733 ; Function canLeft
                                    734 ; ---------------------------------
      0003A3                        735 _canLeft::
                                    736 ;./alex.c:30: if (alex.x < 9)
      0003A3 3Ar03r00         [13]  737 	ld	a, (#_alex + 0)
      0003A6 D6 09            [ 7]  738 	sub	a, #0x09
      0003A8 30 02            [12]  739 	jr	NC, 00102$
                                    740 ;./alex.c:31: return 0;
      0003AA AF               [ 4]  741 	xor	a, a
      0003AB C9               [10]  742 	ret
      0003AC                        743 00102$:
                                    744 ;./alex.c:32: return 1;
      0003AC 3E 01            [ 7]  745 	ld	a, #0x01
                                    746 ;./alex.c:33: }
      0003AE C9               [10]  747 	ret
                                    748 ;./alex.c:35: unsigned char canRight() {
                                    749 ;	---------------------------------
                                    750 ; Function canRight
                                    751 ; ---------------------------------
      0003AF                        752 _canRight::
                                    753 ;./alex.c:36: if (alex.x > 238)
      0003AF 21r03r00         [10]  754 	ld	hl, #_alex+0
      0003B2 4E               [ 7]  755 	ld	c, (hl)
      0003B3 3E EE            [ 7]  756 	ld	a, #0xee
      0003B5 91               [ 4]  757 	sub	a, c
      0003B6 30 02            [12]  758 	jr	NC, 00102$
                                    759 ;./alex.c:37: return 0;
      0003B8 AF               [ 4]  760 	xor	a, a
      0003B9 C9               [10]  761 	ret
      0003BA                        762 00102$:
                                    763 ;./alex.c:38: return 1;
      0003BA 3E 01            [ 7]  764 	ld	a, #0x01
                                    765 ;./alex.c:39: }
      0003BC C9               [10]  766 	ret
                                    767 ;./alex.c:41: void moveAlexSuelo(int keys) {
                                    768 ;	---------------------------------
                                    769 ; Function moveAlexSuelo
                                    770 ; ---------------------------------
      0003BD                        771 _moveAlexSuelo::
      0003BD DD E5            [15]  772 	push	ix
      0003BF DD 21 00 00      [14]  773 	ld	ix,#0
      0003C3 DD 39            [15]  774 	add	ix,sp
      0003C5 F5               [11]  775 	push	af
      0003C6 F5               [11]  776 	push	af
      0003C7 F5               [11]  777 	push	af
      0003C8 DD 75 FE         [19]  778 	ld	-2 (ix), l
      0003CB DD 74 FF         [19]  779 	ld	-1 (ix), h
                                    780 ;./alex.c:43: if (keys & PORT_A_KEY_LEFT)
      0003CE DD 7E FE         [19]  781 	ld	a, -2 (ix)
      0003D1 E6 04            [ 7]  782 	and	a, #0x04
      0003D3 DD 77 FA         [19]  783 	ld	-6 (ix), a
      0003D6 DD 36 FB 00      [19]  784 	ld	-5 (ix), #0x00
                                    785 ;./alex.c:45: if (keys & PORT_A_KEY_RIGHT)
      0003DA DD 7E FE         [19]  786 	ld	a, -2 (ix)
      0003DD E6 08            [ 7]  787 	and	a, #0x08
      0003DF DD 77 FC         [19]  788 	ld	-4 (ix), a
      0003E2 DD 36 FD 00      [19]  789 	ld	-3 (ix), #0x00
                                    790 ;./alex.c:42: if ((keys & PORT_A_KEY_DOWN)){
      0003E6 DD CB FE 4E      [20]  791 	bit	1, -2 (ix)
      0003EA 28 33            [12]  792 	jr	Z, 00109$
                                    793 ;./alex.c:43: if (keys & PORT_A_KEY_LEFT)
      0003EC AF               [ 4]  794 	xor	a, a
      0003ED DD B6 FA         [19]  795 	or	a, -6 (ix)
      0003F0 28 05            [12]  796 	jr	Z, 00102$
                                    797 ;./alex.c:44: alex.oriented = 1;
      0003F2 21r07r00         [10]  798 	ld	hl, #_alex+4
      0003F5 36 01            [10]  799 	ld	(hl), #0x01
      0003F7                        800 00102$:
                                    801 ;./alex.c:45: if (keys & PORT_A_KEY_RIGHT)
      0003F7 AF               [ 4]  802 	xor	a, a
      0003F8 DD B6 FC         [19]  803 	or	a, -4 (ix)
      0003FB 28 05            [12]  804 	jr	Z, 00104$
                                    805 ;./alex.c:46: alex.oriented = 0;
      0003FD 21r07r00         [10]  806 	ld	hl, #_alex+4
      000400 36 00            [10]  807 	ld	(hl), #0x00
      000402                        808 00104$:
                                    809 ;./alex.c:47: if (!alex.oriented)
      000402 3Ar07r00         [13]  810 	ld	a,(#_alex + 4)
                                    811 ;./alex.c:48: alex.frame = 7;
                                    812 ;./alex.c:47: if (!alex.oriented)
      000405 DD 77 FD         [19]  813 	ld	-3 (ix), a
      000408 B7               [ 4]  814 	or	a, a
      000409 20 07            [12]  815 	jr	NZ, 00106$
                                    816 ;./alex.c:48: alex.frame = 7;
      00040B 21r05r00         [10]  817 	ld	hl, #(_alex + 2)
      00040E 36 07            [10]  818 	ld	(hl), #0x07
      000410 18 05            [12]  819 	jr	00107$
      000412                        820 00106$:
                                    821 ;./alex.c:50: alex.frame = 15;
      000412 21r05r00         [10]  822 	ld	hl, #(_alex + 2)
      000415 36 0F            [10]  823 	ld	(hl), #0x0f
      000417                        824 00107$:
                                    825 ;./alex.c:51: alex.lastChangeFrame = 15;
      000417 21r06r00         [10]  826 	ld	hl, #_alex + 3
      00041A 36 0F            [10]  827 	ld	(hl), #0x0f
                                    828 ;./alex.c:52: return; // not move
      00041C C3rBBr04         [10]  829 	jp	00135$
      00041F                        830 00109$:
                                    831 ;./alex.c:55: if (keys & PORT_A_KEY_2) {
      00041F DD CB FE 6E      [20]  832 	bit	5, -2 (ix)
      000423 28 1D            [12]  833 	jr	Z, 00114$
                                    834 ;./alex.c:56: if (alex.y > 100)
      000425 01r04r00         [10]  835 	ld	bc, #_alex+1
      000428 0A               [ 7]  836 	ld	a, (bc)
      000429 5F               [ 4]  837 	ld	e, a
      00042A 3E 64            [ 7]  838 	ld	a, #0x64
      00042C 93               [ 4]  839 	sub	a, e
      00042D 30 09            [12]  840 	jr	NC, 00111$
                                    841 ;./alex.c:57: maxSalto = alex.y - 100;
      00042F 7B               [ 4]  842 	ld	a, e
      000430 21r02r00         [10]  843 	ld	hl, #_maxSalto
      000433 C6 9C            [ 7]  844 	add	a, #0x9c
      000435 77               [ 7]  845 	ld	(hl), a
      000436 18 05            [12]  846 	jr	00112$
      000438                        847 00111$:
                                    848 ;./alex.c:59: maxSalto = 0;
      000438 21r02r00         [10]  849 	ld	hl, #_maxSalto
      00043B 36 00            [10]  850 	ld	(hl), #0x00
      00043D                        851 00112$:
                                    852 ;./alex.c:60: alex.y--;
      00043D 0A               [ 7]  853 	ld	a, (bc)
      00043E 3D               [ 4]  854 	dec	a
      00043F 02               [ 7]  855 	ld	(bc), a
                                    856 ;./alex.c:61: return;
      000440 18 79            [12]  857 	jr	00135$
      000442                        858 00114$:
                                    859 ;./alex.c:63: if ((keys & PORT_A_KEY_LEFT) && alex.x > 8 )
      000442 AF               [ 4]  860 	xor	a, a
      000443 DD B6 FA         [19]  861 	or	a, -6 (ix)
      000446 28 31            [12]  862 	jr	Z, 00132$
      000448 21r03r00         [10]  863 	ld	hl, #_alex+0
      00044B 4E               [ 7]  864 	ld	c, (hl)
      00044C 3E 08            [ 7]  865 	ld	a, #0x08
      00044E 91               [ 4]  866 	sub	a, c
      00044F 30 28            [12]  867 	jr	NC, 00132$
                                    868 ;./alex.c:65: alex.x -= 1;
      000451 0D               [ 4]  869 	dec	c
      000452 71               [ 7]  870 	ld	(hl), c
                                    871 ;./alex.c:66: alex.oriented = 1;
      000453 21r07r00         [10]  872 	ld	hl, #_alex + 4
      000456 36 01            [10]  873 	ld	(hl), #0x01
                                    874 ;./alex.c:67: alex.lastChangeFrame++;
      000458 21r06r00         [10]  875 	ld	hl, #_alex + 3
      00045B 34               [11]  876 	inc	(hl)
      00045C 7E               [ 7]  877 	ld	a, (hl)
                                    878 ;./alex.c:70: alex.frame++;
      00045D 11r05r00         [10]  879 	ld	de, #_alex + 2
                                    880 ;./alex.c:68: if (alex.lastChangeFrame == 11) {
                                    881 ;./alex.c:69: alex.lastChangeFrame = 0;
      000460 D6 0B            [ 7]  882 	sub	a, #0x0b
      000462 20 04            [12]  883 	jr	NZ, 00116$
      000464 77               [ 7]  884 	ld	(hl), a
                                    885 ;./alex.c:70: alex.frame++;
      000465 1A               [ 7]  886 	ld	a, (de)
      000466 3C               [ 4]  887 	inc	a
      000467 12               [ 7]  888 	ld	(de), a
      000468                        889 00116$:
                                    890 ;./alex.c:72: if (alex.frame > 11 || alex.frame < 8)
      000468 1A               [ 7]  891 	ld	a, (de)
      000469 4F               [ 4]  892 	ld	c, a
      00046A 3E 0B            [ 7]  893 	ld	a, #0x0b
      00046C 91               [ 4]  894 	sub	a, c
      00046D 38 05            [12]  895 	jr	C, 00117$
      00046F 79               [ 4]  896 	ld	a, c
      000470 D6 08            [ 7]  897 	sub	a, #0x08
      000472 30 47            [12]  898 	jr	NC, 00135$
      000474                        899 00117$:
                                    900 ;./alex.c:73: alex.frame = 8;
      000474 3E 08            [ 7]  901 	ld	a, #0x08
      000476 12               [ 7]  902 	ld	(de), a
      000477 18 42            [12]  903 	jr	00135$
      000479                        904 00132$:
                                    905 ;./alex.c:75: else if ((keys & PORT_A_KEY_RIGHT) && alex.x <240)
      000479 AF               [ 4]  906 	xor	a, a
      00047A DD B6 FC         [19]  907 	or	a, -4 (ix)
      00047D 28 2A            [12]  908 	jr	Z, 00128$
      00047F 01r03r00         [10]  909 	ld	bc, #_alex+0
      000482 0A               [ 7]  910 	ld	a, (bc)
      000483 FE F0            [ 7]  911 	cp	a, #0xf0
      000485 30 22            [12]  912 	jr	NC, 00128$
                                    913 ;./alex.c:77: alex.x += 1;
      000487 3C               [ 4]  914 	inc	a
      000488 02               [ 7]  915 	ld	(bc), a
                                    916 ;./alex.c:78: alex.oriented = 0;
      000489 21r07r00         [10]  917 	ld	hl, #_alex + 4
      00048C 36 00            [10]  918 	ld	(hl), #0x00
                                    919 ;./alex.c:79: alex.lastChangeFrame++;
      00048E 21r06r00         [10]  920 	ld	hl, #_alex + 3
      000491 34               [11]  921 	inc	(hl)
      000492 7E               [ 7]  922 	ld	a, (hl)
                                    923 ;./alex.c:82: alex.frame++;
      000493 11r05r00         [10]  924 	ld	de, #_alex + 2
                                    925 ;./alex.c:80: if (alex.lastChangeFrame == 11) {
                                    926 ;./alex.c:81: alex.lastChangeFrame = 0;
      000496 D6 0B            [ 7]  927 	sub	a, #0x0b
      000498 20 04            [12]  928 	jr	NZ, 00121$
      00049A 77               [ 7]  929 	ld	(hl), a
                                    930 ;./alex.c:82: alex.frame++;
      00049B 1A               [ 7]  931 	ld	a, (de)
      00049C 3C               [ 4]  932 	inc	a
      00049D 12               [ 7]  933 	ld	(de), a
      00049E                        934 00121$:
                                    935 ;./alex.c:84: if (alex.frame > 3 || alex.frame < 0)
      00049E 1A               [ 7]  936 	ld	a, (de)
      00049F 4F               [ 4]  937 	ld	c, a
      0004A0 3E 03            [ 7]  938 	ld	a, #0x03
      0004A2 91               [ 4]  939 	sub	a, c
      0004A3 30 16            [12]  940 	jr	NC, 00135$
                                    941 ;./alex.c:85: alex.frame = 0;
      0004A5 AF               [ 4]  942 	xor	a, a
      0004A6 12               [ 7]  943 	ld	(de), a
      0004A7 18 12            [12]  944 	jr	00135$
      0004A9                        945 00128$:
                                    946 ;./alex.c:89: alex.frame = 4;
      0004A9 21r05r00         [10]  947 	ld	hl, #(_alex + 2)
      0004AC 36 04            [10]  948 	ld	(hl), #0x04
                                    949 ;./alex.c:90: if (alex.oriented)
      0004AE 3Ar07r00         [13]  950 	ld	a, (#_alex + 4)
      0004B1 B7               [ 4]  951 	or	a, a
      0004B2 28 02            [12]  952 	jr	Z, 00126$
                                    953 ;./alex.c:91: alex.frame = 12;
      0004B4 36 0C            [10]  954 	ld	(hl), #0x0c
      0004B6                        955 00126$:
                                    956 ;./alex.c:92: alex.lastChangeFrame = 10;
      0004B6 21r06r00         [10]  957 	ld	hl, #_alex + 3
      0004B9 36 0A            [10]  958 	ld	(hl), #0x0a
      0004BB                        959 00135$:
                                    960 ;./alex.c:94: }
      0004BB DD F9            [10]  961 	ld	sp, ix
      0004BD DD E1            [14]  962 	pop	ix
      0004BF C9               [10]  963 	ret
                                    964 ;./alex.c:96: void moveAlexAire(int keys, unsigned char puedeSubir, unsigned char puedeDerecha, unsigned char puedeIzquieda) {
                                    965 ;	---------------------------------
                                    966 ; Function moveAlexAire
                                    967 ; ---------------------------------
      0004C0                        968 _moveAlexAire::
      0004C0 DD E5            [15]  969 	push	ix
      0004C2 DD 21 00 00      [14]  970 	ld	ix,#0
      0004C6 DD 39            [15]  971 	add	ix,sp
      0004C8 EB               [ 4]  972 	ex	de, hl
                                    973 ;./alex.c:97: if (keys & PORT_A_KEY_LEFT) {
      0004C9 CB 53            [ 8]  974 	bit	2, e
      0004CB 28 12            [12]  975 	jr	Z, 00104$
                                    976 ;./alex.c:98: alex.oriented = 1;
      0004CD 01r03r00         [10]  977 	ld	bc, #_alex+0
      0004D0 21r07r00         [10]  978 	ld	hl, #(_alex + 4)
      0004D3 36 01            [10]  979 	ld	(hl), #0x01
                                    980 ;./alex.c:99: if (puedeIzquieda)
      0004D5 DD 7E 06         [19]  981 	ld	a, 6 (ix)
      0004D8 B7               [ 4]  982 	or	a, a
      0004D9 28 04            [12]  983 	jr	Z, 00104$
                                    984 ;./alex.c:100: alex.x -= 2;
      0004DB 0A               [ 7]  985 	ld	a, (bc)
      0004DC 3D               [ 4]  986 	dec	a
      0004DD 3D               [ 4]  987 	dec	a
      0004DE 02               [ 7]  988 	ld	(bc), a
      0004DF                        989 00104$:
                                    990 ;./alex.c:102: if (keys & PORT_A_KEY_RIGHT) {
      0004DF CB 5B            [ 8]  991 	bit	3, e
      0004E1 28 12            [12]  992 	jr	Z, 00108$
                                    993 ;./alex.c:103: alex.oriented = 0;
      0004E3 01r03r00         [10]  994 	ld	bc, #_alex+0
      0004E6 21r07r00         [10]  995 	ld	hl, #(_alex + 4)
      0004E9 36 00            [10]  996 	ld	(hl), #0x00
                                    997 ;./alex.c:104: if (puedeDerecha)
      0004EB DD 7E 05         [19]  998 	ld	a, 5 (ix)
      0004EE B7               [ 4]  999 	or	a, a
      0004EF 28 04            [12] 1000 	jr	Z, 00108$
                                   1001 ;./alex.c:105: alex.x += 2;
      0004F1 0A               [ 7] 1002 	ld	a, (bc)
      0004F2 C6 02            [ 7] 1003 	add	a, #0x02
      0004F4 02               [ 7] 1004 	ld	(bc), a
      0004F5                       1005 00108$:
                                   1006 ;./alex.c:107: if (!alex.oriented)
      0004F5 21r07r00         [10] 1007 	ld	hl, #_alex + 4
      0004F8 46               [ 7] 1008 	ld	b, (hl)
                                   1009 ;./alex.c:108: alex.frame = 6;
      0004F9 21r05r00         [10] 1010 	ld	hl, #_alex + 2
                                   1011 ;./alex.c:107: if (!alex.oriented)
      0004FC 78               [ 4] 1012 	ld	a, b
      0004FD B7               [ 4] 1013 	or	a, a
      0004FE 20 04            [12] 1014 	jr	NZ, 00110$
                                   1015 ;./alex.c:108: alex.frame = 6;
      000500 36 06            [10] 1016 	ld	(hl), #0x06
      000502 18 02            [12] 1017 	jr	00111$
      000504                       1018 00110$:
                                   1019 ;./alex.c:110: alex.frame = 14;
      000504 36 0E            [10] 1020 	ld	(hl), #0x0e
      000506                       1021 00111$:
                                   1022 ;./alex.c:111: if (alex.y > maxSalto) {
      000506 01r04r00         [10] 1023 	ld	bc, #_alex + 1
      000509 0A               [ 7] 1024 	ld	a, (bc)
      00050A 57               [ 4] 1025 	ld	d, a
                                   1026 ;./alex.c:112: alex.y -= 2;
      00050B 5A               [ 4] 1027 	ld	e, d
                                   1028 ;./alex.c:111: if (alex.y > maxSalto) {
      00050C 3Ar02r00         [13] 1029 	ld	a, (_maxSalto+0)
      00050F 92               [ 4] 1030 	sub	a, d
      000510 30 06            [12] 1031 	jr	NC, 00113$
                                   1032 ;./alex.c:112: alex.y -= 2;
      000512 7B               [ 4] 1033 	ld	a, e
      000513 3D               [ 4] 1034 	dec	a
      000514 3D               [ 4] 1035 	dec	a
      000515 02               [ 7] 1036 	ld	(bc), a
      000516 18 0C            [12] 1037 	jr	00115$
      000518                       1038 00113$:
                                   1039 ;./alex.c:115: alex.y += 2; // bajando
      000518 7B               [ 4] 1040 	ld	a, e
      000519 3C               [ 4] 1041 	inc	a
      00051A 3C               [ 4] 1042 	inc	a
      00051B 02               [ 7] 1043 	ld	(bc), a
                                   1044 ;./alex.c:116: maxSalto = 255;
      00051C FD 21r02r00      [14] 1045 	ld	iy, #_maxSalto
      000520 FD 36 00 FF      [19] 1046 	ld	0 (iy), #0xff
      000524                       1047 00115$:
                                   1048 ;./alex.c:118: }
      000524 DD E1            [14] 1049 	pop	ix
      000526 E1               [10] 1050 	pop	hl
      000527 F1               [10] 1051 	pop	af
      000528 33               [ 6] 1052 	inc	sp
      000529 E9               [ 4] 1053 	jp	(hl)
                                   1054 ;./alex.c:121: void moveAlex(int keys) {
                                   1055 ;	---------------------------------
                                   1056 ; Function moveAlex
                                   1057 ; ---------------------------------
      00052A                       1058 _moveAlex::
      00052A DD E5            [15] 1059 	push	ix
      00052C DD 21 00 00      [14] 1060 	ld	ix,#0
      000530 DD 39            [15] 1061 	add	ix,sp
      000532 3B               [ 6] 1062 	dec	sp
                                   1063 ;./alex.c:122: unsigned char puedeBajar = canDown();
      000533 E5               [11] 1064 	push	hl
      000534 CDr95r03         [17] 1065 	call	_canDown
      000537 4F               [ 4] 1066 	ld	c, a
      000538 C5               [11] 1067 	push	bc
      000539 CDr89r03         [17] 1068 	call	_canUp
      00053C DD 77 FF         [19] 1069 	ld	-1 (ix), a
      00053F CDrAFr03         [17] 1070 	call	_canRight
      000542 5F               [ 4] 1071 	ld	e, a
      000543 D5               [11] 1072 	push	de
      000544 CDrA3r03         [17] 1073 	call	_canLeft
      000547 D1               [10] 1074 	pop	de
      000548 C1               [10] 1075 	pop	bc
      000549 E1               [10] 1076 	pop	hl
                                   1077 ;./alex.c:126: if (puedeBajar)
      00054A 0C               [ 4] 1078 	inc	c
      00054B 0D               [ 4] 1079 	dec	c
      00054C 28 0C            [12] 1080 	jr	Z, 00102$
                                   1081 ;./alex.c:127: moveAlexAire(keys, puedeSubir, puedeDerecha, puedeIzquierda);
      00054E 57               [ 4] 1082 	ld	d,a
      00054F D5               [11] 1083 	push	de
      000550 DD 7E FF         [19] 1084 	ld	a, -1 (ix)
      000553 F5               [11] 1085 	push	af
      000554 33               [ 6] 1086 	inc	sp
      000555 CDrC0r04         [17] 1087 	call	_moveAlexAire
      000558 18 03            [12] 1088 	jr	00104$
      00055A                       1089 00102$:
                                   1090 ;./alex.c:129: moveAlexSuelo(keys);
      00055A CDrBDr03         [17] 1091 	call	_moveAlexSuelo
      00055D                       1092 00104$:
                                   1093 ;./alex.c:130: }
      00055D 33               [ 6] 1094 	inc	sp
      00055E DD E1            [14] 1095 	pop	ix
      000560 C9               [10] 1096 	ret
                                   1097 ;main.c:15: void inicializaPajaros()
                                   1098 ;	---------------------------------
                                   1099 ; Function inicializaPajaros
                                   1100 ; ---------------------------------
      000561                       1101 _inicializaPajaros::
      000561 DD E5            [15] 1102 	push	ix
      000563 DD 21 00 00      [14] 1103 	ld	ix,#0
      000567 DD 39            [15] 1104 	add	ix,sp
      000569 F5               [11] 1105 	push	af
                                   1106 ;main.c:18: for (i = 0; i < NUM_PAJAROS; i++)
      00056A 0E 00            [ 7] 1107 	ld	c, #0x00
      00056C                       1108 00102$:
                                   1109 ;main.c:20: pajaros[i].x = 15 + 32 * i;
      00056C 06 00            [ 7] 1110 	ld	b, #0x00
      00056E 69               [ 4] 1111 	ld	l, c
      00056F 60               [ 4] 1112 	ld	h, b
      000570 29               [11] 1113 	add	hl, hl
      000571 09               [11] 1114 	add	hl, bc
      000572 29               [11] 1115 	add	hl, hl
      000573 EB               [ 4] 1116 	ex	de, hl
      000574 21r00r00         [10] 1117 	ld	hl, #_pajaros
      000577 19               [11] 1118 	add	hl, de
      000578 EB               [ 4] 1119 	ex	de, hl
      000579 79               [ 4] 1120 	ld	a, c
      00057A 0F               [ 4] 1121 	rrca
      00057B 0F               [ 4] 1122 	rrca
      00057C 0F               [ 4] 1123 	rrca
      00057D E6 E0            [ 7] 1124 	and	a, #0xe0
      00057F C6 0F            [ 7] 1125 	add	a, #0x0f
      000581 12               [ 7] 1126 	ld	(de), a
                                   1127 ;main.c:21: pajaros[i].y = 15 + 16 * (i / 2);
      000582 6B               [ 4] 1128 	ld	l, e
      000583 62               [ 4] 1129 	ld	h, d
      000584 23               [ 6] 1130 	inc	hl
      000585 E3               [19] 1131 	ex	(sp), hl
      000586 69               [ 4] 1132 	ld	l, c
                                   1133 ;	spillPairReg hl
                                   1134 ;	spillPairReg hl
      000587 26 00            [ 7] 1135 	ld	h, #0x00
                                   1136 ;	spillPairReg hl
                                   1137 ;	spillPairReg hl
      000589 CB 2C            [ 8] 1138 	sra	h
      00058B CB 1D            [ 8] 1139 	rr	l
      00058D 7D               [ 4] 1140 	ld	a, l
      00058E 87               [ 4] 1141 	add	a, a
      00058F 87               [ 4] 1142 	add	a, a
      000590 87               [ 4] 1143 	add	a, a
      000591 87               [ 4] 1144 	add	a, a
      000592 C6 0F            [ 7] 1145 	add	a, #0x0f
      000594 E1               [10] 1146 	pop	hl
      000595 E5               [11] 1147 	push	hl
      000596 77               [ 7] 1148 	ld	(hl), a
                                   1149 ;main.c:22: pajaros[i].lastChangeFrame = i * 3;
      000597 13               [ 6] 1150 	inc	de
      000598 13               [ 6] 1151 	inc	de
      000599 13               [ 6] 1152 	inc	de
      00059A 79               [ 4] 1153 	ld	a, c
      00059B 87               [ 4] 1154 	add	a, a
      00059C 81               [ 4] 1155 	add	a, c
      00059D 12               [ 7] 1156 	ld	(de), a
                                   1157 ;main.c:18: for (i = 0; i < NUM_PAJAROS; i++)
      00059E 0C               [ 4] 1158 	inc	c
      00059F 79               [ 4] 1159 	ld	a, c
      0005A0 D6 0A            [ 7] 1160 	sub	a, #0x0a
      0005A2 38 C8            [12] 1161 	jr	C, 00102$
                                   1162 ;main.c:24: }
      0005A4 DD F9            [10] 1163 	ld	sp, ix
      0005A6 DD E1            [14] 1164 	pop	ix
      0005A8 C9               [10] 1165 	ret
                                   1166 ;main.c:26: void loadGrapVRAM()
                                   1167 ;	---------------------------------
                                   1168 ; Function loadGrapVRAM
                                   1169 ; ---------------------------------
      0005A9                       1170 _loadGrapVRAM::
      0005A9 DD E5            [15] 1171 	push	ix
      0005AB DD 21 00 00      [14] 1172 	ld	ix,#0
      0005AF DD 39            [15] 1173 	add	ix,sp
      0005B1 21 EC FF         [10] 1174 	ld	hl, #-20
      0005B4 39               [11] 1175 	add	hl, sp
      0005B5 F9               [ 6] 1176 	ld	sp, hl
                                   1177 ;main.c:28: SMS_init();
      0005B6 CDr00r00         [17] 1178 	call	_SMS_init
                                   1179 ;main.c:29: inicializaPajaros();
      0005B9 CDr61r05         [17] 1180 	call	_inicializaPajaros
                                   1181 ;main.c:31: SMS_setSpriteMode(SPRITEMODE_TALL);
      0005BC 2E 01            [ 7] 1182 	ld	l, #0x01
                                   1183 ;	spillPairReg hl
                                   1184 ;	spillPairReg hl
      0005BE CDr00r00         [17] 1185 	call	_SMS_setSpriteMode
                                   1186 ;main.c:32: SMS_displayOn();
      0005C1 21 40 01         [10] 1187 	ld	hl, #0x0140
      0005C4 CDr00r00         [17] 1188 	call	_SMS_VDPturnOnFeature
                                   1189 ;main.c:33: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      0005C7 21 20 00         [10] 1190 	ld	hl, #0x0020
      0005CA CDr00r00         [17] 1191 	call	_SMS_VDPturnOnFeature
                                   1192 ;main.c:34: SMS_loadBGPalette(sonicpalette_inc);
      0005CD 21r00r00         [10] 1193 	ld	hl, #_sonicpalette_inc
      0005D0 CDr00r00         [17] 1194 	call	_SMS_loadBGPalette
                                   1195 ;main.c:35: SMS_loadSpritePalette(palleteAlex_inc);
      0005D3 21r00r00         [10] 1196 	ld	hl, #_palleteAlex_inc
      0005D6 CDr00r00         [17] 1197 	call	_SMS_loadSpritePalette
                                   1198 ;main.c:36: SMS_loadTiles(sonictiles_inc, 0, sonictiles_inc_size);
      0005D9 21 C0 14         [10] 1199 	ld	hl, #0x14c0
      0005DC E5               [11] 1200 	push	hl
      0005DD 11r00r00         [10] 1201 	ld	de, #_sonictiles_inc
      0005E0 21 00 40         [10] 1202 	ld	hl, #0x4000
      0005E3 CDr00r00         [17] 1203 	call	_SMS_VRAMmemcpy
                                   1204 ;main.c:37: spriteAlex = generateSpriteNoRAM(2, 2, spriteAlex_inc_size, spriteAlex_inc);
      0005E6 21r00r00         [10] 1205 	ld	hl, #_spriteAlex_inc
      0005E9 E5               [11] 1206 	push	hl
      0005EA 21 00 10         [10] 1207 	ld	hl, #0x1000
      0005ED E5               [11] 1208 	push	hl
                                   1209 ;	spillPairReg hl
                                   1210 ;	spillPairReg hl
      0005EE 3E 02            [ 7] 1211 	ld	a,#0x02
      0005F0 6F               [ 4] 1212 	ld	l,a
      0005F1 E5               [11] 1213 	push	hl
      0005F2 21 06 00         [10] 1214 	ld	hl, #0x0006
      0005F5 39               [11] 1215 	add	hl, sp
      0005F6 EB               [ 4] 1216 	ex	de,hl
      0005F7 E1               [10] 1217 	pop	hl
      0005F8 D5               [11] 1218 	push	de
      0005F9 CDrAAr00         [17] 1219 	call	_generateSpriteNoRAM
      0005FC F1               [10] 1220 	pop	af
      0005FD F1               [10] 1221 	pop	af
      0005FE F1               [10] 1222 	pop	af
      0005FF 11r09r00         [10] 1223 	ld	de, #_spriteAlex
      000602 21 00 00         [10] 1224 	ld	hl, #0
      000605 39               [11] 1225 	add	hl, sp
      000606 01 0A 00         [10] 1226 	ld	bc, #0x000a
      000609 ED B0            [21] 1227 	ldir
                                   1228 ;main.c:38: spritePajaro = generateSprite(3, 1, spritePajaro_inc_size, spritePajaro_inc);
      00060B 21r00r00         [10] 1229 	ld	hl, #_spritePajaro_inc
      00060E E5               [11] 1230 	push	hl
      00060F 21 80 01         [10] 1231 	ld	hl, #0x0180
      000612 E5               [11] 1232 	push	hl
      000613 2E 01            [ 7] 1233 	ld	l, #0x01
                                   1234 ;	spillPairReg hl
                                   1235 ;	spillPairReg hl
      000615 3E 03            [ 7] 1236 	ld	a, #0x03
      000617 E5               [11] 1237 	push	hl
      000618 21 10 00         [10] 1238 	ld	hl, #0x0010
      00061B 39               [11] 1239 	add	hl, sp
      00061C EB               [ 4] 1240 	ex	de,hl
      00061D E1               [10] 1241 	pop	hl
      00061E D5               [11] 1242 	push	de
      00061F CDr00r00         [17] 1243 	call	_generateSprite
      000622 F1               [10] 1244 	pop	af
      000623 F1               [10] 1245 	pop	af
      000624 F1               [10] 1246 	pop	af
      000625 11r13r00         [10] 1247 	ld	de, #_spritePajaro
      000628 21 0A 00         [10] 1248 	ld	hl, #10
      00062B 39               [11] 1249 	add	hl, sp
      00062C 01 0A 00         [10] 1250 	ld	bc, #0x000a
      00062F ED B0            [21] 1251 	ldir
                                   1252 ;main.c:39: SMS_loadTileMap(0, 0, sonictilemap_inc, sonictilemap_inc_size);
      000631 21 00 06         [10] 1253 	ld	hl, #0x0600
      000634 E5               [11] 1254 	push	hl
      000635 11r00r00         [10] 1255 	ld	de, #_sonictilemap_inc
      000638 26 78            [ 7] 1256 	ld	h, #0x78
      00063A CDr00r00         [17] 1257 	call	_SMS_VRAMmemcpy
                                   1258 ;main.c:40: }
      00063D DD F9            [10] 1259 	ld	sp, ix
      00063F DD E1            [14] 1260 	pop	ix
      000641 C9               [10] 1261 	ret
                                   1262 ;main.c:42: void dibujaPajaros()
                                   1263 ;	---------------------------------
                                   1264 ; Function dibujaPajaros
                                   1265 ; ---------------------------------
      000642                       1266 _dibujaPajaros::
      000642 DD E5            [15] 1267 	push	ix
      000644 DD 21 00 00      [14] 1268 	ld	ix,#0
      000648 DD 39            [15] 1269 	add	ix,sp
      00064A F5               [11] 1270 	push	af
                                   1271 ;main.c:45: for (i = 0; i < NUM_PAJAROS; i++)
      00064B DD 36 FF 00      [19] 1272 	ld	-1 (ix), #0x00
      00064F                       1273 00106$:
                                   1274 ;main.c:47: pajaros[i].x++;
      00064F DD 4E FF         [19] 1275 	ld	c, -1 (ix)
      000652 06 00            [ 7] 1276 	ld	b, #0x00
      000654 69               [ 4] 1277 	ld	l, c
      000655 60               [ 4] 1278 	ld	h, b
      000656 29               [11] 1279 	add	hl, hl
      000657 09               [11] 1280 	add	hl, bc
      000658 29               [11] 1281 	add	hl, hl
      000659 EB               [ 4] 1282 	ex	de, hl
      00065A 21r00r00         [10] 1283 	ld	hl, #_pajaros
      00065D 19               [11] 1284 	add	hl, de
      00065E EB               [ 4] 1285 	ex	de, hl
      00065F 1A               [ 7] 1286 	ld	a, (de)
      000660 3C               [ 4] 1287 	inc	a
      000661 12               [ 7] 1288 	ld	(de), a
                                   1289 ;main.c:48: pajaros[i].lastChangeFrame++;
      000662 4B               [ 4] 1290 	ld	c, e
      000663 42               [ 4] 1291 	ld	b, d
      000664 03               [ 6] 1292 	inc	bc
      000665 03               [ 6] 1293 	inc	bc
      000666 03               [ 6] 1294 	inc	bc
      000667 0A               [ 7] 1295 	ld	a, (bc)
      000668 3C               [ 4] 1296 	inc	a
      000669 02               [ 7] 1297 	ld	(bc), a
                                   1298 ;main.c:49: if (pajaros[i].lastChangeFrame == 20)
      00066A D6 14            [ 7] 1299 	sub	a, #0x14
      00066C 20 15            [12] 1300 	jr	NZ, 00104$
                                   1301 ;main.c:51: pajaros[i].frame++;
      00066E 6B               [ 4] 1302 	ld	l, e
                                   1303 ;	spillPairReg hl
                                   1304 ;	spillPairReg hl
      00066F 62               [ 4] 1305 	ld	h, d
                                   1306 ;	spillPairReg hl
                                   1307 ;	spillPairReg hl
      000670 23               [ 6] 1308 	inc	hl
      000671 23               [ 6] 1309 	inc	hl
      000672 7E               [ 7] 1310 	ld	a, (hl)
      000673 3C               [ 4] 1311 	inc	a
      000674 DD 77 FE         [19] 1312 	ld	-2 (ix), a
      000677 77               [ 7] 1313 	ld	(hl), a
                                   1314 ;main.c:52: if (pajaros[i].frame > 1)
      000678 3E 01            [ 7] 1315 	ld	a, #0x01
      00067A DD 96 FE         [19] 1316 	sub	a, -2 (ix)
      00067D 30 02            [12] 1317 	jr	NC, 00102$
                                   1318 ;main.c:53: pajaros[i].frame = 0;
      00067F 36 00            [10] 1319 	ld	(hl), #0x00
      000681                       1320 00102$:
                                   1321 ;main.c:54: pajaros[i].lastChangeFrame = 0;
      000681 AF               [ 4] 1322 	xor	a, a
      000682 02               [ 7] 1323 	ld	(bc), a
      000683                       1324 00104$:
                                   1325 ;main.c:56: draw_entidad(&(pajaros[i]), &spritePajaro);
      000683 EB               [ 4] 1326 	ex	de, hl
      000684 11r13r00         [10] 1327 	ld	de, #_spritePajaro
      000687 CDr59r01         [17] 1328 	call	_draw_entidad
                                   1329 ;main.c:45: for (i = 0; i < NUM_PAJAROS; i++)
      00068A DD 34 FF         [23] 1330 	inc	-1 (ix)
      00068D DD 7E FF         [19] 1331 	ld	a, -1 (ix)
      000690 D6 0A            [ 7] 1332 	sub	a, #0x0a
      000692 38 BB            [12] 1333 	jr	C, 00106$
                                   1334 ;main.c:58: }
      000694 DD F9            [10] 1335 	ld	sp, ix
      000696 DD E1            [14] 1336 	pop	ix
      000698 C9               [10] 1337 	ret
                                   1338 ;main.c:61: void main(void)
                                   1339 ;	---------------------------------
                                   1340 ; Function main
                                   1341 ; ---------------------------------
      000699                       1342 _main::
      000699 DD E5            [15] 1343 	push	ix
      00069B DD 21 00 00      [14] 1344 	ld	ix,#0
      00069F DD 39            [15] 1345 	add	ix,sp
      0006A1 F5               [11] 1346 	push	af
                                   1347 ;main.c:66: SMS_VRAMmemsetW(0, 0x0000, 16384);
      0006A2 DD 36 FF 00      [19] 1348 	ld	-1 (ix), #0x00
      0006A6 DD 36 FE 00      [19] 1349 	ld	-2 (ix), #0x00
      0006AA 21 00 40         [10] 1350 	ld	hl, #0x4000
      0006AD E5               [11] 1351 	push	hl
      0006AE 11 00 00         [10] 1352 	ld	de, #0x0000
      0006B1 65               [ 4] 1353 	ld	h, l
      0006B2 CDr00r00         [17] 1354 	call	_SMS_VRAMmemsetW
                                   1355 ;main.c:76: printf("Hello, World! [1/3]");
      0006B5 21r48r07         [10] 1356 	ld	hl, #___str_0
      0006B8 E5               [11] 1357 	push	hl
      0006B9 CDr00r00         [17] 1358 	call	_printf
      0006BC F1               [10] 1359 	pop	af
                                   1360 ;main.c:80: loadGrapVRAM();
      0006BD CDrA9r05         [17] 1361 	call	_loadGrapVRAM
                                   1362 ;main.c:82: SMS_displayOn();
      0006C0 21 40 01         [10] 1363 	ld	hl, #0x0140
      0006C3 CDr00r00         [17] 1364 	call	_SMS_VDPturnOnFeature
                                   1365 ;main.c:83: SMS_setBGScrollX(scroll_x);
      0006C6 2E 00            [ 7] 1366 	ld	l, #0x00
                                   1367 ;	spillPairReg hl
                                   1368 ;	spillPairReg hl
      0006C8 CDr00r00         [17] 1369 	call	_SMS_setBGScrollX
                                   1370 ;main.c:84: SMS_setBGScrollY(scroll_y);
      0006CB 2E 00            [ 7] 1371 	ld	l, #0x00
                                   1372 ;	spillPairReg hl
                                   1373 ;	spillPairReg hl
      0006CD CDr00r00         [17] 1374 	call	_SMS_setBGScrollY
                                   1375 ;main.c:85: SMS_init();
      0006D0 CDr00r00         [17] 1376 	call	_SMS_init
                                   1377 ;main.c:91: PSGPlay(titulo_psg);
      0006D3 21r00r00         [10] 1378 	ld	hl, #_titulo_psg
      0006D6 CDr00r00         [17] 1379 	call	_PSGPlay
                                   1380 ;main.c:92: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      0006D9 21 20 00         [10] 1381 	ld	hl, #0x0020
      0006DC CDr00r00         [17] 1382 	call	_SMS_VDPturnOnFeature
      0006DF                       1383 00111$:
                                   1384 ;main.c:97: if (SMS_queryPauseRequested())
      0006DF CDr00r00         [17] 1385 	call	_SMS_queryPauseRequested
      0006E2 CB 47            [ 8] 1386 	bit	0,a
      0006E4 28 15            [12] 1387 	jr	Z, 00105$
                                   1388 ;main.c:99: SMS_resetPauseRequest();
      0006E6 CDr00r00         [17] 1389 	call	_SMS_resetPauseRequest
                                   1390 ;main.c:100: while (!SMS_queryPauseRequested())
      0006E9                       1391 00101$:
      0006E9 CDr00r00         [17] 1392 	call	_SMS_queryPauseRequested
      0006EC CB 47            [ 8] 1393 	bit	0,a
      0006EE 20 08            [12] 1394 	jr	NZ, 00103$
                                   1395 ;main.c:102: SMS_waitForVBlank();
      0006F0 CDr00r00         [17] 1396 	call	_SMS_waitForVBlank
                                   1397 ;main.c:103: PSGFrame();
      0006F3 CDr00r00         [17] 1398 	call	_PSGFrame
      0006F6 18 F1            [12] 1399 	jr	00101$
      0006F8                       1400 00103$:
                                   1401 ;main.c:105: SMS_resetPauseRequest();
      0006F8 CDr00r00         [17] 1402 	call	_SMS_resetPauseRequest
      0006FB                       1403 00105$:
                                   1404 ;main.c:109: int keys = SMS_getKeysHeld();
      0006FB CDr00r00         [17] 1405 	call	_SMS_getKeysHeld
                                   1406 ;main.c:110: moveAlex(keys);
      0006FE EB               [ 4] 1407 	ex	de, hl
      0006FF CDr2Ar05         [17] 1408 	call	_moveAlex
                                   1409 ;main.c:111: SMS_initSprites();
      000702 CDr00r00         [17] 1410 	call	_SMS_initSprites
                                   1411 ;main.c:112: draw_entidad(&alex, &spriteAlex);
      000705 11r09r00         [10] 1412 	ld	de, #_spriteAlex
      000708 21r03r00         [10] 1413 	ld	hl, #_alex
      00070B CDr59r01         [17] 1414 	call	_draw_entidad
                                   1415 ;main.c:113: dibujaPajaros();
      00070E CDr42r06         [17] 1416 	call	_dibujaPajaros
                                   1417 ;main.c:115: SMS_finalizeSprites();
      000711 CDr00r00         [17] 1418 	call	_SMS_finalizeSprites
                                   1419 ;main.c:118: SMS_waitForVBlank();
      000714 CDr00r00         [17] 1420 	call	_SMS_waitForVBlank
                                   1421 ;main.c:119: SMS_copySpritestoSAT();
      000717 CDr00r00         [17] 1422 	call	_SMS_copySpritestoSAT
                                   1423 ;main.c:120: PSGFrame();
      00071A CDr00r00         [17] 1424 	call	_PSGFrame
                                   1425 ;main.c:121: SMS_displayOff();
      00071D 21 40 01         [10] 1426 	ld	hl, #0x0140
      000720 CDr00r00         [17] 1427 	call	_SMS_VDPturnOffFeature
                                   1428 ;main.c:122: if (scroll_y % 2 == 0)
      000723 DD CB FF 46      [20] 1429 	bit	0, -1 (ix)
      000727 20 03            [12] 1430 	jr	NZ, 00107$
                                   1431 ;main.c:123: scroll_x += 1;
      000729 DD 34 FE         [23] 1432 	inc	-2 (ix)
      00072C                       1433 00107$:
                                   1434 ;main.c:124: scroll_y++;
      00072C DD 34 FF         [23] 1435 	inc	-1 (ix)
                                   1436 ;main.c:125: if (scroll_y == 224)
      00072F DD 7E FF         [19] 1437 	ld	a, -1 (ix)
      000732 D6 E0            [ 7] 1438 	sub	a, #0xe0
      000734 20 04            [12] 1439 	jr	NZ, 00109$
                                   1440 ;main.c:126: scroll_y = 0;
      000736 DD 36 FF 00      [19] 1441 	ld	-1 (ix), #0x00
      00073A                       1442 00109$:
                                   1443 ;main.c:128: SMS_setBGScrollX(scroll_x);
      00073A DD 6E FE         [19] 1444 	ld	l, -2 (ix)
                                   1445 ;	spillPairReg hl
                                   1446 ;	spillPairReg hl
      00073D CDr00r00         [17] 1447 	call	_SMS_setBGScrollX
                                   1448 ;main.c:130: SMS_displayOn();
      000740 21 40 01         [10] 1449 	ld	hl, #0x0140
      000743 CDr00r00         [17] 1450 	call	_SMS_VDPturnOnFeature
                                   1451 ;main.c:132: }
      000746 18 97            [12] 1452 	jr	00111$
      000748                       1453 ___str_0:
      000748 48 65 6C 6C 6F 2C 20  1454 	.ascii "Hello, World! [1/3]"
             57 6F 72 6C 64 21 20
             5B 31 2F 33 5D
      00075B 00                    1455 	.db 0x00
                                   1456 	.area _CODE
      00075C                       1457 __str_1:
      00075C 72 61 70 68 6E 65 74  1458 	.ascii "raphnet"
      000763 00                    1459 	.db 0x00
      000764                       1460 __str_2:
      000764 62 61 73 69 63 20 65  1461 	.ascii "basic example"
             78 61 6D 70 6C 65
      000771 00                    1462 	.db 0x00
      000772                       1463 __str_3:
      000772 41 20 73 69 6D 70 6C  1464 	.ascii "A simple example"
             65 20 65 78 61 6D 70
             6C 65
      000782 00                    1465 	.db 0x00
                                   1466 	.area _INITIALIZER
      000000                       1467 __xinit__nextVRAMsprites:
      000000 00 01                 1468 	.dw #0x0100
      000002                       1469 __xinit__maxSalto:
      000002 FF                    1470 	.db #0xff	; 255
      000003                       1471 __xinit__alex:
      000003 1E                    1472 	.db #0x1e	; 30
      000004 14                    1473 	.db #0x14	; 20
      000005 00                    1474 	.db #0x00	; 0
      000006 00                    1475 	.db #0x00	; 0
      000007 00                    1476 	.db #0x00	; 0
      000008 00                    1477 	.db #0x00	; 0
      000009                       1478 __xinit__spriteAlex:
      000009 02                    1479 	.db #0x02	; 2
      00000A 02                    1480 	.db #0x02	; 2
      00000B 08                    1481 	.db #0x08	; 8
      00000C 00                    1482 	.db #0x00	; 0
      00000D 00 00                 1483 	.dw #0x0000
      00000F 00                    1484 	.db #0x00	; 0
      000010 00 00                 1485 	.dw #0x0000
      000012 00                    1486 	.db #0x00	; 0
      000013                       1487 __xinit__spritePajaro:
      000013 02                    1488 	.db #0x02	; 2
      000014 02                    1489 	.db #0x02	; 2
      000015 08                    1490 	.db #0x08	; 8
      000016 00                    1491 	.db #0x00	; 0
      000017 00 00                 1492 	.dw #0x0000
      000019 00                    1493 	.db #0x00	; 0
      00001A 00 00                 1494 	.dw #0x0000
      00001C 00                    1495 	.db #0x00	; 0
                                   1496 	.area _CABS (ABS)
      007FF0                       1497 	.org 0x7FF0
      007FF0                       1498 ___SMS__SEGA_signature:
      007FF0 54                    1499 	.db #0x54	; 84	'T'
      007FF1 4D                    1500 	.db #0x4d	; 77	'M'
      007FF2 52                    1501 	.db #0x52	; 82	'R'
      007FF3 20                    1502 	.db #0x20	; 32
      007FF4 53                    1503 	.db #0x53	; 83	'S'
      007FF5 45                    1504 	.db #0x45	; 69	'E'
      007FF6 47                    1505 	.db #0x47	; 71	'G'
      007FF7 41                    1506 	.db #0x41	; 65	'A'
      007FF8 FF                    1507 	.db #0xff	; 255
      007FF9 FF                    1508 	.db #0xff	; 255
      007FFA FF                    1509 	.db #0xff	; 255
      007FFB FF                    1510 	.db #0xff	; 255
      007FFC 99                    1511 	.db #0x99	; 153
      007FFD 99                    1512 	.db #0x99	; 153
      007FFE 00                    1513 	.db #0x00	; 0
      007FFF 4C                    1514 	.db #0x4c	; 76	'L'
      007FD8                       1515 	.org 0x7FD8
      007FD8                       1516 ___SMS__SDSC_author:
      007FD8 72 61 70 68 6E 65 74  1517 	.ascii "raphnet"
      007FDF 00                    1518 	.db 0x00
      007FCA                       1519 	.org 0x7FCA
      007FCA                       1520 ___SMS__SDSC_name:
      007FCA 62 61 73 69 63 20 65  1521 	.ascii "basic example"
             78 61 6D 70 6C 65
      007FD7 00                    1522 	.db 0x00
      007FB9                       1523 	.org 0x7FB9
      007FB9                       1524 ___SMS__SDSC_descr:
      007FB9 41 20 73 69 6D 70 6C  1525 	.ascii "A simple example"
             65 20 65 78 61 6D 70
             6C 65
      007FC9 00                    1526 	.db 0x00
      007FE0                       1527 	.org 0x7FE0
      007FE0                       1528 ___SMS__SDSC_signature:
      007FE0 53                    1529 	.db #0x53	; 83	'S'
      007FE1 44                    1530 	.db #0x44	; 68	'D'
      007FE2 53                    1531 	.db #0x53	; 83	'S'
      007FE3 43                    1532 	.db #0x43	; 67	'C'
      007FE4 01                    1533 	.db #0x01	; 1
      007FE5 00                    1534 	.db #0x00	; 0
      007FE6 00                    1535 	.db #0x00	; 0
      007FE7 00                    1536 	.db #0x00	; 0
      007FE8 00                    1537 	.db #0x00	; 0
      007FE9 00                    1538 	.db #0x00	; 0
      007FEA D8                    1539 	.db #0xd8	; 216
      007FEB 7F                    1540 	.db #0x7f	; 127
      007FEC CA                    1541 	.db #0xca	; 202
      007FED 7F                    1542 	.db #0x7f	; 127
      007FEE B9                    1543 	.db #0xb9	; 185
      007FEF 7F                    1544 	.db #0x7f	; 127
