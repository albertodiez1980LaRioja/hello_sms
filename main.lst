                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14549 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___SMS__SDSC_signature
                                     12 	.globl ___SMS__SDSC_descr
                                     13 	.globl ___SMS__SDSC_name
                                     14 	.globl ___SMS__SDSC_author
                                     15 	.globl ___SMS__SEGA_signature
                                     16 	.globl _main
                                     17 	.globl _dibujaPajaros
                                     18 	.globl _loadGrapVRAM
                                     19 	.globl _inicializaPajaros
                                     20 	.globl _moveAlex
                                     21 	.globl _moveAlexAire
                                     22 	.globl _moveAlexSuelo
                                     23 	.globl _canRight
                                     24 	.globl _canLeft
                                     25 	.globl _canDown
                                     26 	.globl _canUp
                                     27 	.globl _SMS_VRAMmemsetW
                                     28 	.globl _SMS_VRAMmemcpy
                                     29 	.globl _SMS_resetPauseRequest
                                     30 	.globl _SMS_queryPauseRequested
                                     31 	.globl _SMS_getKeysHeld
                                     32 	.globl _SMS_loadSpritePalette
                                     33 	.globl _SMS_loadBGPalette
                                     34 	.globl _SMS_copySpritestoSAT
                                     35 	.globl _SMS_finalizeSprites
                                     36 	.globl _SMS_addSprite_f
                                     37 	.globl _SMS_initSprites
                                     38 	.globl _SMS_waitForVBlank
                                     39 	.globl _SMS_setSpriteMode
                                     40 	.globl _SMS_setBGScrollY
                                     41 	.globl _SMS_setBGScrollX
                                     42 	.globl _SMS_VDPturnOffFeature
                                     43 	.globl _SMS_VDPturnOnFeature
                                     44 	.globl _SMS_init
                                     45 	.globl _PSGFrame
                                     46 	.globl _PSGPlay
                                     47 	.globl _printf
                                     48 	.globl _spritePuno
                                     49 	.globl _spritePajaro
                                     50 	.globl _spriteAlex
                                     51 	.globl _alex
                                     52 	.globl _maxSalto
                                     53 	.globl _nextVRAMsprites
                                     54 	.globl _pajaros
                                     55 	.globl _SMS_SRAM
                                     56 	.globl _SRAM_bank_to_be_mapped_on_slot2
                                     57 	.globl _ROM_bank_to_be_mapped_on_slot0
                                     58 	.globl _ROM_bank_to_be_mapped_on_slot1
                                     59 	.globl _ROM_bank_to_be_mapped_on_slot2
                                     60 	.globl _generateSprite
                                     61 	.globl _generateSpriteNoRAM
                                     62 	.globl _draw_entidad
                                     63 ;--------------------------------------------------------
                                     64 ; special function registers
                                     65 ;--------------------------------------------------------
                                     66 ;--------------------------------------------------------
                                     67 ; ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area _DATA
                           00FFFF    70 _ROM_bank_to_be_mapped_on_slot2	=	0xffff
                           00FFFE    71 _ROM_bank_to_be_mapped_on_slot1	=	0xfffe
                           00FFFD    72 _ROM_bank_to_be_mapped_on_slot0	=	0xfffd
                           00FFFC    73 _SRAM_bank_to_be_mapped_on_slot2	=	0xfffc
                           008000    74 _SMS_SRAM	=	0x8000
      000000                         75 _pajaros::
      000000                         76 	.ds 60
                                     77 ;--------------------------------------------------------
                                     78 ; ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area _INITIALIZED
      000000                         81 _nextVRAMsprites::
      000000                         82 	.ds 2
      000002                         83 _maxSalto::
      000002                         84 	.ds 1
      000003                         85 _alex::
      000003                         86 	.ds 6
      000009                         87 _spriteAlex::
      000009                         88 	.ds 10
      000013                         89 _spritePajaro::
      000013                         90 	.ds 10
      00001D                         91 _spritePuno::
      00001D                         92 	.ds 10
                                     93 ;--------------------------------------------------------
                                     94 ; absolute external ram data
                                     95 ;--------------------------------------------------------
                                     96 	.area _DABS (ABS)
                                     97 ;--------------------------------------------------------
                                     98 ; global & static initialisations
                                     99 ;--------------------------------------------------------
                                    100 	.area _HOME
                                    101 	.area _GSINIT
                                    102 	.area _GSFINAL
                                    103 	.area _GSINIT
                                    104 ;--------------------------------------------------------
                                    105 ; Home
                                    106 ;--------------------------------------------------------
                                    107 	.area _HOME
                                    108 	.area _HOME
                                    109 ;--------------------------------------------------------
                                    110 ; code
                                    111 ;--------------------------------------------------------
                                    112 	.area _CODE
                                    113 ;./lib/./sprite.c:18: T_sprite generateSprite(unsigned char ancho, unsigned char alto, int tam,const unsigned char data[]) {
                                    114 ;	---------------------------------
                                    115 ; Function generateSprite
                                    116 ; ---------------------------------
      000000                        117 _generateSprite::
      000000 DD E5            [15]  118 	push	ix
      000002 DD 21 00 00      [14]  119 	ld	ix,#0
      000006 DD 39            [15]  120 	add	ix,sp
      000008 FD 21 F6 FF      [14]  121 	ld	iy, #-10
      00000C FD 39            [15]  122 	add	iy, sp
      00000E FD F9            [10]  123 	ld	sp, iy
      000010 5F               [ 4]  124 	ld	e, a
      000011 55               [ 4]  125 	ld	d, l
                                    126 ;./lib/./sprite.c:19: unsigned char tamano = alto*ancho*2;
      000012 D5               [11]  127 	push	de
      000013 62               [ 4]  128 	ld	h, d
                                    129 ;	spillPairReg hl
                                    130 ;	spillPairReg hl
      000014 2E 00            [ 7]  131 	ld	l, #0x00
      000016 55               [ 4]  132 	ld	d, l
      000017 06 08            [ 7]  133 	ld	b, #0x08
      000019                        134 00103$:
      000019 29               [11]  135 	add	hl, hl
      00001A 30 01            [12]  136 	jr	NC, 00104$
      00001C 19               [11]  137 	add	hl, de
      00001D                        138 00104$:
      00001D 10 FA            [13]  139 	djnz	00103$
      00001F D1               [10]  140 	pop	de
      000020 4D               [ 4]  141 	ld	c, l
      000021 CB 21            [ 8]  142 	sla	c
                                    143 ;./lib/./sprite.c:20: T_sprite sprite = {alto,ancho,tamano,tam/(tamano*32),nextVRAMsprites, 1,0};
      000023 DD 72 F6         [19]  144 	ld	-10 (ix), d
      000026 DD 73 F7         [19]  145 	ld	-9 (ix), e
      000029 DD 71 F8         [19]  146 	ld	-8 (ix), c
      00002C 69               [ 4]  147 	ld	l, c
                                    148 ;	spillPairReg hl
                                    149 ;	spillPairReg hl
      00002D 26 00            [ 7]  150 	ld	h, #0x00
                                    151 ;	spillPairReg hl
                                    152 ;	spillPairReg hl
      00002F 29               [11]  153 	add	hl, hl
      000030 29               [11]  154 	add	hl, hl
      000031 29               [11]  155 	add	hl, hl
      000032 29               [11]  156 	add	hl, hl
      000033 29               [11]  157 	add	hl, hl
      000034 C5               [11]  158 	push	bc
      000035 EB               [ 4]  159 	ex	de, hl
      000036 DD 6E 06         [19]  160 	ld	l, 6 (ix)
                                    161 ;	spillPairReg hl
                                    162 ;	spillPairReg hl
      000039 DD 66 07         [19]  163 	ld	h, 7 (ix)
                                    164 ;	spillPairReg hl
                                    165 ;	spillPairReg hl
      00003C CDr00r00         [17]  166 	call	__divsint
      00003F C1               [10]  167 	pop	bc
      000040 DD 73 F9         [19]  168 	ld	-7 (ix), e
      000043 3Ar00r00         [13]  169 	ld	a, (_nextVRAMsprites+0)
      000046 DD 77 FA         [19]  170 	ld	-6 (ix), a
      000049 3Ar01r00         [13]  171 	ld	a, (_nextVRAMsprites+1)
      00004C DD 77 FB         [19]  172 	ld	-5 (ix), a
      00004F DD 36 FC 01      [19]  173 	ld	-4 (ix), #0x01
      000053 AF               [ 4]  174 	xor	a, a
      000054 DD 77 FD         [19]  175 	ld	-3 (ix), a
      000057 DD 77 FE         [19]  176 	ld	-2 (ix), a
      00005A DD 36 FF 00      [19]  177 	ld	-1 (ix), #0x00
                                    178 ;./lib/./sprite.c:21: SMS_loadTiles(data,nextVRAMsprites,tam);
      00005E DD 5E 08         [19]  179 	ld	e, 8 (ix)
      000061 DD 56 09         [19]  180 	ld	d, 9 (ix)
      000064 2Ar00r00         [16]  181 	ld	hl, (_nextVRAMsprites)
      000067 29               [11]  182 	add	hl, hl
      000068 29               [11]  183 	add	hl, hl
      000069 29               [11]  184 	add	hl, hl
      00006A 29               [11]  185 	add	hl, hl
      00006B 29               [11]  186 	add	hl, hl
      00006C CB F4            [ 8]  187 	set	6, h
      00006E C5               [11]  188 	push	bc
      00006F E5               [11]  189 	push	hl
      000070 DD 6E 06         [19]  190 	ld	l, 6 (ix)
                                    191 ;	spillPairReg hl
                                    192 ;	spillPairReg hl
      000073 DD 66 07         [19]  193 	ld	h, 7 (ix)
                                    194 ;	spillPairReg hl
                                    195 ;	spillPairReg hl
      000076 E3               [19]  196 	ex	(sp), hl
      000077 CDr00r00         [17]  197 	call	_SMS_VRAMmemcpy
      00007A C1               [10]  198 	pop	bc
                                    199 ;./lib/./sprite.c:22: nextVRAMsprites = nextVRAMsprites + (tamano*sprite.numFrames);
      00007B DD 5E F9         [19]  200 	ld	e, -7 (ix)
      00007E 61               [ 4]  201 	ld	h, c
                                    202 ;	spillPairReg hl
                                    203 ;	spillPairReg hl
      00007F 2E 00            [ 7]  204 	ld	l, #0x00
      000081 55               [ 4]  205 	ld	d, l
      000082 06 08            [ 7]  206 	ld	b, #0x08
      000084                        207 00105$:
      000084 29               [11]  208 	add	hl, hl
      000085 30 01            [12]  209 	jr	NC, 00106$
      000087 19               [11]  210 	add	hl, de
      000088                        211 00106$:
      000088 10 FA            [13]  212 	djnz	00105$
      00008A EB               [ 4]  213 	ex	de, hl
      00008B 21r00r00         [10]  214 	ld	hl, #_nextVRAMsprites
      00008E 7E               [ 7]  215 	ld	a, (hl)
      00008F 83               [ 4]  216 	add	a, e
      000090 77               [ 7]  217 	ld	(hl), a
      000091 23               [ 6]  218 	inc	hl
      000092 7E               [ 7]  219 	ld	a, (hl)
      000093 8A               [ 4]  220 	adc	a, d
      000094 77               [ 7]  221 	ld	(hl), a
                                    222 ;./lib/./sprite.c:23: return sprite;
      000095 21 0E 00         [10]  223 	ld	hl, #14
      000098 39               [11]  224 	add	hl, sp
      000099 5E               [ 7]  225 	ld	e, (hl)
      00009A 23               [ 6]  226 	inc	hl
      00009B 56               [ 7]  227 	ld	d, (hl)
      00009C 21 00 00         [10]  228 	ld	hl, #0
      00009F 39               [11]  229 	add	hl, sp
      0000A0 01 0A 00         [10]  230 	ld	bc, #10
      0000A3 ED B0            [21]  231 	ldir
                                    232 ;./lib/./sprite.c:24: }
      0000A5 DD F9            [10]  233 	ld	sp, ix
      0000A7 DD E1            [14]  234 	pop	ix
      0000A9 C9               [10]  235 	ret
                                    236 ;./lib/./sprite.c:26: T_sprite generateSpriteNoRAM(unsigned char ancho, unsigned char alto, int tam,const unsigned char data[]) {
                                    237 ;	---------------------------------
                                    238 ; Function generateSpriteNoRAM
                                    239 ; ---------------------------------
      0000AA                        240 _generateSpriteNoRAM::
      0000AA DD E5            [15]  241 	push	ix
      0000AC DD 21 00 00      [14]  242 	ld	ix,#0
      0000B0 DD 39            [15]  243 	add	ix,sp
      0000B2 FD 21 F4 FF      [14]  244 	ld	iy, #-12
      0000B6 FD 39            [15]  245 	add	iy, sp
      0000B8 FD F9            [10]  246 	ld	sp, iy
      0000BA 5F               [ 4]  247 	ld	e, a
      0000BB 55               [ 4]  248 	ld	d, l
                                    249 ;./lib/./sprite.c:27: unsigned char tamano = alto*ancho*2;
      0000BC D5               [11]  250 	push	de
      0000BD 62               [ 4]  251 	ld	h, d
                                    252 ;	spillPairReg hl
                                    253 ;	spillPairReg hl
      0000BE 2E 00            [ 7]  254 	ld	l, #0x00
      0000C0 55               [ 4]  255 	ld	d, l
      0000C1 06 08            [ 7]  256 	ld	b, #0x08
      0000C3                        257 00103$:
      0000C3 29               [11]  258 	add	hl, hl
      0000C4 30 01            [12]  259 	jr	NC, 00104$
      0000C6 19               [11]  260 	add	hl, de
      0000C7                        261 00104$:
      0000C7 10 FA            [13]  262 	djnz	00103$
      0000C9 D1               [10]  263 	pop	de
      0000CA 4D               [ 4]  264 	ld	c, l
      0000CB CB 21            [ 8]  265 	sla	c
                                    266 ;./lib/./sprite.c:28: T_sprite sprite = {alto,ancho,tamano,tam/(tamano*32),nextVRAMsprites, 0,0};
      0000CD DD 72 F4         [19]  267 	ld	-12 (ix), d
      0000D0 DD 73 F5         [19]  268 	ld	-11 (ix), e
      0000D3 DD 71 F6         [19]  269 	ld	-10 (ix), c
                                    270 ;	spillPairReg hl
                                    271 ;	spillPairReg hl
      0000D6 DD 71 FE         [19]  272 	ld	-2 (ix), c
      0000D9 DD 36 FF 00      [19]  273 	ld	-1 (ix), #0x00
      0000DD 69               [ 4]  274 	ld	l, c
      0000DE 26 00            [ 7]  275 	ld	h, #0x00
                                    276 ;	spillPairReg hl
                                    277 ;	spillPairReg hl
      0000E0 29               [11]  278 	add	hl, hl
      0000E1 29               [11]  279 	add	hl, hl
      0000E2 29               [11]  280 	add	hl, hl
      0000E3 29               [11]  281 	add	hl, hl
      0000E4 29               [11]  282 	add	hl, hl
      0000E5 EB               [ 4]  283 	ex	de,hl
      0000E6 D5               [11]  284 	push	de
      0000E7 DD 6E 06         [19]  285 	ld	l, 6 (ix)
                                    286 ;	spillPairReg hl
                                    287 ;	spillPairReg hl
      0000EA DD 66 07         [19]  288 	ld	h, 7 (ix)
                                    289 ;	spillPairReg hl
                                    290 ;	spillPairReg hl
      0000ED CDr00r00         [17]  291 	call	__divsint
      0000F0 EB               [ 4]  292 	ex	de, hl
      0000F1 D1               [10]  293 	pop	de
      0000F2 DD 75 F7         [19]  294 	ld	-9 (ix), l
      0000F5 3Ar00r00         [13]  295 	ld	a, (_nextVRAMsprites+0)
      0000F8 DD 77 F8         [19]  296 	ld	-8 (ix), a
      0000FB 3Ar01r00         [13]  297 	ld	a, (_nextVRAMsprites+1)
      0000FE DD 77 F9         [19]  298 	ld	-7 (ix), a
      000101 DD 36 FA 00      [19]  299 	ld	-6 (ix), #0x00
      000105 AF               [ 4]  300 	xor	a, a
      000106 DD 77 FB         [19]  301 	ld	-5 (ix), a
      000109 DD 77 FC         [19]  302 	ld	-4 (ix), a
      00010C DD 36 FD 00      [19]  303 	ld	-3 (ix), #0x00
                                    304 ;./lib/./sprite.c:29: sprite.data = data;
      000110 DD 7E 08         [19]  305 	ld	a, 8 (ix)
      000113 DD 77 FB         [19]  306 	ld	-5 (ix), a
      000116 DD 7E 09         [19]  307 	ld	a, 9 (ix)
      000119 DD 77 FC         [19]  308 	ld	-4 (ix), a
                                    309 ;./lib/./sprite.c:30: sprite.frameInVRAM = 0;
      00011C DD 36 FD 00      [19]  310 	ld	-3 (ix), #0x00
                                    311 ;./lib/./sprite.c:31: SMS_loadTiles(data,nextVRAMsprites,tamano*32);
      000120 DD 4E 08         [19]  312 	ld	c, 8 (ix)
      000123 DD 46 09         [19]  313 	ld	b, 9 (ix)
      000126 2Ar00r00         [16]  314 	ld	hl, (_nextVRAMsprites)
      000129 29               [11]  315 	add	hl, hl
      00012A 29               [11]  316 	add	hl, hl
      00012B 29               [11]  317 	add	hl, hl
      00012C 29               [11]  318 	add	hl, hl
      00012D 29               [11]  319 	add	hl, hl
      00012E CB F4            [ 8]  320 	set	6, h
      000130 D5               [11]  321 	push	de
      000131 59               [ 4]  322 	ld	e, c
      000132 50               [ 4]  323 	ld	d, b
      000133 CDr00r00         [17]  324 	call	_SMS_VRAMmemcpy
                                    325 ;./lib/./sprite.c:32: nextVRAMsprites = nextVRAMsprites + (tamano);
      000136 21r00r00         [10]  326 	ld	hl, #_nextVRAMsprites
      000139 7E               [ 7]  327 	ld	a, (hl)
      00013A DD 86 FE         [19]  328 	add	a, -2 (ix)
      00013D 77               [ 7]  329 	ld	(hl), a
      00013E 23               [ 6]  330 	inc	hl
      00013F 7E               [ 7]  331 	ld	a, (hl)
      000140 DD 8E FF         [19]  332 	adc	a, -1 (ix)
      000143 77               [ 7]  333 	ld	(hl), a
                                    334 ;./lib/./sprite.c:33: return sprite;
      000144 21 10 00         [10]  335 	ld	hl, #16
      000147 39               [11]  336 	add	hl, sp
      000148 5E               [ 7]  337 	ld	e, (hl)
      000149 23               [ 6]  338 	inc	hl
      00014A 56               [ 7]  339 	ld	d, (hl)
      00014B 21 00 00         [10]  340 	ld	hl, #0
      00014E 39               [11]  341 	add	hl, sp
      00014F 01 0A 00         [10]  342 	ld	bc, #10
      000152 ED B0            [21]  343 	ldir
                                    344 ;./lib/./sprite.c:34: }
      000154 DD F9            [10]  345 	ld	sp, ix
      000156 DD E1            [14]  346 	pop	ix
      000158 C9               [10]  347 	ret
                                    348 ;./lib/entities.c:10: void draw_entidad(T_entidad *entidad, T_sprite *sprite){
                                    349 ;	---------------------------------
                                    350 ; Function draw_entidad
                                    351 ; ---------------------------------
      000159                        352 _draw_entidad::
      000159 DD E5            [15]  353 	push	ix
      00015B DD 21 00 00      [14]  354 	ld	ix,#0
      00015F DD 39            [15]  355 	add	ix,sp
      000161 FD 21 EF FF      [14]  356 	ld	iy, #-17
      000165 FD 39            [15]  357 	add	iy, sp
      000167 FD F9            [10]  358 	ld	sp, iy
      000169 DD 75 FC         [19]  359 	ld	-4 (ix), l
      00016C DD 74 FD         [19]  360 	ld	-3 (ix), h
                                    361 ;./lib/entities.c:12: if (sprite->allInRAM == 1){
      00016F DD 73 FA         [19]  362 	ld	-6 (ix), e
      000172 DD 72 FB         [19]  363 	ld	-5 (ix), d
      000175 4B               [ 4]  364 	ld	c, e
      000176 42               [ 4]  365 	ld	b, d
      000177 21 06 00         [10]  366 	ld	hl, #6
      00017A 09               [11]  367 	add	hl, bc
      00017B 4E               [ 7]  368 	ld	c, (hl)
                                    369 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      00017C DD 5E FA         [19]  370 	ld	e, -6 (ix)
      00017F DD 56 FB         [19]  371 	ld	d, -5 (ix)
      000182 DD 7E FC         [19]  372 	ld	a, -4 (ix)
      000185 C6 02            [ 7]  373 	add	a, #0x02
      000187 DD 77 F0         [19]  374 	ld	-16 (ix), a
      00018A DD 7E FD         [19]  375 	ld	a, -3 (ix)
      00018D CE 00            [ 7]  376 	adc	a, #0x00
      00018F DD 77 F1         [19]  377 	ld	-15 (ix), a
      000192 DD 7E FA         [19]  378 	ld	a, -6 (ix)
      000195 C6 04            [ 7]  379 	add	a, #0x04
      000197 DD 77 F2         [19]  380 	ld	-14 (ix), a
      00019A DD 7E FB         [19]  381 	ld	a, -5 (ix)
      00019D CE 00            [ 7]  382 	adc	a, #0x00
      00019F DD 77 F3         [19]  383 	ld	-13 (ix), a
                                    384 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      0001A2 DD 7E FC         [19]  385 	ld	a, -4 (ix)
      0001A5 C6 01            [ 7]  386 	add	a, #0x01
      0001A7 DD 77 F8         [19]  387 	ld	-8 (ix), a
      0001AA DD 7E FD         [19]  388 	ld	a, -3 (ix)
      0001AD CE 00            [ 7]  389 	adc	a, #0x00
      0001AF DD 77 F9         [19]  390 	ld	-7 (ix), a
      0001B2 DD 7E FA         [19]  391 	ld	a, -6 (ix)
      0001B5 C6 01            [ 7]  392 	add	a, #0x01
      0001B7 DD 77 FE         [19]  393 	ld	-2 (ix), a
      0001BA DD 7E FB         [19]  394 	ld	a, -5 (ix)
      0001BD CE 00            [ 7]  395 	adc	a, #0x00
      0001BF DD 77 FF         [19]  396 	ld	-1 (ix), a
                                    397 ;./lib/entities.c:23: int frame = sprite->tamano*entidad->frame*32;
      0001C2 DD 6E F0         [19]  398 	ld	l, -16 (ix)
      0001C5 DD 66 F1         [19]  399 	ld	h, -15 (ix)
      0001C8 7E               [ 7]  400 	ld	a, (hl)
      0001C9 DD 77 F4         [19]  401 	ld	-12 (ix), a
                                    402 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      0001CC 13               [ 6]  403 	inc	de
      0001CD 13               [ 6]  404 	inc	de
      0001CE 1A               [ 7]  405 	ld	a, (de)
      0001CF DD 77 F5         [19]  406 	ld	-11 (ix), a
                                    407 ;./lib/entities.c:12: if (sprite->allInRAM == 1){
      0001D2 0D               [ 4]  408 	dec	c
      0001D3 C2r98r02         [10]  409 	jp	NZ,00108$
                                    410 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      0001D6 DD 5E F5         [19]  411 	ld	e, -11 (ix)
      0001D9 DD 66 F4         [19]  412 	ld	h, -12 (ix)
                                    413 ;	spillPairReg hl
                                    414 ;	spillPairReg hl
      0001DC 2E 00            [ 7]  415 	ld	l, #0x00
      0001DE 55               [ 4]  416 	ld	d, l
      0001DF 06 08            [ 7]  417 	ld	b, #0x08
      0001E1                        418 00200$:
      0001E1 29               [11]  419 	add	hl, hl
      0001E2 30 01            [12]  420 	jr	NC, 00201$
      0001E4 19               [11]  421 	add	hl, de
      0001E5                        422 00201$:
      0001E5 10 FA            [13]  423 	djnz	00200$
      0001E7 4D               [ 4]  424 	ld	c, l
      0001E8 DD 6E F2         [19]  425 	ld	l, -14 (ix)
      0001EB DD 66 F3         [19]  426 	ld	h, -13 (ix)
      0001EE 7E               [ 7]  427 	ld	a, (hl)
      0001EF 81               [ 4]  428 	add	a, c
      0001F0 DD 77 EF         [19]  429 	ld	-17 (ix), a
                                    430 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      0001F3 DD 7E F8         [19]  431 	ld	a, -8 (ix)
      0001F6 DD 77 F0         [19]  432 	ld	-16 (ix), a
      0001F9 DD 7E F9         [19]  433 	ld	a, -7 (ix)
      0001FC DD 77 F1         [19]  434 	ld	-15 (ix), a
      0001FF DD 7E FE         [19]  435 	ld	a, -2 (ix)
      000202 DD 77 F2         [19]  436 	ld	-14 (ix), a
      000205 DD 7E FF         [19]  437 	ld	a, -1 (ix)
      000208 DD 77 F3         [19]  438 	ld	-13 (ix), a
      00020B DD 36 FE 00      [19]  439 	ld	-2 (ix), #0x00
      00020F                        440 00114$:
      00020F DD 6E FA         [19]  441 	ld	l, -6 (ix)
      000212 DD 66 FB         [19]  442 	ld	h, -5 (ix)
      000215 DD 7E FE         [19]  443 	ld	a,-2 (ix)
      000218 96               [ 7]  444 	sub	a,(hl)
      000219 D2r84r03         [10]  445 	jp	NC, 00122$
                                    446 ;./lib/entities.c:15: unsigned char desplazado = (j<<2);
      00021C DD 7E FE         [19]  447 	ld	a, -2 (ix)
      00021F 87               [ 4]  448 	add	a, a
      000220 87               [ 4]  449 	add	a, a
                                    450 ;./lib/entities.c:16: unsigned char jCalculated = desplazado + frame, y = entidad->y+(desplazado<<2);
      000221 47               [ 4]  451 	ld	b, a
      000222 DD 86 EF         [19]  452 	add	a, -17 (ix)
      000225 DD 77 F4         [19]  453 	ld	-12 (ix), a
      000228 DD 6E F0         [19]  454 	ld	l, -16 (ix)
      00022B DD 66 F1         [19]  455 	ld	h, -15 (ix)
      00022E 4E               [ 7]  456 	ld	c, (hl)
      00022F 78               [ 4]  457 	ld	a, b
      000230 87               [ 4]  458 	add	a, a
      000231 87               [ 4]  459 	add	a, a
      000232 81               [ 4]  460 	add	a, c
      000233 DD 77 F5         [19]  461 	ld	-11 (ix), a
                                    462 ;./lib/entities.c:17: for(i=0;i<sprite->ancho;i++) {
      000236 DD 36 FF 00      [19]  463 	ld	-1 (ix), #0x00
      00023A                        464 00111$:
      00023A DD 6E F2         [19]  465 	ld	l, -14 (ix)
      00023D DD 66 F3         [19]  466 	ld	h, -13 (ix)
      000240 DD 7E FF         [19]  467 	ld	a,-1 (ix)
      000243 96               [ 7]  468 	sub	a,(hl)
      000244 30 4C            [12]  469 	jr	NC, 00115$
                                    470 ;./lib/entities.c:18: SMS_addSprite(entidad->x+(i<<3),y, jCalculated + (i<<1) );  
      000246 DD 6E FC         [19]  471 	ld	l, -4 (ix)
      000249 DD 66 FD         [19]  472 	ld	h, -3 (ix)
      00024C 7E               [ 7]  473 	ld	a, (hl)
      00024D DD 77 F9         [19]  474 	ld	-7 (ix), a
      000250 DD 77 F6         [19]  475 	ld	-10 (ix), a
      000253 DD 36 F7 00      [19]  476 	ld	-9 (ix), #0x00
      000257 DD 7E FF         [19]  477 	ld	a, -1 (ix)
      00025A DD 77 F8         [19]  478 	ld	-8 (ix), a
      00025D DD 36 F9 00      [19]  479 	ld	-7 (ix), #0x00
      000261 6F               [ 4]  480 	ld	l, a
      000262 26 00            [ 7]  481 	ld	h, #0x00
      000264 29               [11]  482 	add	hl, hl
      000265 29               [11]  483 	add	hl, hl
      000266 29               [11]  484 	add	hl, hl
      000267 DD 5E F6         [19]  485 	ld	e, -10 (ix)
      00026A 16 00            [ 7]  486 	ld	d, #0x00
      00026C 19               [11]  487 	add	hl, de
      00026D 45               [ 4]  488 	ld	b, l
      00026E 0E 00            [ 7]  489 	ld	c, #0x00
      000270 DD 5E F4         [19]  490 	ld	e, -12 (ix)
      000273 16 00            [ 7]  491 	ld	d, #0x00
      000275 DD 6E F8         [19]  492 	ld	l, -8 (ix)
      000278 DD 66 F9         [19]  493 	ld	h, -7 (ix)
      00027B 29               [11]  494 	add	hl, hl
      00027C 19               [11]  495 	add	hl, de
      00027D 7D               [ 4]  496 	ld	a, l
      00027E 16 00            [ 7]  497 	ld	d, #0x00
      000280 B1               [ 4]  498 	or	a, c
      000281 5F               [ 4]  499 	ld	e, a
      000282 7A               [ 4]  500 	ld	a, d
      000283 B0               [ 4]  501 	or	a, b
      000284 57               [ 4]  502 	ld	d, a
      000285 DD 6E F5         [19]  503 	ld	l, -11 (ix)
                                    504 ;	spillPairReg hl
                                    505 ;	spillPairReg hl
      000288 26 00            [ 7]  506 	ld	h, #0x00
                                    507 ;	spillPairReg hl
                                    508 ;	spillPairReg hl
      00028A CDr00r00         [17]  509 	call	_SMS_addSprite_f
                                    510 ;./lib/entities.c:17: for(i=0;i<sprite->ancho;i++) {
      00028D DD 34 FF         [23]  511 	inc	-1 (ix)
      000290 18 A8            [12]  512 	jr	00111$
      000292                        513 00115$:
                                    514 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      000292 DD 34 FE         [23]  515 	inc	-2 (ix)
      000295 C3r0Fr02         [10]  516 	jp	00114$
      000298                        517 00108$:
                                    518 ;./lib/entities.c:23: int frame = sprite->tamano*entidad->frame*32;
      000298 DD 5E F4         [19]  519 	ld	e, -12 (ix)
      00029B DD 66 F5         [19]  520 	ld	h, -11 (ix)
                                    521 ;	spillPairReg hl
                                    522 ;	spillPairReg hl
      00029E 2E 00            [ 7]  523 	ld	l, #0x00
      0002A0 55               [ 4]  524 	ld	d, l
      0002A1 06 08            [ 7]  525 	ld	b, #0x08
      0002A3                        526 00202$:
      0002A3 29               [11]  527 	add	hl, hl
      0002A4 30 01            [12]  528 	jr	NC, 00203$
      0002A6 19               [11]  529 	add	hl, de
      0002A7                        530 00203$:
      0002A7 10 FA            [13]  531 	djnz	00202$
      0002A9 29               [11]  532 	add	hl, hl
      0002AA 29               [11]  533 	add	hl, hl
      0002AB 29               [11]  534 	add	hl, hl
      0002AC 29               [11]  535 	add	hl, hl
      0002AD 29               [11]  536 	add	hl, hl
      0002AE DD 75 F6         [19]  537 	ld	-10 (ix), l
      0002B1 DD 74 F7         [19]  538 	ld	-9 (ix), h
                                    539 ;./lib/entities.c:24: if (entidad->frame != sprite->frameInVRAM){
      0002B4 DD 7E FA         [19]  540 	ld	a, -6 (ix)
      0002B7 C6 09            [ 7]  541 	add	a, #0x09
      0002B9 4F               [ 4]  542 	ld	c, a
      0002BA DD 7E FB         [19]  543 	ld	a, -5 (ix)
      0002BD CE 00            [ 7]  544 	adc	a, #0x00
      0002BF 47               [ 4]  545 	ld	b, a
      0002C0 0A               [ 7]  546 	ld	a, (bc)
      0002C1 5F               [ 4]  547 	ld	e, a
      0002C2 DD 7E F4         [19]  548 	ld	a, -12 (ix)
      0002C5 93               [ 4]  549 	sub	a, e
      0002C6 28 42            [12]  550 	jr	Z, 00133$
                                    551 ;./lib/entities.c:25: SMS_loadTiles(sprite->data + frame,sprite->beginVRAM,sprite->tamano<<5);
      0002C8 DD 6E F5         [19]  552 	ld	l, -11 (ix)
                                    553 ;	spillPairReg hl
                                    554 ;	spillPairReg hl
      0002CB 26 00            [ 7]  555 	ld	h, #0x00
                                    556 ;	spillPairReg hl
                                    557 ;	spillPairReg hl
      0002CD 29               [11]  558 	add	hl, hl
      0002CE 29               [11]  559 	add	hl, hl
      0002CF 29               [11]  560 	add	hl, hl
      0002D0 29               [11]  561 	add	hl, hl
      0002D1 29               [11]  562 	add	hl, hl
      0002D2 E5               [11]  563 	push	hl
      0002D3 FD E1            [14]  564 	pop	iy
      0002D5 DD 5E FA         [19]  565 	ld	e, -6 (ix)
      0002D8 DD 56 FB         [19]  566 	ld	d, -5 (ix)
      0002DB 21 07 00         [10]  567 	ld	hl, #7
      0002DE 19               [11]  568 	add	hl, de
      0002DF 5E               [ 7]  569 	ld	e, (hl)
      0002E0 23               [ 6]  570 	inc	hl
      0002E1 56               [ 7]  571 	ld	d, (hl)
      0002E2 DD 6E F6         [19]  572 	ld	l, -10 (ix)
                                    573 ;	spillPairReg hl
                                    574 ;	spillPairReg hl
      0002E5 DD 66 F7         [19]  575 	ld	h, -9 (ix)
                                    576 ;	spillPairReg hl
                                    577 ;	spillPairReg hl
      0002E8 19               [11]  578 	add	hl, de
      0002E9 EB               [ 4]  579 	ex	de, hl
      0002EA DD 6E F2         [19]  580 	ld	l, -14 (ix)
      0002ED DD 66 F3         [19]  581 	ld	h, -13 (ix)
      0002F0 7E               [ 7]  582 	ld	a, (hl)
      0002F1 23               [ 6]  583 	inc	hl
      0002F2 66               [ 7]  584 	ld	h, (hl)
                                    585 ;	spillPairReg hl
      0002F3 6F               [ 4]  586 	ld	l, a
                                    587 ;	spillPairReg hl
                                    588 ;	spillPairReg hl
      0002F4 29               [11]  589 	add	hl, hl
      0002F5 29               [11]  590 	add	hl, hl
      0002F6 29               [11]  591 	add	hl, hl
      0002F7 29               [11]  592 	add	hl, hl
      0002F8 29               [11]  593 	add	hl, hl
      0002F9 CB F4            [ 8]  594 	set	6, h
      0002FB C5               [11]  595 	push	bc
      0002FC FD E5            [15]  596 	push	iy
      0002FE CDr00r00         [17]  597 	call	_SMS_VRAMmemcpy
      000301 C1               [10]  598 	pop	bc
                                    599 ;./lib/entities.c:26: sprite->frameInVRAM = entidad->frame;
      000302 DD 6E F0         [19]  600 	ld	l, -16 (ix)
      000305 DD 66 F1         [19]  601 	ld	h, -15 (ix)
      000308 7E               [ 7]  602 	ld	a, (hl)
      000309 02               [ 7]  603 	ld	(bc), a
                                    604 ;./lib/entities.c:28: for(j=0;j<sprite->alto;j++) {
      00030A                        605 00133$:
      00030A DD 7E FE         [19]  606 	ld	a, -2 (ix)
      00030D DD 77 F6         [19]  607 	ld	-10 (ix), a
      000310 DD 7E FF         [19]  608 	ld	a, -1 (ix)
      000313 DD 77 F7         [19]  609 	ld	-9 (ix), a
      000316 DD 36 FF 00      [19]  610 	ld	-1 (ix), #0x00
      00031A                        611 00120$:
      00031A DD 6E FA         [19]  612 	ld	l, -6 (ix)
      00031D DD 66 FB         [19]  613 	ld	h, -5 (ix)
      000320 DD 7E FF         [19]  614 	ld	a,-1 (ix)
      000323 96               [ 7]  615 	sub	a,(hl)
      000324 30 5E            [12]  616 	jr	NC, 00122$
                                    617 ;./lib/entities.c:29: for(i=0;i<sprite->ancho;i++) {
      000326 0E 00            [ 7]  618 	ld	c, #0x00
      000328                        619 00117$:
      000328 DD 6E F6         [19]  620 	ld	l, -10 (ix)
      00032B DD 66 F7         [19]  621 	ld	h, -9 (ix)
      00032E 46               [ 7]  622 	ld	b, (hl)
      00032F 79               [ 4]  623 	ld	a, c
      000330 90               [ 4]  624 	sub	a, b
      000331 30 4C            [12]  625 	jr	NC, 00121$
                                    626 ;./lib/entities.c:30: SMS_addSprite(entidad->x+(i<<3),entidad->y+(j<<4), (j<<2) + (i<<1) );  
      000333 DD 6E FC         [19]  627 	ld	l, -4 (ix)
      000336 DD 66 FD         [19]  628 	ld	h, -3 (ix)
      000339 7E               [ 7]  629 	ld	a, (hl)
      00033A 59               [ 4]  630 	ld	e, c
      00033B 16 00            [ 7]  631 	ld	d, #0x00
      00033D 6B               [ 4]  632 	ld	l, e
      00033E 62               [ 4]  633 	ld	h, d
      00033F 29               [11]  634 	add	hl, hl
      000340 29               [11]  635 	add	hl, hl
      000341 29               [11]  636 	add	hl, hl
      000342 85               [ 4]  637 	add	a, l
                                    638 ;	spillPairReg hl
                                    639 ;	spillPairReg hl
                                    640 ;	spillPairReg hl
                                    641 ;	spillPairReg hl
      000343 67               [ 4]  642 	ld	h, a
                                    643 ;	spillPairReg hl
                                    644 ;	spillPairReg hl
      000344 2E 00            [ 7]  645 	ld	l, #0x00
                                    646 ;	spillPairReg hl
                                    647 ;	spillPairReg hl
      000346 DD 7E FF         [19]  648 	ld	a, -1 (ix)
      000349 DD 77 F4         [19]  649 	ld	-12 (ix), a
      00034C DD 36 F5 00      [19]  650 	ld	-11 (ix), #0x00
      000350 87               [ 4]  651 	add	a, a
      000351 87               [ 4]  652 	add	a, a
      000352 EB               [ 4]  653 	ex	de, hl
      000353 29               [11]  654 	add	hl, hl
      000354 EB               [ 4]  655 	ex	de, hl
      000355 83               [ 4]  656 	add	a, e
      000356 5F               [ 4]  657 	ld	e, a
      000357 16 00            [ 7]  658 	ld	d, #0x00
      000359 7B               [ 4]  659 	ld	a, e
      00035A B5               [ 4]  660 	or	a, l
      00035B 5F               [ 4]  661 	ld	e, a
      00035C 7A               [ 4]  662 	ld	a, d
      00035D B4               [ 4]  663 	or	a, h
      00035E 57               [ 4]  664 	ld	d, a
      00035F DD 6E F8         [19]  665 	ld	l, -8 (ix)
      000362 DD 66 F9         [19]  666 	ld	h, -7 (ix)
      000365 7E               [ 7]  667 	ld	a, (hl)
      000366 06 00            [ 7]  668 	ld	b, #0x00
      000368 DD 6E F4         [19]  669 	ld	l, -12 (ix)
      00036B DD 66 F5         [19]  670 	ld	h, -11 (ix)
      00036E 29               [11]  671 	add	hl, hl
      00036F 29               [11]  672 	add	hl, hl
      000370 29               [11]  673 	add	hl, hl
      000371 29               [11]  674 	add	hl, hl
      000372 85               [ 4]  675 	add	a, l
      000373 6F               [ 4]  676 	ld	l, a
                                    677 ;	spillPairReg hl
                                    678 ;	spillPairReg hl
      000374 78               [ 4]  679 	ld	a, b
      000375 8C               [ 4]  680 	adc	a, h
      000376 67               [ 4]  681 	ld	h, a
                                    682 ;	spillPairReg hl
                                    683 ;	spillPairReg hl
      000377 C5               [11]  684 	push	bc
      000378 CDr00r00         [17]  685 	call	_SMS_addSprite_f
      00037B C1               [10]  686 	pop	bc
                                    687 ;./lib/entities.c:29: for(i=0;i<sprite->ancho;i++) {
      00037C 0C               [ 4]  688 	inc	c
      00037D 18 A9            [12]  689 	jr	00117$
      00037F                        690 00121$:
                                    691 ;./lib/entities.c:28: for(j=0;j<sprite->alto;j++) {
      00037F DD 34 FF         [23]  692 	inc	-1 (ix)
      000382 18 96            [12]  693 	jr	00120$
      000384                        694 00122$:
                                    695 ;./lib/entities.c:34: }
      000384 DD F9            [10]  696 	ld	sp, ix
      000386 DD E1            [14]  697 	pop	ix
      000388 C9               [10]  698 	ret
                                    699 ;./alex.c:18: unsigned char canUp(){
                                    700 ;	---------------------------------
                                    701 ; Function canUp
                                    702 ; ---------------------------------
      000389                        703 _canUp::
                                    704 ;./alex.c:19: if (alex.x < 2)
      000389 3Ar03r00         [13]  705 	ld	a, (#_alex + 0)
      00038C D6 02            [ 7]  706 	sub	a, #0x02
      00038E 30 02            [12]  707 	jr	NC, 00102$
                                    708 ;./alex.c:20: return 0;
      000390 AF               [ 4]  709 	xor	a, a
      000391 C9               [10]  710 	ret
      000392                        711 00102$:
                                    712 ;./alex.c:21: return 1;
      000392 3E 01            [ 7]  713 	ld	a, #0x01
                                    714 ;./alex.c:22: }
      000394 C9               [10]  715 	ret
                                    716 ;./alex.c:24: unsigned char canDown() {
                                    717 ;	---------------------------------
                                    718 ; Function canDown
                                    719 ; ---------------------------------
      000395                        720 _canDown::
                                    721 ;./alex.c:25: if (alex.y > 155)
      000395 21r04r00         [10]  722 	ld	hl, #_alex+1
      000398 4E               [ 7]  723 	ld	c, (hl)
      000399 3E 9B            [ 7]  724 	ld	a, #0x9b
      00039B 91               [ 4]  725 	sub	a, c
      00039C 30 02            [12]  726 	jr	NC, 00102$
                                    727 ;./alex.c:26: return 0;
      00039E AF               [ 4]  728 	xor	a, a
      00039F C9               [10]  729 	ret
      0003A0                        730 00102$:
                                    731 ;./alex.c:27: return 1;
      0003A0 3E 01            [ 7]  732 	ld	a, #0x01
                                    733 ;./alex.c:28: }
      0003A2 C9               [10]  734 	ret
                                    735 ;./alex.c:30: unsigned char canLeft() {
                                    736 ;	---------------------------------
                                    737 ; Function canLeft
                                    738 ; ---------------------------------
      0003A3                        739 _canLeft::
                                    740 ;./alex.c:31: if (alex.x < 9)
      0003A3 3Ar03r00         [13]  741 	ld	a, (#_alex + 0)
      0003A6 D6 09            [ 7]  742 	sub	a, #0x09
      0003A8 30 02            [12]  743 	jr	NC, 00102$
                                    744 ;./alex.c:32: return 0;
      0003AA AF               [ 4]  745 	xor	a, a
      0003AB C9               [10]  746 	ret
      0003AC                        747 00102$:
                                    748 ;./alex.c:33: return 1;
      0003AC 3E 01            [ 7]  749 	ld	a, #0x01
                                    750 ;./alex.c:34: }
      0003AE C9               [10]  751 	ret
                                    752 ;./alex.c:36: unsigned char canRight() {
                                    753 ;	---------------------------------
                                    754 ; Function canRight
                                    755 ; ---------------------------------
      0003AF                        756 _canRight::
                                    757 ;./alex.c:37: if (alex.x > 238)
      0003AF 21r03r00         [10]  758 	ld	hl, #_alex+0
      0003B2 4E               [ 7]  759 	ld	c, (hl)
      0003B3 3E EE            [ 7]  760 	ld	a, #0xee
      0003B5 91               [ 4]  761 	sub	a, c
      0003B6 30 02            [12]  762 	jr	NC, 00102$
                                    763 ;./alex.c:38: return 0;
      0003B8 AF               [ 4]  764 	xor	a, a
      0003B9 C9               [10]  765 	ret
      0003BA                        766 00102$:
                                    767 ;./alex.c:39: return 1;
      0003BA 3E 01            [ 7]  768 	ld	a, #0x01
                                    769 ;./alex.c:40: }
      0003BC C9               [10]  770 	ret
                                    771 ;./alex.c:42: void moveAlexSuelo(int keys) {
                                    772 ;	---------------------------------
                                    773 ; Function moveAlexSuelo
                                    774 ; ---------------------------------
      0003BD                        775 _moveAlexSuelo::
      0003BD DD E5            [15]  776 	push	ix
      0003BF DD 21 00 00      [14]  777 	ld	ix,#0
      0003C3 DD 39            [15]  778 	add	ix,sp
      0003C5 F5               [11]  779 	push	af
      0003C6 F5               [11]  780 	push	af
      0003C7 F5               [11]  781 	push	af
      0003C8 DD 75 FE         [19]  782 	ld	-2 (ix), l
      0003CB DD 74 FF         [19]  783 	ld	-1 (ix), h
                                    784 ;./alex.c:44: if (keys & PORT_A_KEY_LEFT)
      0003CE DD 7E FE         [19]  785 	ld	a, -2 (ix)
      0003D1 E6 04            [ 7]  786 	and	a, #0x04
      0003D3 DD 77 FA         [19]  787 	ld	-6 (ix), a
      0003D6 DD 36 FB 00      [19]  788 	ld	-5 (ix), #0x00
                                    789 ;./alex.c:46: if (keys & PORT_A_KEY_RIGHT)
      0003DA DD 7E FE         [19]  790 	ld	a, -2 (ix)
      0003DD E6 08            [ 7]  791 	and	a, #0x08
      0003DF DD 77 FC         [19]  792 	ld	-4 (ix), a
      0003E2 DD 36 FD 00      [19]  793 	ld	-3 (ix), #0x00
                                    794 ;./alex.c:43: if ((keys & PORT_A_KEY_DOWN)){
      0003E6 DD CB FE 4E      [20]  795 	bit	1, -2 (ix)
      0003EA 28 33            [12]  796 	jr	Z, 00109$
                                    797 ;./alex.c:44: if (keys & PORT_A_KEY_LEFT)
      0003EC AF               [ 4]  798 	xor	a, a
      0003ED DD B6 FA         [19]  799 	or	a, -6 (ix)
      0003F0 28 05            [12]  800 	jr	Z, 00102$
                                    801 ;./alex.c:45: alex.oriented = 1;
      0003F2 21r07r00         [10]  802 	ld	hl, #_alex+4
      0003F5 36 01            [10]  803 	ld	(hl), #0x01
      0003F7                        804 00102$:
                                    805 ;./alex.c:46: if (keys & PORT_A_KEY_RIGHT)
      0003F7 AF               [ 4]  806 	xor	a, a
      0003F8 DD B6 FC         [19]  807 	or	a, -4 (ix)
      0003FB 28 05            [12]  808 	jr	Z, 00104$
                                    809 ;./alex.c:47: alex.oriented = 0;
      0003FD 21r07r00         [10]  810 	ld	hl, #_alex+4
      000400 36 00            [10]  811 	ld	(hl), #0x00
      000402                        812 00104$:
                                    813 ;./alex.c:48: if (!alex.oriented)
      000402 3Ar07r00         [13]  814 	ld	a,(#_alex + 4)
                                    815 ;./alex.c:49: alex.frame = 7;
                                    816 ;./alex.c:48: if (!alex.oriented)
      000405 DD 77 FD         [19]  817 	ld	-3 (ix), a
      000408 B7               [ 4]  818 	or	a, a
      000409 20 07            [12]  819 	jr	NZ, 00106$
                                    820 ;./alex.c:49: alex.frame = 7;
      00040B 21r05r00         [10]  821 	ld	hl, #(_alex + 2)
      00040E 36 07            [10]  822 	ld	(hl), #0x07
      000410 18 05            [12]  823 	jr	00107$
      000412                        824 00106$:
                                    825 ;./alex.c:51: alex.frame = 15;
      000412 21r05r00         [10]  826 	ld	hl, #(_alex + 2)
      000415 36 0F            [10]  827 	ld	(hl), #0x0f
      000417                        828 00107$:
                                    829 ;./alex.c:52: alex.lastChangeFrame = 15;
      000417 21r06r00         [10]  830 	ld	hl, #_alex + 3
      00041A 36 0F            [10]  831 	ld	(hl), #0x0f
                                    832 ;./alex.c:53: return; // not move
      00041C C3r29r05         [10]  833 	jp	00146$
      00041F                        834 00109$:
                                    835 ;./alex.c:56: if (keys & PORT_A_KEY_2) {
      00041F DD CB FE 6E      [20]  836 	bit	5, -2 (ix)
      000423 28 1E            [12]  837 	jr	Z, 00116$
                                    838 ;./alex.c:57: if (alex.y > 100)
      000425 01r04r00         [10]  839 	ld	bc, #_alex+1
      000428 0A               [ 7]  840 	ld	a, (bc)
      000429 5F               [ 4]  841 	ld	e, a
      00042A 3E 64            [ 7]  842 	ld	a, #0x64
      00042C 93               [ 4]  843 	sub	a, e
      00042D 30 09            [12]  844 	jr	NC, 00111$
                                    845 ;./alex.c:58: maxSalto = alex.y - 100;
      00042F 7B               [ 4]  846 	ld	a, e
      000430 21r02r00         [10]  847 	ld	hl, #_maxSalto
      000433 C6 9C            [ 7]  848 	add	a, #0x9c
      000435 77               [ 7]  849 	ld	(hl), a
      000436 18 05            [12]  850 	jr	00112$
      000438                        851 00111$:
                                    852 ;./alex.c:60: maxSalto = 0;
      000438 21r02r00         [10]  853 	ld	hl, #_maxSalto
      00043B 36 00            [10]  854 	ld	(hl), #0x00
      00043D                        855 00112$:
                                    856 ;./alex.c:61: alex.y--;
      00043D 0A               [ 7]  857 	ld	a, (bc)
      00043E 3D               [ 4]  858 	dec	a
      00043F 02               [ 7]  859 	ld	(bc), a
                                    860 ;./alex.c:62: return;
      000440 C3r29r05         [10]  861 	jp	00146$
      000443                        862 00116$:
                                    863 ;./alex.c:64: else if (keys & PORT_A_KEY_1) {
      000443 DD CB FE 66      [20]  864 	bit	4, -2 (ix)
      000447 28 0A            [12]  865 	jr	Z, 00117$
                                    866 ;./alex.c:65: alex.state = PUÑETAZO_SUELO;
      000449 21r08r00         [10]  867 	ld	hl, #_alex + 5
      00044C 36 20            [10]  868 	ld	(hl), #0x20
                                    869 ;./alex.c:66: alex.lastChangeFrame = 15;
      00044E 21r06r00         [10]  870 	ld	hl, #_alex + 3
      000451 36 0F            [10]  871 	ld	(hl), #0x0f
      000453                        872 00117$:
                                    873 ;./alex.c:68: if(alex.state != PUÑETAZO_SUELO) {
      000453 21r08r00         [10]  874 	ld	hl, #(_alex + 5)
      000456 6E               [ 7]  875 	ld	l, (hl)
                                    876 ;	spillPairReg hl
                                    877 ;./alex.c:72: alex.oriented = 1;
                                    878 ;./alex.c:73: alex.lastChangeFrame++;
      000457 01r06r00         [10]  879 	ld	bc, #_alex + 3
                                    880 ;./alex.c:76: alex.frame++;
      00045A 11r05r00         [10]  881 	ld	de, #_alex + 2
                                    882 ;./alex.c:68: if(alex.state != PUÑETAZO_SUELO) {
      00045D 7D               [ 4]  883 	ld	a, l
      00045E D6 20            [ 7]  884 	sub	a, #0x20
      000460 28 76            [12]  885 	jr	Z, 00144$
                                    886 ;./alex.c:69: if ((keys & PORT_A_KEY_LEFT) && alex.x > 8 )
      000462 AF               [ 4]  887 	xor	a, a
      000463 DD B6 FA         [19]  888 	or	a, -6 (ix)
      000466 28 32            [12]  889 	jr	Z, 00135$
      000468 21r03r00         [10]  890 	ld	hl, #_alex
      00046B 6E               [ 7]  891 	ld	l, (hl)
                                    892 ;	spillPairReg hl
      00046C 3E 08            [ 7]  893 	ld	a, #0x08
      00046E 95               [ 4]  894 	sub	a, l
      00046F 30 29            [12]  895 	jr	NC, 00135$
                                    896 ;./alex.c:71: alex.x -= 1;
      000471 7D               [ 4]  897 	ld	a, l
      000472 3D               [ 4]  898 	dec	a
      000473 32r03r00         [13]  899 	ld	(#_alex),a
                                    900 ;./alex.c:72: alex.oriented = 1;
      000476 21r07r00         [10]  901 	ld	hl, #(_alex + 4)
      000479 36 01            [10]  902 	ld	(hl), #0x01
                                    903 ;./alex.c:73: alex.lastChangeFrame++;
      00047B 0A               [ 7]  904 	ld	a, (bc)
      00047C 3C               [ 4]  905 	inc	a
      00047D 02               [ 7]  906 	ld	(bc), a
                                    907 ;./alex.c:74: if (alex.lastChangeFrame == 11) {
      00047E D6 0B            [ 7]  908 	sub	a, #0x0b
      000480 20 05            [12]  909 	jr	NZ, 00119$
                                    910 ;./alex.c:75: alex.lastChangeFrame = 0;
      000482 AF               [ 4]  911 	xor	a, a
      000483 02               [ 7]  912 	ld	(bc), a
                                    913 ;./alex.c:76: alex.frame++;
      000484 1A               [ 7]  914 	ld	a, (de)
      000485 3C               [ 4]  915 	inc	a
      000486 12               [ 7]  916 	ld	(de), a
      000487                        917 00119$:
                                    918 ;./alex.c:78: if (alex.frame > 11 || alex.frame < 8)
      000487 1A               [ 7]  919 	ld	a, (de)
      000488 4F               [ 4]  920 	ld	c, a
      000489 3E 0B            [ 7]  921 	ld	a, #0x0b
      00048B 91               [ 4]  922 	sub	a, c
      00048C 38 06            [12]  923 	jr	C, 00120$
      00048E 79               [ 4]  924 	ld	a, c
      00048F D6 08            [ 7]  925 	sub	a, #0x08
      000491 D2r29r05         [10]  926 	jp	NC, 00146$
      000494                        927 00120$:
                                    928 ;./alex.c:79: alex.frame = 8;
      000494 3E 08            [ 7]  929 	ld	a, #0x08
      000496 12               [ 7]  930 	ld	(de), a
      000497 C3r29r05         [10]  931 	jp	00146$
      00049A                        932 00135$:
                                    933 ;./alex.c:81: else if ((keys & PORT_A_KEY_RIGHT) && alex.x <240)
      00049A AF               [ 4]  934 	xor	a, a
      00049B DD B6 FC         [19]  935 	or	a, -4 (ix)
      00049E 28 27            [12]  936 	jr	Z, 00131$
      0004A0 3Ar03r00         [13]  937 	ld	a, (#_alex + 0)
      0004A3 FE F0            [ 7]  938 	cp	a, #0xf0
      0004A5 30 20            [12]  939 	jr	NC, 00131$
                                    940 ;./alex.c:83: alex.x += 1;
      0004A7 3C               [ 4]  941 	inc	a
      0004A8 32r03r00         [13]  942 	ld	(#_alex),a
                                    943 ;./alex.c:84: alex.oriented = 0;
      0004AB 21r07r00         [10]  944 	ld	hl, #(_alex + 4)
      0004AE 36 00            [10]  945 	ld	(hl), #0x00
                                    946 ;./alex.c:85: alex.lastChangeFrame++;
      0004B0 0A               [ 7]  947 	ld	a, (bc)
      0004B1 3C               [ 4]  948 	inc	a
      0004B2 02               [ 7]  949 	ld	(bc), a
                                    950 ;./alex.c:86: if (alex.lastChangeFrame == 11) {
      0004B3 D6 0B            [ 7]  951 	sub	a, #0x0b
      0004B5 20 05            [12]  952 	jr	NZ, 00124$
                                    953 ;./alex.c:87: alex.lastChangeFrame = 0;
      0004B7 AF               [ 4]  954 	xor	a, a
      0004B8 02               [ 7]  955 	ld	(bc), a
                                    956 ;./alex.c:88: alex.frame++;
      0004B9 1A               [ 7]  957 	ld	a, (de)
      0004BA 3C               [ 4]  958 	inc	a
      0004BB 12               [ 7]  959 	ld	(de), a
      0004BC                        960 00124$:
                                    961 ;./alex.c:90: if (alex.frame > 3 || alex.frame < 0)
      0004BC 1A               [ 7]  962 	ld	a, (de)
      0004BD 4F               [ 4]  963 	ld	c, a
      0004BE 3E 03            [ 7]  964 	ld	a, #0x03
      0004C0 91               [ 4]  965 	sub	a, c
      0004C1 30 66            [12]  966 	jr	NC, 00146$
                                    967 ;./alex.c:91: alex.frame = 0;
      0004C3 AF               [ 4]  968 	xor	a, a
      0004C4 12               [ 7]  969 	ld	(de), a
      0004C5 18 62            [12]  970 	jr	00146$
      0004C7                        971 00131$:
                                    972 ;./alex.c:95: alex.frame = 4;
      0004C7 3E 04            [ 7]  973 	ld	a, #0x04
      0004C9 12               [ 7]  974 	ld	(de), a
                                    975 ;./alex.c:96: if (alex.oriented)
      0004CA 3Ar07r00         [13]  976 	ld	a, (#(_alex + 4) + 0)
      0004CD B7               [ 4]  977 	or	a, a
      0004CE 28 03            [12]  978 	jr	Z, 00129$
                                    979 ;./alex.c:97: alex.frame = 12;
      0004D0 3E 0C            [ 7]  980 	ld	a, #0x0c
      0004D2 12               [ 7]  981 	ld	(de), a
      0004D3                        982 00129$:
                                    983 ;./alex.c:98: alex.lastChangeFrame = 10;
      0004D3 3E 0A            [ 7]  984 	ld	a, #0x0a
      0004D5 02               [ 7]  985 	ld	(bc), a
      0004D6 18 51            [12]  986 	jr	00146$
      0004D8                        987 00144$:
                                    988 ;./alex.c:102: if (!alex.oriented) {
      0004D8 3Ar07r00         [13]  989 	ld	a, (#(_alex + 4) + 0)
                                    990 ;./alex.c:104: SMS_addSprite (alex.x + 16, alex.y + 9, 9);
                                    991 ;./alex.c:102: if (!alex.oriented) {
      0004DB DD 77 FD         [19]  992 	ld	-3 (ix), a
      0004DE B7               [ 4]  993 	or	a, a
      0004DF 20 22            [12]  994 	jr	NZ, 00139$
                                    995 ;./alex.c:103: alex.frame = 5;
      0004E1 3E 05            [ 7]  996 	ld	a, #0x05
      0004E3 12               [ 7]  997 	ld	(de), a
                                    998 ;./alex.c:104: SMS_addSprite (alex.x + 16, alex.y + 9, 9);
      0004E4 21r03r00         [10]  999 	ld	hl, #_alex
      0004E7 5E               [ 7] 1000 	ld	e, (hl)
      0004E8 16 00            [ 7] 1001 	ld	d, #0x00
      0004EA 21 10 00         [10] 1002 	ld	hl, #0x0010
      0004ED 19               [11] 1003 	add	hl, de
      0004EE 55               [ 4] 1004 	ld	d, l
      0004EF 1E 09            [ 7] 1005 	ld	e, #0x09
      0004F1 3Ar04r00         [13] 1006 	ld	a, (#(_alex + 1) + 0)
      0004F4 26 00            [ 7] 1007 	ld	h, #0x00
                                   1008 ;	spillPairReg hl
                                   1009 ;	spillPairReg hl
      0004F6 C6 09            [ 7] 1010 	add	a, #0x09
      0004F8 6F               [ 4] 1011 	ld	l, a
                                   1012 ;	spillPairReg hl
                                   1013 ;	spillPairReg hl
      0004F9 30 01            [12] 1014 	jr	NC, 00289$
      0004FB 24               [ 4] 1015 	inc	h
      0004FC                       1016 00289$:
      0004FC C5               [11] 1017 	push	bc
      0004FD CDr00r00         [17] 1018 	call	_SMS_addSprite_f
      000500 C1               [10] 1019 	pop	bc
      000501 18 1B            [12] 1020 	jr	00140$
      000503                       1021 00139$:
                                   1022 ;./alex.c:107: alex.frame = 13;
      000503 3E 0D            [ 7] 1023 	ld	a, #0x0d
      000505 12               [ 7] 1024 	ld	(de), a
                                   1025 ;./alex.c:108: SMS_addSprite (alex.x - 8,  alex.y + 9, 11);
      000506 3Ar03r00         [13] 1026 	ld	a, (#_alex + 0)
      000509 C6 F8            [ 7] 1027 	add	a, #0xf8
                                   1028 ;	spillPairReg hl
                                   1029 ;	spillPairReg hl
      00050B 57               [ 4] 1030 	ld	d, a
      00050C 1E 0B            [ 7] 1031 	ld	e, #0x0b
      00050E 3Ar04r00         [13] 1032 	ld	a, (#(_alex + 1) + 0)
      000511 26 00            [ 7] 1033 	ld	h, #0x00
                                   1034 ;	spillPairReg hl
                                   1035 ;	spillPairReg hl
      000513 C6 09            [ 7] 1036 	add	a, #0x09
      000515 6F               [ 4] 1037 	ld	l, a
                                   1038 ;	spillPairReg hl
                                   1039 ;	spillPairReg hl
      000516 30 01            [12] 1040 	jr	NC, 00290$
      000518 24               [ 4] 1041 	inc	h
      000519                       1042 00290$:
      000519 C5               [11] 1043 	push	bc
      00051A CDr00r00         [17] 1044 	call	_SMS_addSprite_f
      00051D C1               [10] 1045 	pop	bc
      00051E                       1046 00140$:
                                   1047 ;./alex.c:110: alex.lastChangeFrame--;
      00051E 0A               [ 7] 1048 	ld	a, (bc)
      00051F 3D               [ 4] 1049 	dec	a
      000520 02               [ 7] 1050 	ld	(bc), a
                                   1051 ;./alex.c:111: if(!alex.lastChangeFrame) {
      000521 B7               [ 4] 1052 	or	a, a
      000522 20 05            [12] 1053 	jr	NZ, 00146$
                                   1054 ;./alex.c:112: alex.state = 0;
      000524 21r08r00         [10] 1055 	ld	hl, #(_alex + 5)
      000527 36 00            [10] 1056 	ld	(hl), #0x00
      000529                       1057 00146$:
                                   1058 ;./alex.c:115: }
      000529 DD F9            [10] 1059 	ld	sp, ix
      00052B DD E1            [14] 1060 	pop	ix
      00052D C9               [10] 1061 	ret
                                   1062 ;./alex.c:117: void moveAlexAire(int keys, unsigned char puedeSubir, unsigned char puedeDerecha, unsigned char puedeIzquieda) {
                                   1063 ;	---------------------------------
                                   1064 ; Function moveAlexAire
                                   1065 ; ---------------------------------
      00052E                       1066 _moveAlexAire::
      00052E DD E5            [15] 1067 	push	ix
      000530 DD 21 00 00      [14] 1068 	ld	ix,#0
      000534 DD 39            [15] 1069 	add	ix,sp
      000536 F5               [11] 1070 	push	af
      000537 3B               [ 6] 1071 	dec	sp
      000538 DD 75 FE         [19] 1072 	ld	-2 (ix), l
      00053B DD 74 FF         [19] 1073 	ld	-1 (ix), h
                                   1074 ;./alex.c:118: if (alex.y > maxSalto) {
      00053E 21r04r00         [10] 1075 	ld	hl, #(_alex + 1)
      000541 46               [ 7] 1076 	ld	b, (hl)
                                   1077 ;./alex.c:119: alex.y -= 2;
      000542 48               [ 4] 1078 	ld	c, b
                                   1079 ;./alex.c:118: if (alex.y > maxSalto) {
      000543 3Ar02r00         [13] 1080 	ld	a, (_maxSalto+0)
      000546 90               [ 4] 1081 	sub	a, b
      000547 30 08            [12] 1082 	jr	NC, 00102$
                                   1083 ;./alex.c:119: alex.y -= 2;
      000549 0D               [ 4] 1084 	dec	c
      00054A 0D               [ 4] 1085 	dec	c
      00054B 21r04r00         [10] 1086 	ld	hl, #(_alex + 1)
      00054E 71               [ 7] 1087 	ld	(hl), c
      00054F 18 0E            [12] 1088 	jr	00103$
      000551                       1089 00102$:
                                   1090 ;./alex.c:122: alex.y += 2; // bajando
      000551 0C               [ 4] 1091 	inc	c
      000552 0C               [ 4] 1092 	inc	c
      000553 21r04r00         [10] 1093 	ld	hl, #(_alex + 1)
      000556 71               [ 7] 1094 	ld	(hl), c
                                   1095 ;./alex.c:123: maxSalto = 255;
      000557 FD 21r02r00      [14] 1096 	ld	iy, #_maxSalto
      00055B FD 36 00 FF      [19] 1097 	ld	0 (iy), #0xff
      00055F                       1098 00103$:
                                   1099 ;./alex.c:126: if (alex.state != PUÑETAZO_SALTANDO)
                                   1100 ;./alex.c:127: alex.oriented = 1;
                                   1101 ;./alex.c:125: if (keys & PORT_A_KEY_LEFT) {
      00055F DD CB FE 56      [20] 1102 	bit	2, -2 (ix)
      000563 28 1A            [12] 1103 	jr	Z, 00109$
                                   1104 ;./alex.c:126: if (alex.state != PUÑETAZO_SALTANDO)
      000565 3Ar08r00         [13] 1105 	ld	a, (#(_alex + 5) + 0)
      000568 D6 10            [ 7] 1106 	sub	a, #0x10
      00056A 28 05            [12] 1107 	jr	Z, 00105$
                                   1108 ;./alex.c:127: alex.oriented = 1;
      00056C 21r07r00         [10] 1109 	ld	hl, #(_alex + 4)
      00056F 36 01            [10] 1110 	ld	(hl), #0x01
      000571                       1111 00105$:
                                   1112 ;./alex.c:128: if (puedeIzquieda)
      000571 DD 7E 06         [19] 1113 	ld	a, 6 (ix)
      000574 B7               [ 4] 1114 	or	a, a
      000575 28 08            [12] 1115 	jr	Z, 00109$
                                   1116 ;./alex.c:129: alex.x -= 2;
      000577 3Ar03r00         [13] 1117 	ld	a, (#_alex + 0)
      00057A 3D               [ 4] 1118 	dec	a
      00057B 3D               [ 4] 1119 	dec	a
      00057C 32r03r00         [13] 1120 	ld	(#_alex),a
      00057F                       1121 00109$:
                                   1122 ;./alex.c:131: if (keys & PORT_A_KEY_RIGHT) {
      00057F DD CB FE 5E      [20] 1123 	bit	3, -2 (ix)
      000583 28 1A            [12] 1124 	jr	Z, 00115$
                                   1125 ;./alex.c:132: if (alex.state != PUÑETAZO_SALTANDO)
      000585 3Ar08r00         [13] 1126 	ld	a, (#(_alex + 5) + 0)
      000588 D6 10            [ 7] 1127 	sub	a, #0x10
      00058A 28 05            [12] 1128 	jr	Z, 00111$
                                   1129 ;./alex.c:133: alex.oriented = 0;
      00058C 21r07r00         [10] 1130 	ld	hl, #(_alex + 4)
      00058F 36 00            [10] 1131 	ld	(hl), #0x00
      000591                       1132 00111$:
                                   1133 ;./alex.c:134: if (puedeDerecha)
      000591 DD 7E 05         [19] 1134 	ld	a, 5 (ix)
      000594 B7               [ 4] 1135 	or	a, a
      000595 28 08            [12] 1136 	jr	Z, 00115$
                                   1137 ;./alex.c:135: alex.x += 2;
      000597 3Ar03r00         [13] 1138 	ld	a, (#_alex + 0)
      00059A C6 02            [ 7] 1139 	add	a, #0x02
      00059C 32r03r00         [13] 1140 	ld	(#_alex),a
      00059F                       1141 00115$:
                                   1142 ;./alex.c:137: if (alex.state == PUÑETAZO_SALTANDO) {
      00059F 21r08r00         [10] 1143 	ld	hl, #(_alex + 5)
      0005A2 4E               [ 7] 1144 	ld	c, (hl)
                                   1145 ;./alex.c:138: alex.lastChangeFrame--;
                                   1146 ;./alex.c:143: alex.frame = 5;
                                   1147 ;./alex.c:137: if (alex.state == PUÑETAZO_SALTANDO) {
      0005A3 79               [ 4] 1148 	ld	a, c
      0005A4 D6 10            [ 7] 1149 	sub	a, #0x10
      0005A6 20 55            [12] 1150 	jr	NZ, 00127$
                                   1151 ;./alex.c:138: alex.lastChangeFrame--;
      0005A8 21r06r00         [10] 1152 	ld	hl, #(_alex + 3)
      0005AB 4E               [ 7] 1153 	ld	c, (hl)
      0005AC 0D               [ 4] 1154 	dec	c
      0005AD 21r06r00         [10] 1155 	ld	hl, #(_alex + 3)
                                   1156 ;./alex.c:139: if  (!alex.lastChangeFrame) {
      0005B0 79               [ 4] 1157 	ld	a,c
      0005B1 77               [ 7] 1158 	ld	(hl),a
      0005B2 B7               [ 4] 1159 	or	a, a
      0005B3 20 05            [12] 1160 	jr	NZ, 00117$
                                   1161 ;./alex.c:140: alex.state = 0;
      0005B5 21r08r00         [10] 1162 	ld	hl, #(_alex + 5)
      0005B8 36 00            [10] 1163 	ld	(hl), #0x00
      0005BA                       1164 00117$:
                                   1165 ;./alex.c:142: if (!alex.oriented) {
      0005BA 3Ar07r00         [13] 1166 	ld	a, (#(_alex + 4) + 0)
      0005BD B7               [ 4] 1167 	or	a, a
      0005BE 20 21            [12] 1168 	jr	NZ, 00119$
                                   1169 ;./alex.c:143: alex.frame = 5;
      0005C0 21r05r00         [10] 1170 	ld	hl, #(_alex + 2)
      0005C3 36 05            [10] 1171 	ld	(hl), #0x05
                                   1172 ;./alex.c:144: SMS_addSprite (alex.x + 16, alex.y + 9, 9);
      0005C5 21r03r00         [10] 1173 	ld	hl, #_alex
      0005C8 4E               [ 7] 1174 	ld	c, (hl)
      0005C9 06 00            [ 7] 1175 	ld	b, #0x00
      0005CB 21 10 00         [10] 1176 	ld	hl, #0x0010
      0005CE 09               [11] 1177 	add	hl, bc
      0005CF 55               [ 4] 1178 	ld	d, l
      0005D0 1E 09            [ 7] 1179 	ld	e, #0x09
      0005D2 21r04r00         [10] 1180 	ld	hl, #(_alex + 1)
      0005D5 4E               [ 7] 1181 	ld	c, (hl)
      0005D6 06 00            [ 7] 1182 	ld	b, #0x00
      0005D8 21 09 00         [10] 1183 	ld	hl, #0x0009
      0005DB 09               [11] 1184 	add	hl, bc
      0005DC CDr00r00         [17] 1185 	call	_SMS_addSprite_f
      0005DF 18 41            [12] 1186 	jr	00129$
      0005E1                       1187 00119$:
                                   1188 ;./alex.c:147: alex.frame = 13;
      0005E1 21r05r00         [10] 1189 	ld	hl, #(_alex + 2)
      0005E4 36 0D            [10] 1190 	ld	(hl), #0x0d
                                   1191 ;./alex.c:148: SMS_addSprite (alex.x - 8,  alex.y + 9, 11);
      0005E6 3Ar03r00         [13] 1192 	ld	a, (#_alex + 0)
      0005E9 C6 F8            [ 7] 1193 	add	a, #0xf8
      0005EB 57               [ 4] 1194 	ld	d, a
      0005EC 1E 0B            [ 7] 1195 	ld	e, #0x0b
      0005EE 21r04r00         [10] 1196 	ld	hl, #(_alex + 1)
      0005F1 4E               [ 7] 1197 	ld	c, (hl)
      0005F2 06 00            [ 7] 1198 	ld	b, #0x00
      0005F4 21 09 00         [10] 1199 	ld	hl, #0x0009
      0005F7 09               [11] 1200 	add	hl, bc
      0005F8 CDr00r00         [17] 1201 	call	_SMS_addSprite_f
      0005FB 18 25            [12] 1202 	jr	00129$
      0005FD                       1203 00127$:
                                   1204 ;./alex.c:152: if (!alex.oriented)
      0005FD 3Ar07r00         [13] 1205 	ld	a, (#(_alex + 4) + 0)
      000600 DD 77 FD         [19] 1206 	ld	-3 (ix), a
      000603 B7               [ 4] 1207 	or	a, a
      000604 20 07            [12] 1208 	jr	NZ, 00122$
                                   1209 ;./alex.c:153: alex.frame = 6;
      000606 21r05r00         [10] 1210 	ld	hl, #(_alex + 2)
      000609 36 06            [10] 1211 	ld	(hl), #0x06
      00060B 18 05            [12] 1212 	jr	00123$
      00060D                       1213 00122$:
                                   1214 ;./alex.c:155: alex.frame = 14;
      00060D 21r05r00         [10] 1215 	ld	hl, #(_alex + 2)
      000610 36 0E            [10] 1216 	ld	(hl), #0x0e
      000612                       1217 00123$:
                                   1218 ;./alex.c:156: if (keys & PORT_A_KEY_1) {
      000612 DD CB FE 66      [20] 1219 	bit	4, -2 (ix)
      000616 28 0A            [12] 1220 	jr	Z, 00129$
                                   1221 ;./alex.c:157: alex.state = PUÑETAZO_SALTANDO;
      000618 21r08r00         [10] 1222 	ld	hl, #(_alex + 5)
      00061B 36 10            [10] 1223 	ld	(hl), #0x10
                                   1224 ;./alex.c:158: alex.lastChangeFrame = 20;
      00061D 21r06r00         [10] 1225 	ld	hl, #(_alex + 3)
      000620 36 14            [10] 1226 	ld	(hl), #0x14
      000622                       1227 00129$:
                                   1228 ;./alex.c:162: }
      000622 DD F9            [10] 1229 	ld	sp, ix
      000624 DD E1            [14] 1230 	pop	ix
      000626 E1               [10] 1231 	pop	hl
      000627 F1               [10] 1232 	pop	af
      000628 33               [ 6] 1233 	inc	sp
      000629 E9               [ 4] 1234 	jp	(hl)
                                   1235 ;./alex.c:165: void moveAlex(int keys) {
                                   1236 ;	---------------------------------
                                   1237 ; Function moveAlex
                                   1238 ; ---------------------------------
      00062A                       1239 _moveAlex::
      00062A DD E5            [15] 1240 	push	ix
      00062C DD 21 00 00      [14] 1241 	ld	ix,#0
      000630 DD 39            [15] 1242 	add	ix,sp
      000632 3B               [ 6] 1243 	dec	sp
                                   1244 ;./alex.c:166: unsigned char puedeBajar = canDown();
      000633 E5               [11] 1245 	push	hl
      000634 CDr95r03         [17] 1246 	call	_canDown
      000637 4F               [ 4] 1247 	ld	c, a
      000638 C5               [11] 1248 	push	bc
      000639 CDr89r03         [17] 1249 	call	_canUp
      00063C DD 77 FF         [19] 1250 	ld	-1 (ix), a
      00063F CDrAFr03         [17] 1251 	call	_canRight
      000642 5F               [ 4] 1252 	ld	e, a
      000643 D5               [11] 1253 	push	de
      000644 CDrA3r03         [17] 1254 	call	_canLeft
      000647 D1               [10] 1255 	pop	de
      000648 C1               [10] 1256 	pop	bc
      000649 E1               [10] 1257 	pop	hl
                                   1258 ;./alex.c:170: if (puedeBajar)
      00064A 0C               [ 4] 1259 	inc	c
      00064B 0D               [ 4] 1260 	dec	c
      00064C 28 0C            [12] 1261 	jr	Z, 00102$
                                   1262 ;./alex.c:171: moveAlexAire(keys, puedeSubir, puedeDerecha, puedeIzquierda);
      00064E 57               [ 4] 1263 	ld	d,a
      00064F D5               [11] 1264 	push	de
      000650 DD 7E FF         [19] 1265 	ld	a, -1 (ix)
      000653 F5               [11] 1266 	push	af
      000654 33               [ 6] 1267 	inc	sp
      000655 CDr2Er05         [17] 1268 	call	_moveAlexAire
      000658 18 03            [12] 1269 	jr	00104$
      00065A                       1270 00102$:
                                   1271 ;./alex.c:173: moveAlexSuelo(keys);
      00065A CDrBDr03         [17] 1272 	call	_moveAlexSuelo
      00065D                       1273 00104$:
                                   1274 ;./alex.c:174: }
      00065D 33               [ 6] 1275 	inc	sp
      00065E DD E1            [14] 1276 	pop	ix
      000660 C9               [10] 1277 	ret
                                   1278 ;main.c:18: void inicializaPajaros()
                                   1279 ;	---------------------------------
                                   1280 ; Function inicializaPajaros
                                   1281 ; ---------------------------------
      000661                       1282 _inicializaPajaros::
      000661 DD E5            [15] 1283 	push	ix
      000663 DD 21 00 00      [14] 1284 	ld	ix,#0
      000667 DD 39            [15] 1285 	add	ix,sp
      000669 F5               [11] 1286 	push	af
                                   1287 ;main.c:21: for (i = 0; i < NUM_PAJAROS; i++)
      00066A 0E 00            [ 7] 1288 	ld	c, #0x00
      00066C                       1289 00102$:
                                   1290 ;main.c:23: pajaros[i].x = 15 + 32 * i;
      00066C 06 00            [ 7] 1291 	ld	b, #0x00
      00066E 69               [ 4] 1292 	ld	l, c
      00066F 60               [ 4] 1293 	ld	h, b
      000670 29               [11] 1294 	add	hl, hl
      000671 09               [11] 1295 	add	hl, bc
      000672 29               [11] 1296 	add	hl, hl
      000673 EB               [ 4] 1297 	ex	de, hl
      000674 21r00r00         [10] 1298 	ld	hl, #_pajaros
      000677 19               [11] 1299 	add	hl, de
      000678 EB               [ 4] 1300 	ex	de, hl
      000679 79               [ 4] 1301 	ld	a, c
      00067A 0F               [ 4] 1302 	rrca
      00067B 0F               [ 4] 1303 	rrca
      00067C 0F               [ 4] 1304 	rrca
      00067D E6 E0            [ 7] 1305 	and	a, #0xe0
      00067F C6 0F            [ 7] 1306 	add	a, #0x0f
      000681 12               [ 7] 1307 	ld	(de), a
                                   1308 ;main.c:24: pajaros[i].y = 15 + 16 * (i / 2);
      000682 6B               [ 4] 1309 	ld	l, e
      000683 62               [ 4] 1310 	ld	h, d
      000684 23               [ 6] 1311 	inc	hl
      000685 E3               [19] 1312 	ex	(sp), hl
      000686 69               [ 4] 1313 	ld	l, c
                                   1314 ;	spillPairReg hl
                                   1315 ;	spillPairReg hl
      000687 26 00            [ 7] 1316 	ld	h, #0x00
                                   1317 ;	spillPairReg hl
                                   1318 ;	spillPairReg hl
      000689 CB 2C            [ 8] 1319 	sra	h
      00068B CB 1D            [ 8] 1320 	rr	l
      00068D 7D               [ 4] 1321 	ld	a, l
      00068E 87               [ 4] 1322 	add	a, a
      00068F 87               [ 4] 1323 	add	a, a
      000690 87               [ 4] 1324 	add	a, a
      000691 87               [ 4] 1325 	add	a, a
      000692 C6 0F            [ 7] 1326 	add	a, #0x0f
      000694 E1               [10] 1327 	pop	hl
      000695 E5               [11] 1328 	push	hl
      000696 77               [ 7] 1329 	ld	(hl), a
                                   1330 ;main.c:25: pajaros[i].lastChangeFrame = i * 3;
      000697 13               [ 6] 1331 	inc	de
      000698 13               [ 6] 1332 	inc	de
      000699 13               [ 6] 1333 	inc	de
      00069A 79               [ 4] 1334 	ld	a, c
      00069B 87               [ 4] 1335 	add	a, a
      00069C 81               [ 4] 1336 	add	a, c
      00069D 12               [ 7] 1337 	ld	(de), a
                                   1338 ;main.c:21: for (i = 0; i < NUM_PAJAROS; i++)
      00069E 0C               [ 4] 1339 	inc	c
      00069F 79               [ 4] 1340 	ld	a, c
      0006A0 D6 0A            [ 7] 1341 	sub	a, #0x0a
      0006A2 38 C8            [12] 1342 	jr	C, 00102$
                                   1343 ;main.c:27: }
      0006A4 DD F9            [10] 1344 	ld	sp, ix
      0006A6 DD E1            [14] 1345 	pop	ix
      0006A8 C9               [10] 1346 	ret
                                   1347 ;main.c:29: void loadGrapVRAM()
                                   1348 ;	---------------------------------
                                   1349 ; Function loadGrapVRAM
                                   1350 ; ---------------------------------
      0006A9                       1351 _loadGrapVRAM::
      0006A9 DD E5            [15] 1352 	push	ix
      0006AB DD 21 00 00      [14] 1353 	ld	ix,#0
      0006AF DD 39            [15] 1354 	add	ix,sp
      0006B1 21 E2 FF         [10] 1355 	ld	hl, #-30
      0006B4 39               [11] 1356 	add	hl, sp
      0006B5 F9               [ 6] 1357 	ld	sp, hl
                                   1358 ;main.c:31: SMS_init();
      0006B6 CDr00r00         [17] 1359 	call	_SMS_init
                                   1360 ;main.c:32: inicializaPajaros();
      0006B9 CDr61r06         [17] 1361 	call	_inicializaPajaros
                                   1362 ;main.c:34: SMS_setSpriteMode(SPRITEMODE_TALL);
      0006BC 2E 01            [ 7] 1363 	ld	l, #0x01
                                   1364 ;	spillPairReg hl
                                   1365 ;	spillPairReg hl
      0006BE CDr00r00         [17] 1366 	call	_SMS_setSpriteMode
                                   1367 ;main.c:35: SMS_displayOn();
      0006C1 21 40 01         [10] 1368 	ld	hl, #0x0140
      0006C4 CDr00r00         [17] 1369 	call	_SMS_VDPturnOnFeature
                                   1370 ;main.c:36: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      0006C7 21 20 00         [10] 1371 	ld	hl, #0x0020
      0006CA CDr00r00         [17] 1372 	call	_SMS_VDPturnOnFeature
                                   1373 ;main.c:37: SMS_loadBGPalette(sonicpalette_inc);
      0006CD 21r00r00         [10] 1374 	ld	hl, #_sonicpalette_inc
      0006D0 CDr00r00         [17] 1375 	call	_SMS_loadBGPalette
                                   1376 ;main.c:38: SMS_loadSpritePalette(palleteAlex_inc);
      0006D3 21r00r00         [10] 1377 	ld	hl, #_palleteAlex_inc
      0006D6 CDr00r00         [17] 1378 	call	_SMS_loadSpritePalette
                                   1379 ;main.c:39: SMS_loadTiles(sonictiles_inc, 0, sonictiles_inc_size);
      0006D9 21 C0 14         [10] 1380 	ld	hl, #0x14c0
      0006DC E5               [11] 1381 	push	hl
      0006DD 11r00r00         [10] 1382 	ld	de, #_sonictiles_inc
      0006E0 21 00 40         [10] 1383 	ld	hl, #0x4000
      0006E3 CDr00r00         [17] 1384 	call	_SMS_VRAMmemcpy
                                   1385 ;main.c:40: spriteAlex = generateSpriteNoRAM(2, 2, spriteAlex_inc_size, spriteAlex_inc);
      0006E6 21r00r00         [10] 1386 	ld	hl, #_spriteAlex_inc
      0006E9 E5               [11] 1387 	push	hl
      0006EA 21 00 10         [10] 1388 	ld	hl, #0x1000
      0006ED E5               [11] 1389 	push	hl
                                   1390 ;	spillPairReg hl
                                   1391 ;	spillPairReg hl
      0006EE 3E 02            [ 7] 1392 	ld	a,#0x02
      0006F0 6F               [ 4] 1393 	ld	l,a
      0006F1 E5               [11] 1394 	push	hl
      0006F2 21 06 00         [10] 1395 	ld	hl, #0x0006
      0006F5 39               [11] 1396 	add	hl, sp
      0006F6 EB               [ 4] 1397 	ex	de,hl
      0006F7 E1               [10] 1398 	pop	hl
      0006F8 D5               [11] 1399 	push	de
      0006F9 CDrAAr00         [17] 1400 	call	_generateSpriteNoRAM
      0006FC F1               [10] 1401 	pop	af
      0006FD F1               [10] 1402 	pop	af
      0006FE F1               [10] 1403 	pop	af
      0006FF 11r09r00         [10] 1404 	ld	de, #_spriteAlex
      000702 21 00 00         [10] 1405 	ld	hl, #0
      000705 39               [11] 1406 	add	hl, sp
      000706 01 0A 00         [10] 1407 	ld	bc, #0x000a
      000709 ED B0            [21] 1408 	ldir
                                   1409 ;main.c:41: spritePuno = generateSprite(1, 2, puno_inc_size, puno_inc);
      00070B 21r00r00         [10] 1410 	ld	hl, #_puno_inc
      00070E E5               [11] 1411 	push	hl
      00070F 21 80 00         [10] 1412 	ld	hl, #0x0080
      000712 E5               [11] 1413 	push	hl
      000713 2E 02            [ 7] 1414 	ld	l, #0x02
                                   1415 ;	spillPairReg hl
                                   1416 ;	spillPairReg hl
      000715 3E 01            [ 7] 1417 	ld	a, #0x01
      000717 E5               [11] 1418 	push	hl
      000718 21 10 00         [10] 1419 	ld	hl, #0x0010
      00071B 39               [11] 1420 	add	hl, sp
      00071C EB               [ 4] 1421 	ex	de,hl
      00071D E1               [10] 1422 	pop	hl
      00071E D5               [11] 1423 	push	de
      00071F CDr00r00         [17] 1424 	call	_generateSprite
      000722 F1               [10] 1425 	pop	af
      000723 F1               [10] 1426 	pop	af
      000724 F1               [10] 1427 	pop	af
      000725 11r1Dr00         [10] 1428 	ld	de, #_spritePuno
      000728 21 0A 00         [10] 1429 	ld	hl, #10
      00072B 39               [11] 1430 	add	hl, sp
      00072C 01 0A 00         [10] 1431 	ld	bc, #0x000a
      00072F ED B0            [21] 1432 	ldir
                                   1433 ;main.c:42: spritePajaro = generateSprite(3, 1, spritePajaro_inc_size, spritePajaro_inc);
      000731 21r00r00         [10] 1434 	ld	hl, #_spritePajaro_inc
      000734 E5               [11] 1435 	push	hl
      000735 21 80 01         [10] 1436 	ld	hl, #0x0180
      000738 E5               [11] 1437 	push	hl
      000739 2E 01            [ 7] 1438 	ld	l, #0x01
                                   1439 ;	spillPairReg hl
                                   1440 ;	spillPairReg hl
      00073B 3E 03            [ 7] 1441 	ld	a, #0x03
      00073D E5               [11] 1442 	push	hl
      00073E 21 1A 00         [10] 1443 	ld	hl, #0x001a
      000741 39               [11] 1444 	add	hl, sp
      000742 EB               [ 4] 1445 	ex	de,hl
      000743 E1               [10] 1446 	pop	hl
      000744 D5               [11] 1447 	push	de
      000745 CDr00r00         [17] 1448 	call	_generateSprite
      000748 F1               [10] 1449 	pop	af
      000749 F1               [10] 1450 	pop	af
      00074A F1               [10] 1451 	pop	af
      00074B 11r13r00         [10] 1452 	ld	de, #_spritePajaro
      00074E 21 14 00         [10] 1453 	ld	hl, #20
      000751 39               [11] 1454 	add	hl, sp
      000752 01 0A 00         [10] 1455 	ld	bc, #0x000a
      000755 ED B0            [21] 1456 	ldir
                                   1457 ;main.c:44: SMS_loadTileMap(0, 0, sonictilemap_inc, sonictilemap_inc_size);
      000757 21 00 06         [10] 1458 	ld	hl, #0x0600
      00075A E5               [11] 1459 	push	hl
      00075B 11r00r00         [10] 1460 	ld	de, #_sonictilemap_inc
      00075E 26 78            [ 7] 1461 	ld	h, #0x78
      000760 CDr00r00         [17] 1462 	call	_SMS_VRAMmemcpy
                                   1463 ;main.c:45: }
      000763 DD F9            [10] 1464 	ld	sp, ix
      000765 DD E1            [14] 1465 	pop	ix
      000767 C9               [10] 1466 	ret
                                   1467 ;main.c:47: void dibujaPajaros()
                                   1468 ;	---------------------------------
                                   1469 ; Function dibujaPajaros
                                   1470 ; ---------------------------------
      000768                       1471 _dibujaPajaros::
      000768 DD E5            [15] 1472 	push	ix
      00076A DD 21 00 00      [14] 1473 	ld	ix,#0
      00076E DD 39            [15] 1474 	add	ix,sp
      000770 F5               [11] 1475 	push	af
                                   1476 ;main.c:50: for (i = 0; i < NUM_PAJAROS; i++)
      000771 DD 36 FF 00      [19] 1477 	ld	-1 (ix), #0x00
      000775                       1478 00106$:
                                   1479 ;main.c:52: pajaros[i].x++;
      000775 DD 4E FF         [19] 1480 	ld	c, -1 (ix)
      000778 06 00            [ 7] 1481 	ld	b, #0x00
      00077A 69               [ 4] 1482 	ld	l, c
      00077B 60               [ 4] 1483 	ld	h, b
      00077C 29               [11] 1484 	add	hl, hl
      00077D 09               [11] 1485 	add	hl, bc
      00077E 29               [11] 1486 	add	hl, hl
      00077F EB               [ 4] 1487 	ex	de, hl
      000780 21r00r00         [10] 1488 	ld	hl, #_pajaros
      000783 19               [11] 1489 	add	hl, de
      000784 EB               [ 4] 1490 	ex	de, hl
      000785 1A               [ 7] 1491 	ld	a, (de)
      000786 3C               [ 4] 1492 	inc	a
      000787 12               [ 7] 1493 	ld	(de), a
                                   1494 ;main.c:53: pajaros[i].lastChangeFrame++;
      000788 4B               [ 4] 1495 	ld	c, e
      000789 42               [ 4] 1496 	ld	b, d
      00078A 03               [ 6] 1497 	inc	bc
      00078B 03               [ 6] 1498 	inc	bc
      00078C 03               [ 6] 1499 	inc	bc
      00078D 0A               [ 7] 1500 	ld	a, (bc)
      00078E 3C               [ 4] 1501 	inc	a
      00078F 02               [ 7] 1502 	ld	(bc), a
                                   1503 ;main.c:54: if (pajaros[i].lastChangeFrame == 20)
      000790 D6 14            [ 7] 1504 	sub	a, #0x14
      000792 20 15            [12] 1505 	jr	NZ, 00104$
                                   1506 ;main.c:56: pajaros[i].frame++;
      000794 6B               [ 4] 1507 	ld	l, e
                                   1508 ;	spillPairReg hl
                                   1509 ;	spillPairReg hl
      000795 62               [ 4] 1510 	ld	h, d
                                   1511 ;	spillPairReg hl
                                   1512 ;	spillPairReg hl
      000796 23               [ 6] 1513 	inc	hl
      000797 23               [ 6] 1514 	inc	hl
      000798 7E               [ 7] 1515 	ld	a, (hl)
      000799 3C               [ 4] 1516 	inc	a
      00079A DD 77 FE         [19] 1517 	ld	-2 (ix), a
      00079D 77               [ 7] 1518 	ld	(hl), a
                                   1519 ;main.c:57: if (pajaros[i].frame > 1)
      00079E 3E 01            [ 7] 1520 	ld	a, #0x01
      0007A0 DD 96 FE         [19] 1521 	sub	a, -2 (ix)
      0007A3 30 02            [12] 1522 	jr	NC, 00102$
                                   1523 ;main.c:58: pajaros[i].frame = 0;
      0007A5 36 00            [10] 1524 	ld	(hl), #0x00
      0007A7                       1525 00102$:
                                   1526 ;main.c:59: pajaros[i].lastChangeFrame = 0;
      0007A7 AF               [ 4] 1527 	xor	a, a
      0007A8 02               [ 7] 1528 	ld	(bc), a
      0007A9                       1529 00104$:
                                   1530 ;main.c:61: draw_entidad(&(pajaros[i]), &spritePajaro);
      0007A9 EB               [ 4] 1531 	ex	de, hl
      0007AA 11r13r00         [10] 1532 	ld	de, #_spritePajaro
      0007AD CDr59r01         [17] 1533 	call	_draw_entidad
                                   1534 ;main.c:50: for (i = 0; i < NUM_PAJAROS; i++)
      0007B0 DD 34 FF         [23] 1535 	inc	-1 (ix)
      0007B3 DD 7E FF         [19] 1536 	ld	a, -1 (ix)
      0007B6 D6 0A            [ 7] 1537 	sub	a, #0x0a
      0007B8 38 BB            [12] 1538 	jr	C, 00106$
                                   1539 ;main.c:63: }
      0007BA DD F9            [10] 1540 	ld	sp, ix
      0007BC DD E1            [14] 1541 	pop	ix
      0007BE C9               [10] 1542 	ret
                                   1543 ;main.c:66: void main(void)
                                   1544 ;	---------------------------------
                                   1545 ; Function main
                                   1546 ; ---------------------------------
      0007BF                       1547 _main::
      0007BF DD E5            [15] 1548 	push	ix
      0007C1 DD 21 00 00      [14] 1549 	ld	ix,#0
      0007C5 DD 39            [15] 1550 	add	ix,sp
      0007C7 F5               [11] 1551 	push	af
                                   1552 ;main.c:71: SMS_VRAMmemsetW(0, 0x0000, 16384);
      0007C8 DD 36 FF 00      [19] 1553 	ld	-1 (ix), #0x00
      0007CC DD 36 FE 00      [19] 1554 	ld	-2 (ix), #0x00
      0007D0 21 00 40         [10] 1555 	ld	hl, #0x4000
      0007D3 E5               [11] 1556 	push	hl
      0007D4 11 00 00         [10] 1557 	ld	de, #0x0000
      0007D7 65               [ 4] 1558 	ld	h, l
      0007D8 CDr00r00         [17] 1559 	call	_SMS_VRAMmemsetW
                                   1560 ;main.c:81: printf("Hello, World! [1/3]");
      0007DB 21r7Cr08         [10] 1561 	ld	hl, #___str_0
      0007DE E5               [11] 1562 	push	hl
      0007DF CDr00r00         [17] 1563 	call	_printf
      0007E2 F1               [10] 1564 	pop	af
                                   1565 ;main.c:85: loadGrapVRAM();
      0007E3 CDrA9r06         [17] 1566 	call	_loadGrapVRAM
                                   1567 ;main.c:87: SMS_displayOn();
      0007E6 21 40 01         [10] 1568 	ld	hl, #0x0140
      0007E9 CDr00r00         [17] 1569 	call	_SMS_VDPturnOnFeature
                                   1570 ;main.c:88: SMS_setBGScrollX(scroll_x);
      0007EC 2E 00            [ 7] 1571 	ld	l, #0x00
                                   1572 ;	spillPairReg hl
                                   1573 ;	spillPairReg hl
      0007EE CDr00r00         [17] 1574 	call	_SMS_setBGScrollX
                                   1575 ;main.c:89: SMS_setBGScrollY(scroll_y);
      0007F1 2E 00            [ 7] 1576 	ld	l, #0x00
                                   1577 ;	spillPairReg hl
                                   1578 ;	spillPairReg hl
      0007F3 CDr00r00         [17] 1579 	call	_SMS_setBGScrollY
                                   1580 ;main.c:90: SMS_init();
      0007F6 CDr00r00         [17] 1581 	call	_SMS_init
                                   1582 ;main.c:96: PSGPlay(titulo_psg);
      0007F9 21r00r00         [10] 1583 	ld	hl, #_titulo_psg
      0007FC CDr00r00         [17] 1584 	call	_PSGPlay
                                   1585 ;main.c:97: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      0007FF 21 20 00         [10] 1586 	ld	hl, #0x0020
      000802 CDr00r00         [17] 1587 	call	_SMS_VDPturnOnFeature
      000805                       1588 00111$:
                                   1589 ;main.c:102: if (SMS_queryPauseRequested())
      000805 CDr00r00         [17] 1590 	call	_SMS_queryPauseRequested
      000808 CB 47            [ 8] 1591 	bit	0,a
      00080A 28 21            [12] 1592 	jr	Z, 00105$
                                   1593 ;main.c:104: PSGPlay(emeraldhill_psg);
      00080C 21r00r00         [10] 1594 	ld	hl, #_emeraldhill_psg
      00080F CDr00r00         [17] 1595 	call	_PSGPlay
                                   1596 ;main.c:105: SMS_resetPauseRequest();
      000812 CDr00r00         [17] 1597 	call	_SMS_resetPauseRequest
                                   1598 ;main.c:106: while (!SMS_queryPauseRequested())
      000815                       1599 00101$:
      000815 CDr00r00         [17] 1600 	call	_SMS_queryPauseRequested
      000818 CB 47            [ 8] 1601 	bit	0,a
      00081A 20 08            [12] 1602 	jr	NZ, 00103$
                                   1603 ;main.c:108: SMS_waitForVBlank();
      00081C CDr00r00         [17] 1604 	call	_SMS_waitForVBlank
                                   1605 ;main.c:109: PSGFrame();
      00081F CDr00r00         [17] 1606 	call	_PSGFrame
      000822 18 F1            [12] 1607 	jr	00101$
      000824                       1608 00103$:
                                   1609 ;main.c:111: SMS_resetPauseRequest();
      000824 CDr00r00         [17] 1610 	call	_SMS_resetPauseRequest
                                   1611 ;main.c:112: PSGPlay(titulo_psg);
      000827 21r00r00         [10] 1612 	ld	hl, #_titulo_psg
      00082A CDr00r00         [17] 1613 	call	_PSGPlay
      00082D                       1614 00105$:
                                   1615 ;main.c:116: int keys = SMS_getKeysHeld();
      00082D CDr00r00         [17] 1616 	call	_SMS_getKeysHeld
                                   1617 ;main.c:118: SMS_initSprites();
      000830 D5               [11] 1618 	push	de
      000831 CDr00r00         [17] 1619 	call	_SMS_initSprites
      000834 D1               [10] 1620 	pop	de
                                   1621 ;main.c:119: moveAlex(keys);
      000835 EB               [ 4] 1622 	ex	de, hl
      000836 CDr2Ar06         [17] 1623 	call	_moveAlex
                                   1624 ;main.c:120: draw_entidad(&alex, &spriteAlex);
      000839 11r09r00         [10] 1625 	ld	de, #_spriteAlex
      00083C 21r03r00         [10] 1626 	ld	hl, #_alex
      00083F CDr59r01         [17] 1627 	call	_draw_entidad
                                   1628 ;main.c:121: dibujaPajaros();
      000842 CDr68r07         [17] 1629 	call	_dibujaPajaros
                                   1630 ;main.c:123: SMS_finalizeSprites();
      000845 CDr00r00         [17] 1631 	call	_SMS_finalizeSprites
                                   1632 ;main.c:126: SMS_waitForVBlank();
      000848 CDr00r00         [17] 1633 	call	_SMS_waitForVBlank
                                   1634 ;main.c:127: SMS_copySpritestoSAT();
      00084B CDr00r00         [17] 1635 	call	_SMS_copySpritestoSAT
                                   1636 ;main.c:128: PSGFrame();
      00084E CDr00r00         [17] 1637 	call	_PSGFrame
                                   1638 ;main.c:129: SMS_displayOff();
      000851 21 40 01         [10] 1639 	ld	hl, #0x0140
      000854 CDr00r00         [17] 1640 	call	_SMS_VDPturnOffFeature
                                   1641 ;main.c:130: if (scroll_y % 2 == 0)
      000857 DD CB FF 46      [20] 1642 	bit	0, -1 (ix)
      00085B 20 03            [12] 1643 	jr	NZ, 00107$
                                   1644 ;main.c:131: scroll_x += 1;
      00085D DD 34 FE         [23] 1645 	inc	-2 (ix)
      000860                       1646 00107$:
                                   1647 ;main.c:132: scroll_y++;
      000860 DD 34 FF         [23] 1648 	inc	-1 (ix)
                                   1649 ;main.c:133: if (scroll_y == 224)
      000863 DD 7E FF         [19] 1650 	ld	a, -1 (ix)
      000866 D6 E0            [ 7] 1651 	sub	a, #0xe0
      000868 20 04            [12] 1652 	jr	NZ, 00109$
                                   1653 ;main.c:134: scroll_y = 0;
      00086A DD 36 FF 00      [19] 1654 	ld	-1 (ix), #0x00
      00086E                       1655 00109$:
                                   1656 ;main.c:136: SMS_setBGScrollX(scroll_x);
      00086E DD 6E FE         [19] 1657 	ld	l, -2 (ix)
                                   1658 ;	spillPairReg hl
                                   1659 ;	spillPairReg hl
      000871 CDr00r00         [17] 1660 	call	_SMS_setBGScrollX
                                   1661 ;main.c:138: SMS_displayOn();
      000874 21 40 01         [10] 1662 	ld	hl, #0x0140
      000877 CDr00r00         [17] 1663 	call	_SMS_VDPturnOnFeature
                                   1664 ;main.c:140: }
      00087A 18 89            [12] 1665 	jr	00111$
      00087C                       1666 ___str_0:
      00087C 48 65 6C 6C 6F 2C 20  1667 	.ascii "Hello, World! [1/3]"
             57 6F 72 6C 64 21 20
             5B 31 2F 33 5D
      00088F 00                    1668 	.db 0x00
                                   1669 	.area _CODE
      000890                       1670 __str_1:
      000890 72 61 70 68 6E 65 74  1671 	.ascii "raphnet"
      000897 00                    1672 	.db 0x00
      000898                       1673 __str_2:
      000898 62 61 73 69 63 20 65  1674 	.ascii "basic example"
             78 61 6D 70 6C 65
      0008A5 00                    1675 	.db 0x00
      0008A6                       1676 __str_3:
      0008A6 41 20 73 69 6D 70 6C  1677 	.ascii "A simple example"
             65 20 65 78 61 6D 70
             6C 65
      0008B6 00                    1678 	.db 0x00
                                   1679 	.area _INITIALIZER
      000000                       1680 __xinit__nextVRAMsprites:
      000000 00 01                 1681 	.dw #0x0100
      000002                       1682 __xinit__maxSalto:
      000002 FF                    1683 	.db #0xff	; 255
      000003                       1684 __xinit__alex:
      000003 1E                    1685 	.db #0x1e	; 30
      000004 14                    1686 	.db #0x14	; 20
      000005 00                    1687 	.db #0x00	; 0
      000006 00                    1688 	.db #0x00	; 0
      000007 00                    1689 	.db #0x00	; 0
      000008 00                    1690 	.db #0x00	; 0
      000009                       1691 __xinit__spriteAlex:
      000009 02                    1692 	.db #0x02	; 2
      00000A 02                    1693 	.db #0x02	; 2
      00000B 08                    1694 	.db #0x08	; 8
      00000C 00                    1695 	.db #0x00	; 0
      00000D 00 00                 1696 	.dw #0x0000
      00000F 00                    1697 	.db #0x00	; 0
      000010 00 00                 1698 	.dw #0x0000
      000012 00                    1699 	.db #0x00	; 0
      000013                       1700 __xinit__spritePajaro:
      000013 02                    1701 	.db #0x02	; 2
      000014 02                    1702 	.db #0x02	; 2
      000015 08                    1703 	.db #0x08	; 8
      000016 00                    1704 	.db #0x00	; 0
      000017 00 00                 1705 	.dw #0x0000
      000019 00                    1706 	.db #0x00	; 0
      00001A 00 00                 1707 	.dw #0x0000
      00001C 00                    1708 	.db #0x00	; 0
      00001D                       1709 __xinit__spritePuno:
      00001D 02                    1710 	.db #0x02	; 2
      00001E 02                    1711 	.db #0x02	; 2
      00001F 08                    1712 	.db #0x08	; 8
      000020 00                    1713 	.db #0x00	; 0
      000021 00 00                 1714 	.dw #0x0000
      000023 00                    1715 	.db #0x00	; 0
      000024 00 00                 1716 	.dw #0x0000
      000026 00                    1717 	.db #0x00	; 0
                                   1718 	.area _CABS (ABS)
      007FF0                       1719 	.org 0x7FF0
      007FF0                       1720 ___SMS__SEGA_signature:
      007FF0 54                    1721 	.db #0x54	; 84	'T'
      007FF1 4D                    1722 	.db #0x4d	; 77	'M'
      007FF2 52                    1723 	.db #0x52	; 82	'R'
      007FF3 20                    1724 	.db #0x20	; 32
      007FF4 53                    1725 	.db #0x53	; 83	'S'
      007FF5 45                    1726 	.db #0x45	; 69	'E'
      007FF6 47                    1727 	.db #0x47	; 71	'G'
      007FF7 41                    1728 	.db #0x41	; 65	'A'
      007FF8 FF                    1729 	.db #0xff	; 255
      007FF9 FF                    1730 	.db #0xff	; 255
      007FFA FF                    1731 	.db #0xff	; 255
      007FFB FF                    1732 	.db #0xff	; 255
      007FFC 99                    1733 	.db #0x99	; 153
      007FFD 99                    1734 	.db #0x99	; 153
      007FFE 00                    1735 	.db #0x00	; 0
      007FFF 4C                    1736 	.db #0x4c	; 76	'L'
      007FD8                       1737 	.org 0x7FD8
      007FD8                       1738 ___SMS__SDSC_author:
      007FD8 72 61 70 68 6E 65 74  1739 	.ascii "raphnet"
      007FDF 00                    1740 	.db 0x00
      007FCA                       1741 	.org 0x7FCA
      007FCA                       1742 ___SMS__SDSC_name:
      007FCA 62 61 73 69 63 20 65  1743 	.ascii "basic example"
             78 61 6D 70 6C 65
      007FD7 00                    1744 	.db 0x00
      007FB9                       1745 	.org 0x7FB9
      007FB9                       1746 ___SMS__SDSC_descr:
      007FB9 41 20 73 69 6D 70 6C  1747 	.ascii "A simple example"
             65 20 65 78 61 6D 70
             6C 65
      007FC9 00                    1748 	.db 0x00
      007FE0                       1749 	.org 0x7FE0
      007FE0                       1750 ___SMS__SDSC_signature:
      007FE0 53                    1751 	.db #0x53	; 83	'S'
      007FE1 44                    1752 	.db #0x44	; 68	'D'
      007FE2 53                    1753 	.db #0x53	; 83	'S'
      007FE3 43                    1754 	.db #0x43	; 67	'C'
      007FE4 01                    1755 	.db #0x01	; 1
      007FE5 00                    1756 	.db #0x00	; 0
      007FE6 00                    1757 	.db #0x00	; 0
      007FE7 00                    1758 	.db #0x00	; 0
      007FE8 00                    1759 	.db #0x00	; 0
      007FE9 00                    1760 	.db #0x00	; 0
      007FEA D8                    1761 	.db #0xd8	; 216
      007FEB 7F                    1762 	.db #0x7f	; 127
      007FEC CA                    1763 	.db #0xca	; 202
      007FED 7F                    1764 	.db #0x7f	; 127
      007FEE B9                    1765 	.db #0xb9	; 185
      007FEF 7F                    1766 	.db #0x7f	; 127
