                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14549 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___SMS__SDSC_signature
                                     12 	.globl ___SMS__SDSC_descr
                                     13 	.globl ___SMS__SDSC_name
                                     14 	.globl ___SMS__SDSC_author
                                     15 	.globl ___SMS__SEGA_signature
                                     16 	.globl _main
                                     17 	.globl _dibujaPajaros
                                     18 	.globl _loadGrapVRAM
                                     19 	.globl _inicializaPajaros
                                     20 	.globl _moveAlex
                                     21 	.globl _moveAlexAire
                                     22 	.globl _moveAlexSuelo
                                     23 	.globl _canRight
                                     24 	.globl _canLeft
                                     25 	.globl _canDown
                                     26 	.globl _canUp
                                     27 	.globl _moveAlexOLD
                                     28 	.globl _SMS_VRAMmemsetW
                                     29 	.globl _SMS_VRAMmemcpy
                                     30 	.globl _SMS_resetPauseRequest
                                     31 	.globl _SMS_queryPauseRequested
                                     32 	.globl _SMS_getKeysHeld
                                     33 	.globl _SMS_loadSpritePalette
                                     34 	.globl _SMS_loadBGPalette
                                     35 	.globl _SMS_copySpritestoSAT
                                     36 	.globl _SMS_finalizeSprites
                                     37 	.globl _SMS_initSprites
                                     38 	.globl _SMS_waitForVBlank
                                     39 	.globl _SMS_setSpriteMode
                                     40 	.globl _SMS_setBGScrollY
                                     41 	.globl _SMS_setBGScrollX
                                     42 	.globl _SMS_VDPturnOffFeature
                                     43 	.globl _SMS_VDPturnOnFeature
                                     44 	.globl _SMS_init
                                     45 	.globl _PSGFrame
                                     46 	.globl _PSGPlay
                                     47 	.globl _printf
                                     48 	.globl _spritePajaro
                                     49 	.globl _spriteAlex
                                     50 	.globl _alex
                                     51 	.globl _maxSalto
                                     52 	.globl _vY
                                     53 	.globl _nextVRAMsprites
                                     54 	.globl _pajaros
                                     55 	.globl _finSalto
                                     56 	.globl _SMS_SRAM
                                     57 	.globl _SRAM_bank_to_be_mapped_on_slot2
                                     58 	.globl _ROM_bank_to_be_mapped_on_slot0
                                     59 	.globl _ROM_bank_to_be_mapped_on_slot1
                                     60 	.globl _ROM_bank_to_be_mapped_on_slot2
                                     61 	.globl _generateSprite
                                     62 	.globl _generateSpriteNoRAM
                                     63 	.globl _draw_entidad
                                     64 ;--------------------------------------------------------
                                     65 ; special function registers
                                     66 ;--------------------------------------------------------
                                     67 ;--------------------------------------------------------
                                     68 ; ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area _DATA
                           00FFFF    71 _ROM_bank_to_be_mapped_on_slot2	=	0xffff
                           00FFFE    72 _ROM_bank_to_be_mapped_on_slot1	=	0xfffe
                           00FFFD    73 _ROM_bank_to_be_mapped_on_slot0	=	0xfffd
                           00FFFC    74 _SRAM_bank_to_be_mapped_on_slot2	=	0xfffc
                           008000    75 _SMS_SRAM	=	0x8000
      000000                         76 _finSalto::
      000000                         77 	.ds 2
      000002                         78 _pajaros::
      000002                         79 	.ds 60
                                     80 ;--------------------------------------------------------
                                     81 ; ram data
                                     82 ;--------------------------------------------------------
                                     83 	.area _INITIALIZED
      000000                         84 _nextVRAMsprites::
      000000                         85 	.ds 2
      000002                         86 _vY::
      000002                         87 	.ds 2
      000004                         88 _maxSalto::
      000004                         89 	.ds 1
      000005                         90 _alex::
      000005                         91 	.ds 6
      00000B                         92 _spriteAlex::
      00000B                         93 	.ds 10
      000015                         94 _spritePajaro::
      000015                         95 	.ds 10
                                     96 ;--------------------------------------------------------
                                     97 ; absolute external ram data
                                     98 ;--------------------------------------------------------
                                     99 	.area _DABS (ABS)
                                    100 ;--------------------------------------------------------
                                    101 ; global & static initialisations
                                    102 ;--------------------------------------------------------
                                    103 	.area _HOME
                                    104 	.area _GSINIT
                                    105 	.area _GSFINAL
                                    106 	.area _GSINIT
                                    107 ;--------------------------------------------------------
                                    108 ; Home
                                    109 ;--------------------------------------------------------
                                    110 	.area _HOME
                                    111 	.area _HOME
                                    112 ;--------------------------------------------------------
                                    113 ; code
                                    114 ;--------------------------------------------------------
                                    115 	.area _CODE
                                    116 ;./lib/./sprite.c:18: T_sprite generateSprite(unsigned char ancho, unsigned char alto, int tam,const unsigned char data[]) {
                                    117 ;	---------------------------------
                                    118 ; Function generateSprite
                                    119 ; ---------------------------------
      000000                        120 _generateSprite::
      000000 DD E5            [15]  121 	push	ix
      000002 DD 21 00 00      [14]  122 	ld	ix,#0
      000006 DD 39            [15]  123 	add	ix,sp
      000008 FD 21 F6 FF      [14]  124 	ld	iy, #-10
      00000C FD 39            [15]  125 	add	iy, sp
      00000E FD F9            [10]  126 	ld	sp, iy
      000010 5F               [ 4]  127 	ld	e, a
      000011 55               [ 4]  128 	ld	d, l
                                    129 ;./lib/./sprite.c:19: unsigned char tamano = alto*ancho*2;
      000012 D5               [11]  130 	push	de
      000013 62               [ 4]  131 	ld	h, d
                                    132 ;	spillPairReg hl
                                    133 ;	spillPairReg hl
      000014 2E 00            [ 7]  134 	ld	l, #0x00
      000016 55               [ 4]  135 	ld	d, l
      000017 06 08            [ 7]  136 	ld	b, #0x08
      000019                        137 00103$:
      000019 29               [11]  138 	add	hl, hl
      00001A 30 01            [12]  139 	jr	NC, 00104$
      00001C 19               [11]  140 	add	hl, de
      00001D                        141 00104$:
      00001D 10 FA            [13]  142 	djnz	00103$
      00001F D1               [10]  143 	pop	de
      000020 4D               [ 4]  144 	ld	c, l
      000021 CB 21            [ 8]  145 	sla	c
                                    146 ;./lib/./sprite.c:20: T_sprite sprite = {alto,ancho,tamano,tam/(tamano*32),nextVRAMsprites, 1,0};
      000023 DD 72 F6         [19]  147 	ld	-10 (ix), d
      000026 DD 73 F7         [19]  148 	ld	-9 (ix), e
      000029 DD 71 F8         [19]  149 	ld	-8 (ix), c
      00002C 69               [ 4]  150 	ld	l, c
                                    151 ;	spillPairReg hl
                                    152 ;	spillPairReg hl
      00002D 26 00            [ 7]  153 	ld	h, #0x00
                                    154 ;	spillPairReg hl
                                    155 ;	spillPairReg hl
      00002F 29               [11]  156 	add	hl, hl
      000030 29               [11]  157 	add	hl, hl
      000031 29               [11]  158 	add	hl, hl
      000032 29               [11]  159 	add	hl, hl
      000033 29               [11]  160 	add	hl, hl
      000034 C5               [11]  161 	push	bc
      000035 EB               [ 4]  162 	ex	de, hl
      000036 DD 6E 06         [19]  163 	ld	l, 6 (ix)
                                    164 ;	spillPairReg hl
                                    165 ;	spillPairReg hl
      000039 DD 66 07         [19]  166 	ld	h, 7 (ix)
                                    167 ;	spillPairReg hl
                                    168 ;	spillPairReg hl
      00003C CDr00r00         [17]  169 	call	__divsint
      00003F C1               [10]  170 	pop	bc
      000040 DD 73 F9         [19]  171 	ld	-7 (ix), e
      000043 3Ar00r00         [13]  172 	ld	a, (_nextVRAMsprites+0)
      000046 DD 77 FA         [19]  173 	ld	-6 (ix), a
      000049 3Ar01r00         [13]  174 	ld	a, (_nextVRAMsprites+1)
      00004C DD 77 FB         [19]  175 	ld	-5 (ix), a
      00004F DD 36 FC 01      [19]  176 	ld	-4 (ix), #0x01
      000053 AF               [ 4]  177 	xor	a, a
      000054 DD 77 FD         [19]  178 	ld	-3 (ix), a
      000057 DD 77 FE         [19]  179 	ld	-2 (ix), a
      00005A DD 36 FF 00      [19]  180 	ld	-1 (ix), #0x00
                                    181 ;./lib/./sprite.c:21: SMS_loadTiles(data,nextVRAMsprites,tam);
      00005E DD 5E 08         [19]  182 	ld	e, 8 (ix)
      000061 DD 56 09         [19]  183 	ld	d, 9 (ix)
      000064 2Ar00r00         [16]  184 	ld	hl, (_nextVRAMsprites)
      000067 29               [11]  185 	add	hl, hl
      000068 29               [11]  186 	add	hl, hl
      000069 29               [11]  187 	add	hl, hl
      00006A 29               [11]  188 	add	hl, hl
      00006B 29               [11]  189 	add	hl, hl
      00006C CB F4            [ 8]  190 	set	6, h
      00006E C5               [11]  191 	push	bc
      00006F E5               [11]  192 	push	hl
      000070 DD 6E 06         [19]  193 	ld	l, 6 (ix)
                                    194 ;	spillPairReg hl
                                    195 ;	spillPairReg hl
      000073 DD 66 07         [19]  196 	ld	h, 7 (ix)
                                    197 ;	spillPairReg hl
                                    198 ;	spillPairReg hl
      000076 E3               [19]  199 	ex	(sp), hl
      000077 CDr00r00         [17]  200 	call	_SMS_VRAMmemcpy
      00007A C1               [10]  201 	pop	bc
                                    202 ;./lib/./sprite.c:22: nextVRAMsprites = nextVRAMsprites + (tamano*sprite.numFrames);
      00007B DD 5E F9         [19]  203 	ld	e, -7 (ix)
      00007E 61               [ 4]  204 	ld	h, c
                                    205 ;	spillPairReg hl
                                    206 ;	spillPairReg hl
      00007F 2E 00            [ 7]  207 	ld	l, #0x00
      000081 55               [ 4]  208 	ld	d, l
      000082 06 08            [ 7]  209 	ld	b, #0x08
      000084                        210 00105$:
      000084 29               [11]  211 	add	hl, hl
      000085 30 01            [12]  212 	jr	NC, 00106$
      000087 19               [11]  213 	add	hl, de
      000088                        214 00106$:
      000088 10 FA            [13]  215 	djnz	00105$
      00008A EB               [ 4]  216 	ex	de, hl
      00008B 21r00r00         [10]  217 	ld	hl, #_nextVRAMsprites
      00008E 7E               [ 7]  218 	ld	a, (hl)
      00008F 83               [ 4]  219 	add	a, e
      000090 77               [ 7]  220 	ld	(hl), a
      000091 23               [ 6]  221 	inc	hl
      000092 7E               [ 7]  222 	ld	a, (hl)
      000093 8A               [ 4]  223 	adc	a, d
      000094 77               [ 7]  224 	ld	(hl), a
                                    225 ;./lib/./sprite.c:23: return sprite;
      000095 21 0E 00         [10]  226 	ld	hl, #14
      000098 39               [11]  227 	add	hl, sp
      000099 5E               [ 7]  228 	ld	e, (hl)
      00009A 23               [ 6]  229 	inc	hl
      00009B 56               [ 7]  230 	ld	d, (hl)
      00009C 21 00 00         [10]  231 	ld	hl, #0
      00009F 39               [11]  232 	add	hl, sp
      0000A0 01 0A 00         [10]  233 	ld	bc, #10
      0000A3 ED B0            [21]  234 	ldir
                                    235 ;./lib/./sprite.c:24: }
      0000A5 DD F9            [10]  236 	ld	sp, ix
      0000A7 DD E1            [14]  237 	pop	ix
      0000A9 C9               [10]  238 	ret
                                    239 ;./lib/./sprite.c:26: T_sprite generateSpriteNoRAM(unsigned char ancho, unsigned char alto, int tam,const unsigned char data[]) {
                                    240 ;	---------------------------------
                                    241 ; Function generateSpriteNoRAM
                                    242 ; ---------------------------------
      0000AA                        243 _generateSpriteNoRAM::
      0000AA DD E5            [15]  244 	push	ix
      0000AC DD 21 00 00      [14]  245 	ld	ix,#0
      0000B0 DD 39            [15]  246 	add	ix,sp
      0000B2 FD 21 F4 FF      [14]  247 	ld	iy, #-12
      0000B6 FD 39            [15]  248 	add	iy, sp
      0000B8 FD F9            [10]  249 	ld	sp, iy
      0000BA 5F               [ 4]  250 	ld	e, a
      0000BB 55               [ 4]  251 	ld	d, l
                                    252 ;./lib/./sprite.c:27: unsigned char tamano = alto*ancho*2;
      0000BC D5               [11]  253 	push	de
      0000BD 62               [ 4]  254 	ld	h, d
                                    255 ;	spillPairReg hl
                                    256 ;	spillPairReg hl
      0000BE 2E 00            [ 7]  257 	ld	l, #0x00
      0000C0 55               [ 4]  258 	ld	d, l
      0000C1 06 08            [ 7]  259 	ld	b, #0x08
      0000C3                        260 00103$:
      0000C3 29               [11]  261 	add	hl, hl
      0000C4 30 01            [12]  262 	jr	NC, 00104$
      0000C6 19               [11]  263 	add	hl, de
      0000C7                        264 00104$:
      0000C7 10 FA            [13]  265 	djnz	00103$
      0000C9 D1               [10]  266 	pop	de
      0000CA 4D               [ 4]  267 	ld	c, l
      0000CB CB 21            [ 8]  268 	sla	c
                                    269 ;./lib/./sprite.c:28: T_sprite sprite = {alto,ancho,tamano,tam/(tamano*32),nextVRAMsprites, 0,0};
      0000CD DD 72 F4         [19]  270 	ld	-12 (ix), d
      0000D0 DD 73 F5         [19]  271 	ld	-11 (ix), e
      0000D3 DD 71 F6         [19]  272 	ld	-10 (ix), c
                                    273 ;	spillPairReg hl
                                    274 ;	spillPairReg hl
      0000D6 DD 71 FE         [19]  275 	ld	-2 (ix), c
      0000D9 DD 36 FF 00      [19]  276 	ld	-1 (ix), #0x00
      0000DD 69               [ 4]  277 	ld	l, c
      0000DE 26 00            [ 7]  278 	ld	h, #0x00
                                    279 ;	spillPairReg hl
                                    280 ;	spillPairReg hl
      0000E0 29               [11]  281 	add	hl, hl
      0000E1 29               [11]  282 	add	hl, hl
      0000E2 29               [11]  283 	add	hl, hl
      0000E3 29               [11]  284 	add	hl, hl
      0000E4 29               [11]  285 	add	hl, hl
      0000E5 EB               [ 4]  286 	ex	de,hl
      0000E6 D5               [11]  287 	push	de
      0000E7 DD 6E 06         [19]  288 	ld	l, 6 (ix)
                                    289 ;	spillPairReg hl
                                    290 ;	spillPairReg hl
      0000EA DD 66 07         [19]  291 	ld	h, 7 (ix)
                                    292 ;	spillPairReg hl
                                    293 ;	spillPairReg hl
      0000ED CDr00r00         [17]  294 	call	__divsint
      0000F0 EB               [ 4]  295 	ex	de, hl
      0000F1 D1               [10]  296 	pop	de
      0000F2 DD 75 F7         [19]  297 	ld	-9 (ix), l
      0000F5 3Ar00r00         [13]  298 	ld	a, (_nextVRAMsprites+0)
      0000F8 DD 77 F8         [19]  299 	ld	-8 (ix), a
      0000FB 3Ar01r00         [13]  300 	ld	a, (_nextVRAMsprites+1)
      0000FE DD 77 F9         [19]  301 	ld	-7 (ix), a
      000101 DD 36 FA 00      [19]  302 	ld	-6 (ix), #0x00
      000105 AF               [ 4]  303 	xor	a, a
      000106 DD 77 FB         [19]  304 	ld	-5 (ix), a
      000109 DD 77 FC         [19]  305 	ld	-4 (ix), a
      00010C DD 36 FD 00      [19]  306 	ld	-3 (ix), #0x00
                                    307 ;./lib/./sprite.c:29: sprite.data = data;
      000110 DD 7E 08         [19]  308 	ld	a, 8 (ix)
      000113 DD 77 FB         [19]  309 	ld	-5 (ix), a
      000116 DD 7E 09         [19]  310 	ld	a, 9 (ix)
      000119 DD 77 FC         [19]  311 	ld	-4 (ix), a
                                    312 ;./lib/./sprite.c:30: sprite.frameInVRAM = 0;
      00011C DD 36 FD 00      [19]  313 	ld	-3 (ix), #0x00
                                    314 ;./lib/./sprite.c:31: SMS_loadTiles(data,nextVRAMsprites,tamano*32);
      000120 DD 4E 08         [19]  315 	ld	c, 8 (ix)
      000123 DD 46 09         [19]  316 	ld	b, 9 (ix)
      000126 2Ar00r00         [16]  317 	ld	hl, (_nextVRAMsprites)
      000129 29               [11]  318 	add	hl, hl
      00012A 29               [11]  319 	add	hl, hl
      00012B 29               [11]  320 	add	hl, hl
      00012C 29               [11]  321 	add	hl, hl
      00012D 29               [11]  322 	add	hl, hl
      00012E CB F4            [ 8]  323 	set	6, h
      000130 D5               [11]  324 	push	de
      000131 59               [ 4]  325 	ld	e, c
      000132 50               [ 4]  326 	ld	d, b
      000133 CDr00r00         [17]  327 	call	_SMS_VRAMmemcpy
                                    328 ;./lib/./sprite.c:32: nextVRAMsprites = nextVRAMsprites + (tamano);
      000136 21r00r00         [10]  329 	ld	hl, #_nextVRAMsprites
      000139 7E               [ 7]  330 	ld	a, (hl)
      00013A DD 86 FE         [19]  331 	add	a, -2 (ix)
      00013D 77               [ 7]  332 	ld	(hl), a
      00013E 23               [ 6]  333 	inc	hl
      00013F 7E               [ 7]  334 	ld	a, (hl)
      000140 DD 8E FF         [19]  335 	adc	a, -1 (ix)
      000143 77               [ 7]  336 	ld	(hl), a
                                    337 ;./lib/./sprite.c:33: return sprite;
      000144 21 10 00         [10]  338 	ld	hl, #16
      000147 39               [11]  339 	add	hl, sp
      000148 5E               [ 7]  340 	ld	e, (hl)
      000149 23               [ 6]  341 	inc	hl
      00014A 56               [ 7]  342 	ld	d, (hl)
      00014B 21 00 00         [10]  343 	ld	hl, #0
      00014E 39               [11]  344 	add	hl, sp
      00014F 01 0A 00         [10]  345 	ld	bc, #10
      000152 ED B0            [21]  346 	ldir
                                    347 ;./lib/./sprite.c:34: }
      000154 DD F9            [10]  348 	ld	sp, ix
      000156 DD E1            [14]  349 	pop	ix
      000158 C9               [10]  350 	ret
                                    351 ;./lib/entities.c:10: void draw_entidad(T_entidad *entidad, T_sprite *sprite){
                                    352 ;	---------------------------------
                                    353 ; Function draw_entidad
                                    354 ; ---------------------------------
      000159                        355 _draw_entidad::
      000159 DD E5            [15]  356 	push	ix
      00015B DD 21 00 00      [14]  357 	ld	ix,#0
      00015F DD 39            [15]  358 	add	ix,sp
      000161 FD 21 EF FF      [14]  359 	ld	iy, #-17
      000165 FD 39            [15]  360 	add	iy, sp
      000167 FD F9            [10]  361 	ld	sp, iy
      000169 DD 75 FC         [19]  362 	ld	-4 (ix), l
      00016C DD 74 FD         [19]  363 	ld	-3 (ix), h
                                    364 ;./lib/entities.c:12: if (sprite->allInRAM == 1){
      00016F DD 73 FA         [19]  365 	ld	-6 (ix), e
      000172 DD 72 FB         [19]  366 	ld	-5 (ix), d
      000175 4B               [ 4]  367 	ld	c, e
      000176 42               [ 4]  368 	ld	b, d
      000177 21 06 00         [10]  369 	ld	hl, #6
      00017A 09               [11]  370 	add	hl, bc
      00017B 4E               [ 7]  371 	ld	c, (hl)
                                    372 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      00017C DD 5E FA         [19]  373 	ld	e, -6 (ix)
      00017F DD 56 FB         [19]  374 	ld	d, -5 (ix)
      000182 DD 7E FC         [19]  375 	ld	a, -4 (ix)
      000185 C6 02            [ 7]  376 	add	a, #0x02
      000187 DD 77 F0         [19]  377 	ld	-16 (ix), a
      00018A DD 7E FD         [19]  378 	ld	a, -3 (ix)
      00018D CE 00            [ 7]  379 	adc	a, #0x00
      00018F DD 77 F1         [19]  380 	ld	-15 (ix), a
      000192 DD 7E FA         [19]  381 	ld	a, -6 (ix)
      000195 C6 04            [ 7]  382 	add	a, #0x04
      000197 DD 77 F2         [19]  383 	ld	-14 (ix), a
      00019A DD 7E FB         [19]  384 	ld	a, -5 (ix)
      00019D CE 00            [ 7]  385 	adc	a, #0x00
      00019F DD 77 F3         [19]  386 	ld	-13 (ix), a
                                    387 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      0001A2 DD 7E FC         [19]  388 	ld	a, -4 (ix)
      0001A5 C6 01            [ 7]  389 	add	a, #0x01
      0001A7 DD 77 F8         [19]  390 	ld	-8 (ix), a
      0001AA DD 7E FD         [19]  391 	ld	a, -3 (ix)
      0001AD CE 00            [ 7]  392 	adc	a, #0x00
      0001AF DD 77 F9         [19]  393 	ld	-7 (ix), a
      0001B2 DD 7E FA         [19]  394 	ld	a, -6 (ix)
      0001B5 C6 01            [ 7]  395 	add	a, #0x01
      0001B7 DD 77 FE         [19]  396 	ld	-2 (ix), a
      0001BA DD 7E FB         [19]  397 	ld	a, -5 (ix)
      0001BD CE 00            [ 7]  398 	adc	a, #0x00
      0001BF DD 77 FF         [19]  399 	ld	-1 (ix), a
                                    400 ;./lib/entities.c:23: int frame = sprite->tamano*entidad->frame*32;
      0001C2 DD 6E F0         [19]  401 	ld	l, -16 (ix)
      0001C5 DD 66 F1         [19]  402 	ld	h, -15 (ix)
      0001C8 7E               [ 7]  403 	ld	a, (hl)
      0001C9 DD 77 F4         [19]  404 	ld	-12 (ix), a
                                    405 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      0001CC 13               [ 6]  406 	inc	de
      0001CD 13               [ 6]  407 	inc	de
      0001CE 1A               [ 7]  408 	ld	a, (de)
      0001CF DD 77 F5         [19]  409 	ld	-11 (ix), a
                                    410 ;./lib/entities.c:12: if (sprite->allInRAM == 1){
      0001D2 0D               [ 4]  411 	dec	c
      0001D3 C2r98r02         [10]  412 	jp	NZ,00108$
                                    413 ;./lib/entities.c:13: int frame = sprite->tamano*entidad->frame + sprite->beginVRAM;
      0001D6 DD 5E F5         [19]  414 	ld	e, -11 (ix)
      0001D9 DD 66 F4         [19]  415 	ld	h, -12 (ix)
                                    416 ;	spillPairReg hl
                                    417 ;	spillPairReg hl
      0001DC 2E 00            [ 7]  418 	ld	l, #0x00
      0001DE 55               [ 4]  419 	ld	d, l
      0001DF 06 08            [ 7]  420 	ld	b, #0x08
      0001E1                        421 00200$:
      0001E1 29               [11]  422 	add	hl, hl
      0001E2 30 01            [12]  423 	jr	NC, 00201$
      0001E4 19               [11]  424 	add	hl, de
      0001E5                        425 00201$:
      0001E5 10 FA            [13]  426 	djnz	00200$
      0001E7 4D               [ 4]  427 	ld	c, l
      0001E8 DD 6E F2         [19]  428 	ld	l, -14 (ix)
      0001EB DD 66 F3         [19]  429 	ld	h, -13 (ix)
      0001EE 7E               [ 7]  430 	ld	a, (hl)
      0001EF 81               [ 4]  431 	add	a, c
      0001F0 DD 77 EF         [19]  432 	ld	-17 (ix), a
                                    433 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      0001F3 DD 7E F8         [19]  434 	ld	a, -8 (ix)
      0001F6 DD 77 F0         [19]  435 	ld	-16 (ix), a
      0001F9 DD 7E F9         [19]  436 	ld	a, -7 (ix)
      0001FC DD 77 F1         [19]  437 	ld	-15 (ix), a
      0001FF DD 7E FE         [19]  438 	ld	a, -2 (ix)
      000202 DD 77 F2         [19]  439 	ld	-14 (ix), a
      000205 DD 7E FF         [19]  440 	ld	a, -1 (ix)
      000208 DD 77 F3         [19]  441 	ld	-13 (ix), a
      00020B DD 36 FE 00      [19]  442 	ld	-2 (ix), #0x00
      00020F                        443 00114$:
      00020F DD 6E FA         [19]  444 	ld	l, -6 (ix)
      000212 DD 66 FB         [19]  445 	ld	h, -5 (ix)
      000215 DD 7E FE         [19]  446 	ld	a,-2 (ix)
      000218 96               [ 7]  447 	sub	a,(hl)
      000219 D2r84r03         [10]  448 	jp	NC, 00122$
                                    449 ;./lib/entities.c:15: unsigned char desplazado = (j<<2);
      00021C DD 7E FE         [19]  450 	ld	a, -2 (ix)
      00021F 87               [ 4]  451 	add	a, a
      000220 87               [ 4]  452 	add	a, a
                                    453 ;./lib/entities.c:16: unsigned char jCalculated = desplazado + frame, y = entidad->y+(desplazado<<2);
      000221 47               [ 4]  454 	ld	b, a
      000222 DD 86 EF         [19]  455 	add	a, -17 (ix)
      000225 DD 77 F4         [19]  456 	ld	-12 (ix), a
      000228 DD 6E F0         [19]  457 	ld	l, -16 (ix)
      00022B DD 66 F1         [19]  458 	ld	h, -15 (ix)
      00022E 4E               [ 7]  459 	ld	c, (hl)
      00022F 78               [ 4]  460 	ld	a, b
      000230 87               [ 4]  461 	add	a, a
      000231 87               [ 4]  462 	add	a, a
      000232 81               [ 4]  463 	add	a, c
      000233 DD 77 F5         [19]  464 	ld	-11 (ix), a
                                    465 ;./lib/entities.c:17: for(i=0;i<sprite->ancho;i++) {
      000236 DD 36 FF 00      [19]  466 	ld	-1 (ix), #0x00
      00023A                        467 00111$:
      00023A DD 6E F2         [19]  468 	ld	l, -14 (ix)
      00023D DD 66 F3         [19]  469 	ld	h, -13 (ix)
      000240 DD 7E FF         [19]  470 	ld	a,-1 (ix)
      000243 96               [ 7]  471 	sub	a,(hl)
      000244 30 4C            [12]  472 	jr	NC, 00115$
                                    473 ;./lib/entities.c:18: SMS_addSprite(entidad->x+(i<<3),y, jCalculated + (i<<1) );  
      000246 DD 6E FC         [19]  474 	ld	l, -4 (ix)
      000249 DD 66 FD         [19]  475 	ld	h, -3 (ix)
      00024C 7E               [ 7]  476 	ld	a, (hl)
      00024D DD 77 F9         [19]  477 	ld	-7 (ix), a
      000250 DD 77 F6         [19]  478 	ld	-10 (ix), a
      000253 DD 36 F7 00      [19]  479 	ld	-9 (ix), #0x00
      000257 DD 7E FF         [19]  480 	ld	a, -1 (ix)
      00025A DD 77 F8         [19]  481 	ld	-8 (ix), a
      00025D DD 36 F9 00      [19]  482 	ld	-7 (ix), #0x00
      000261 6F               [ 4]  483 	ld	l, a
      000262 26 00            [ 7]  484 	ld	h, #0x00
      000264 29               [11]  485 	add	hl, hl
      000265 29               [11]  486 	add	hl, hl
      000266 29               [11]  487 	add	hl, hl
      000267 DD 5E F6         [19]  488 	ld	e, -10 (ix)
      00026A 16 00            [ 7]  489 	ld	d, #0x00
      00026C 19               [11]  490 	add	hl, de
      00026D 45               [ 4]  491 	ld	b, l
      00026E 0E 00            [ 7]  492 	ld	c, #0x00
      000270 DD 5E F4         [19]  493 	ld	e, -12 (ix)
      000273 16 00            [ 7]  494 	ld	d, #0x00
      000275 DD 6E F8         [19]  495 	ld	l, -8 (ix)
      000278 DD 66 F9         [19]  496 	ld	h, -7 (ix)
      00027B 29               [11]  497 	add	hl, hl
      00027C 19               [11]  498 	add	hl, de
      00027D 7D               [ 4]  499 	ld	a, l
      00027E 16 00            [ 7]  500 	ld	d, #0x00
      000280 B1               [ 4]  501 	or	a, c
      000281 5F               [ 4]  502 	ld	e, a
      000282 7A               [ 4]  503 	ld	a, d
      000283 B0               [ 4]  504 	or	a, b
      000284 57               [ 4]  505 	ld	d, a
      000285 DD 6E F5         [19]  506 	ld	l, -11 (ix)
                                    507 ;	spillPairReg hl
                                    508 ;	spillPairReg hl
      000288 26 00            [ 7]  509 	ld	h, #0x00
                                    510 ;	spillPairReg hl
                                    511 ;	spillPairReg hl
      00028A CDr00r00         [17]  512 	call	_SMS_addSprite_f
                                    513 ;./lib/entities.c:17: for(i=0;i<sprite->ancho;i++) {
      00028D DD 34 FF         [23]  514 	inc	-1 (ix)
      000290 18 A8            [12]  515 	jr	00111$
      000292                        516 00115$:
                                    517 ;./lib/entities.c:14: for(j=0;j<sprite->alto;j++) {
      000292 DD 34 FE         [23]  518 	inc	-2 (ix)
      000295 C3r0Fr02         [10]  519 	jp	00114$
      000298                        520 00108$:
                                    521 ;./lib/entities.c:23: int frame = sprite->tamano*entidad->frame*32;
      000298 DD 5E F4         [19]  522 	ld	e, -12 (ix)
      00029B DD 66 F5         [19]  523 	ld	h, -11 (ix)
                                    524 ;	spillPairReg hl
                                    525 ;	spillPairReg hl
      00029E 2E 00            [ 7]  526 	ld	l, #0x00
      0002A0 55               [ 4]  527 	ld	d, l
      0002A1 06 08            [ 7]  528 	ld	b, #0x08
      0002A3                        529 00202$:
      0002A3 29               [11]  530 	add	hl, hl
      0002A4 30 01            [12]  531 	jr	NC, 00203$
      0002A6 19               [11]  532 	add	hl, de
      0002A7                        533 00203$:
      0002A7 10 FA            [13]  534 	djnz	00202$
      0002A9 29               [11]  535 	add	hl, hl
      0002AA 29               [11]  536 	add	hl, hl
      0002AB 29               [11]  537 	add	hl, hl
      0002AC 29               [11]  538 	add	hl, hl
      0002AD 29               [11]  539 	add	hl, hl
      0002AE DD 75 F6         [19]  540 	ld	-10 (ix), l
      0002B1 DD 74 F7         [19]  541 	ld	-9 (ix), h
                                    542 ;./lib/entities.c:24: if (entidad->frame != sprite->frameInVRAM){
      0002B4 DD 7E FA         [19]  543 	ld	a, -6 (ix)
      0002B7 C6 09            [ 7]  544 	add	a, #0x09
      0002B9 4F               [ 4]  545 	ld	c, a
      0002BA DD 7E FB         [19]  546 	ld	a, -5 (ix)
      0002BD CE 00            [ 7]  547 	adc	a, #0x00
      0002BF 47               [ 4]  548 	ld	b, a
      0002C0 0A               [ 7]  549 	ld	a, (bc)
      0002C1 5F               [ 4]  550 	ld	e, a
      0002C2 DD 7E F4         [19]  551 	ld	a, -12 (ix)
      0002C5 93               [ 4]  552 	sub	a, e
      0002C6 28 42            [12]  553 	jr	Z, 00133$
                                    554 ;./lib/entities.c:25: SMS_loadTiles(sprite->data + frame,sprite->beginVRAM,sprite->tamano<<5);
      0002C8 DD 6E F5         [19]  555 	ld	l, -11 (ix)
                                    556 ;	spillPairReg hl
                                    557 ;	spillPairReg hl
      0002CB 26 00            [ 7]  558 	ld	h, #0x00
                                    559 ;	spillPairReg hl
                                    560 ;	spillPairReg hl
      0002CD 29               [11]  561 	add	hl, hl
      0002CE 29               [11]  562 	add	hl, hl
      0002CF 29               [11]  563 	add	hl, hl
      0002D0 29               [11]  564 	add	hl, hl
      0002D1 29               [11]  565 	add	hl, hl
      0002D2 E5               [11]  566 	push	hl
      0002D3 FD E1            [14]  567 	pop	iy
      0002D5 DD 5E FA         [19]  568 	ld	e, -6 (ix)
      0002D8 DD 56 FB         [19]  569 	ld	d, -5 (ix)
      0002DB 21 07 00         [10]  570 	ld	hl, #7
      0002DE 19               [11]  571 	add	hl, de
      0002DF 5E               [ 7]  572 	ld	e, (hl)
      0002E0 23               [ 6]  573 	inc	hl
      0002E1 56               [ 7]  574 	ld	d, (hl)
      0002E2 DD 6E F6         [19]  575 	ld	l, -10 (ix)
                                    576 ;	spillPairReg hl
                                    577 ;	spillPairReg hl
      0002E5 DD 66 F7         [19]  578 	ld	h, -9 (ix)
                                    579 ;	spillPairReg hl
                                    580 ;	spillPairReg hl
      0002E8 19               [11]  581 	add	hl, de
      0002E9 EB               [ 4]  582 	ex	de, hl
      0002EA DD 6E F2         [19]  583 	ld	l, -14 (ix)
      0002ED DD 66 F3         [19]  584 	ld	h, -13 (ix)
      0002F0 7E               [ 7]  585 	ld	a, (hl)
      0002F1 23               [ 6]  586 	inc	hl
      0002F2 66               [ 7]  587 	ld	h, (hl)
                                    588 ;	spillPairReg hl
      0002F3 6F               [ 4]  589 	ld	l, a
                                    590 ;	spillPairReg hl
                                    591 ;	spillPairReg hl
      0002F4 29               [11]  592 	add	hl, hl
      0002F5 29               [11]  593 	add	hl, hl
      0002F6 29               [11]  594 	add	hl, hl
      0002F7 29               [11]  595 	add	hl, hl
      0002F8 29               [11]  596 	add	hl, hl
      0002F9 CB F4            [ 8]  597 	set	6, h
      0002FB C5               [11]  598 	push	bc
      0002FC FD E5            [15]  599 	push	iy
      0002FE CDr00r00         [17]  600 	call	_SMS_VRAMmemcpy
      000301 C1               [10]  601 	pop	bc
                                    602 ;./lib/entities.c:26: sprite->frameInVRAM = entidad->frame;
      000302 DD 6E F0         [19]  603 	ld	l, -16 (ix)
      000305 DD 66 F1         [19]  604 	ld	h, -15 (ix)
      000308 7E               [ 7]  605 	ld	a, (hl)
      000309 02               [ 7]  606 	ld	(bc), a
                                    607 ;./lib/entities.c:28: for(j=0;j<sprite->alto;j++) {
      00030A                        608 00133$:
      00030A DD 7E FE         [19]  609 	ld	a, -2 (ix)
      00030D DD 77 F6         [19]  610 	ld	-10 (ix), a
      000310 DD 7E FF         [19]  611 	ld	a, -1 (ix)
      000313 DD 77 F7         [19]  612 	ld	-9 (ix), a
      000316 DD 36 FF 00      [19]  613 	ld	-1 (ix), #0x00
      00031A                        614 00120$:
      00031A DD 6E FA         [19]  615 	ld	l, -6 (ix)
      00031D DD 66 FB         [19]  616 	ld	h, -5 (ix)
      000320 DD 7E FF         [19]  617 	ld	a,-1 (ix)
      000323 96               [ 7]  618 	sub	a,(hl)
      000324 30 5E            [12]  619 	jr	NC, 00122$
                                    620 ;./lib/entities.c:29: for(i=0;i<sprite->ancho;i++) {
      000326 0E 00            [ 7]  621 	ld	c, #0x00
      000328                        622 00117$:
      000328 DD 6E F6         [19]  623 	ld	l, -10 (ix)
      00032B DD 66 F7         [19]  624 	ld	h, -9 (ix)
      00032E 46               [ 7]  625 	ld	b, (hl)
      00032F 79               [ 4]  626 	ld	a, c
      000330 90               [ 4]  627 	sub	a, b
      000331 30 4C            [12]  628 	jr	NC, 00121$
                                    629 ;./lib/entities.c:30: SMS_addSprite(entidad->x+(i<<3),entidad->y+(j<<4), (j<<2) + (i<<1) );  
      000333 DD 6E FC         [19]  630 	ld	l, -4 (ix)
      000336 DD 66 FD         [19]  631 	ld	h, -3 (ix)
      000339 7E               [ 7]  632 	ld	a, (hl)
      00033A 59               [ 4]  633 	ld	e, c
      00033B 16 00            [ 7]  634 	ld	d, #0x00
      00033D 6B               [ 4]  635 	ld	l, e
      00033E 62               [ 4]  636 	ld	h, d
      00033F 29               [11]  637 	add	hl, hl
      000340 29               [11]  638 	add	hl, hl
      000341 29               [11]  639 	add	hl, hl
      000342 85               [ 4]  640 	add	a, l
                                    641 ;	spillPairReg hl
                                    642 ;	spillPairReg hl
                                    643 ;	spillPairReg hl
                                    644 ;	spillPairReg hl
      000343 67               [ 4]  645 	ld	h, a
                                    646 ;	spillPairReg hl
                                    647 ;	spillPairReg hl
      000344 2E 00            [ 7]  648 	ld	l, #0x00
                                    649 ;	spillPairReg hl
                                    650 ;	spillPairReg hl
      000346 DD 7E FF         [19]  651 	ld	a, -1 (ix)
      000349 DD 77 F4         [19]  652 	ld	-12 (ix), a
      00034C DD 36 F5 00      [19]  653 	ld	-11 (ix), #0x00
      000350 87               [ 4]  654 	add	a, a
      000351 87               [ 4]  655 	add	a, a
      000352 EB               [ 4]  656 	ex	de, hl
      000353 29               [11]  657 	add	hl, hl
      000354 EB               [ 4]  658 	ex	de, hl
      000355 83               [ 4]  659 	add	a, e
      000356 5F               [ 4]  660 	ld	e, a
      000357 16 00            [ 7]  661 	ld	d, #0x00
      000359 7B               [ 4]  662 	ld	a, e
      00035A B5               [ 4]  663 	or	a, l
      00035B 5F               [ 4]  664 	ld	e, a
      00035C 7A               [ 4]  665 	ld	a, d
      00035D B4               [ 4]  666 	or	a, h
      00035E 57               [ 4]  667 	ld	d, a
      00035F DD 6E F8         [19]  668 	ld	l, -8 (ix)
      000362 DD 66 F9         [19]  669 	ld	h, -7 (ix)
      000365 7E               [ 7]  670 	ld	a, (hl)
      000366 06 00            [ 7]  671 	ld	b, #0x00
      000368 DD 6E F4         [19]  672 	ld	l, -12 (ix)
      00036B DD 66 F5         [19]  673 	ld	h, -11 (ix)
      00036E 29               [11]  674 	add	hl, hl
      00036F 29               [11]  675 	add	hl, hl
      000370 29               [11]  676 	add	hl, hl
      000371 29               [11]  677 	add	hl, hl
      000372 85               [ 4]  678 	add	a, l
      000373 6F               [ 4]  679 	ld	l, a
                                    680 ;	spillPairReg hl
                                    681 ;	spillPairReg hl
      000374 78               [ 4]  682 	ld	a, b
      000375 8C               [ 4]  683 	adc	a, h
      000376 67               [ 4]  684 	ld	h, a
                                    685 ;	spillPairReg hl
                                    686 ;	spillPairReg hl
      000377 C5               [11]  687 	push	bc
      000378 CDr00r00         [17]  688 	call	_SMS_addSprite_f
      00037B C1               [10]  689 	pop	bc
                                    690 ;./lib/entities.c:29: for(i=0;i<sprite->ancho;i++) {
      00037C 0C               [ 4]  691 	inc	c
      00037D 18 A9            [12]  692 	jr	00117$
      00037F                        693 00121$:
                                    694 ;./lib/entities.c:28: for(j=0;j<sprite->alto;j++) {
      00037F DD 34 FF         [23]  695 	inc	-1 (ix)
      000382 18 96            [12]  696 	jr	00120$
      000384                        697 00122$:
                                    698 ;./lib/entities.c:34: }
      000384 DD F9            [10]  699 	ld	sp, ix
      000386 DD E1            [14]  700 	pop	ix
      000388 C9               [10]  701 	ret
                                    702 ;./alex.c:18: void moveAlexOLD(int keys)
                                    703 ;	---------------------------------
                                    704 ; Function moveAlexOLD
                                    705 ; ---------------------------------
      000389                        706 _moveAlexOLD::
      000389 DD E5            [15]  707 	push	ix
      00038B DD 21 00 00      [14]  708 	ld	ix,#0
      00038F DD 39            [15]  709 	add	ix,sp
      000391 F5               [11]  710 	push	af
      000392 F5               [11]  711 	push	af
      000393 F5               [11]  712 	push	af
      000394 DD 75 FE         [19]  713 	ld	-2 (ix), l
      000397 DD 74 FF         [19]  714 	ld	-1 (ix), h
                                    715 ;./alex.c:21: if (keys & PORT_A_KEY_LEFT)
      00039A DD 7E FE         [19]  716 	ld	a, -2 (ix)
      00039D E6 04            [ 7]  717 	and	a, #0x04
      00039F DD 77 FA         [19]  718 	ld	-6 (ix), a
      0003A2 DD 36 FB 00      [19]  719 	ld	-5 (ix), #0x00
                                    720 ;./alex.c:23: if (keys & PORT_A_KEY_RIGHT)
      0003A6 DD 7E FE         [19]  721 	ld	a, -2 (ix)
      0003A9 E6 08            [ 7]  722 	and	a, #0x08
      0003AB DD 77 FC         [19]  723 	ld	-4 (ix), a
      0003AE DD 36 FD 00      [19]  724 	ld	-3 (ix), #0x00
                                    725 ;./alex.c:20: if ((keys & PORT_A_KEY_DOWN) && alex.state == EN_SUELO){
      0003B2 DD CB FE 4E      [20]  726 	bit	1, -2 (ix)
      0003B6 28 35            [12]  727 	jr	Z, 00109$
      0003B8 3Ar0Ar00         [13]  728 	ld	a, (#_alex + 5)
      0003BB D6 02            [ 7]  729 	sub	a, #0x02
      0003BD 20 2E            [12]  730 	jr	NZ, 00109$
                                    731 ;./alex.c:22: alex.oriented = 1;
      0003BF 21r09r00         [10]  732 	ld	hl, #_alex + 4
                                    733 ;./alex.c:21: if (keys & PORT_A_KEY_LEFT)
      0003C2 AF               [ 4]  734 	xor	a, a
      0003C3 DD B6 FA         [19]  735 	or	a, -6 (ix)
      0003C6 28 02            [12]  736 	jr	Z, 00102$
                                    737 ;./alex.c:22: alex.oriented = 1;
      0003C8 36 01            [10]  738 	ld	(hl), #0x01
      0003CA                        739 00102$:
                                    740 ;./alex.c:23: if (keys & PORT_A_KEY_RIGHT)
      0003CA AF               [ 4]  741 	xor	a, a
      0003CB DD B6 FC         [19]  742 	or	a, -4 (ix)
      0003CE 28 02            [12]  743 	jr	Z, 00104$
                                    744 ;./alex.c:24: alex.oriented = 0;
      0003D0 36 00            [10]  745 	ld	(hl), #0x00
      0003D2                        746 00104$:
                                    747 ;./alex.c:25: if (!alex.oriented)
      0003D2 7E               [ 7]  748 	ld	a, (hl)
                                    749 ;./alex.c:26: alex.frame = 7;
                                    750 ;./alex.c:25: if (!alex.oriented)
      0003D3 DD 77 FD         [19]  751 	ld	-3 (ix), a
      0003D6 B7               [ 4]  752 	or	a, a
      0003D7 20 07            [12]  753 	jr	NZ, 00106$
                                    754 ;./alex.c:26: alex.frame = 7;
      0003D9 21r07r00         [10]  755 	ld	hl, #(_alex + 2)
      0003DC 36 07            [10]  756 	ld	(hl), #0x07
      0003DE 18 05            [12]  757 	jr	00107$
      0003E0                        758 00106$:
                                    759 ;./alex.c:28: alex.frame = 15;
      0003E0 21r07r00         [10]  760 	ld	hl, #(_alex + 2)
      0003E3 36 0F            [10]  761 	ld	(hl), #0x0f
      0003E5                        762 00107$:
                                    763 ;./alex.c:29: alex.lastChangeFrame = 15;
      0003E5 21r08r00         [10]  764 	ld	hl, #_alex + 3
      0003E8 36 0F            [10]  765 	ld	(hl), #0x0f
                                    766 ;./alex.c:30: return; // not move
      0003EA C3r2Cr06         [10]  767 	jp	00180$
      0003ED                        768 00109$:
                                    769 ;./alex.c:34: if (alex.state == PUÑETAZO) {
      0003ED 21r0Ar00         [10]  770 	ld	hl, #(_alex + 5)
      0003F0 4E               [ 7]  771 	ld	c, (hl)
                                    772 ;./alex.c:35: alex.lastChangeFrame++;
                                    773 ;./alex.c:39: if (!alex.oriented)
                                    774 ;./alex.c:40: alex.frame = 0;
                                    775 ;./alex.c:34: if (alex.state == PUÑETAZO) {
      0003F1 79               [ 4]  776 	ld	a, c
      0003F2 D6 08            [ 7]  777 	sub	a, #0x08
      0003F4 20 2B            [12]  778 	jr	NZ, 00118$
                                    779 ;./alex.c:35: alex.lastChangeFrame++;
      0003F6 3Ar08r00         [13]  780 	ld	a, (#(_alex + 3) + 0)
      0003F9 3C               [ 4]  781 	inc	a
      0003FA 32r08r00         [13]  782 	ld	(#(_alex + 3)),a
                                    783 ;./alex.c:36: if (alex.lastChangeFrame % 16 == 0)
      0003FD E6 0F            [ 7]  784 	and	a, #0x0f
      0003FF C2r2Cr06         [10]  785 	jp	NZ,00180$
                                    786 ;./alex.c:38: alex.state = EN_SUELO;
      000402 21r0Ar00         [10]  787 	ld	hl, #(_alex + 5)
      000405 36 02            [10]  788 	ld	(hl), #0x02
                                    789 ;./alex.c:39: if (!alex.oriented)
      000407 3Ar09r00         [13]  790 	ld	a, (#(_alex + 4) + 0)
      00040A B7               [ 4]  791 	or	a, a
      00040B 20 05            [12]  792 	jr	NZ, 00112$
                                    793 ;./alex.c:40: alex.frame = 0;
      00040D 21r07r00         [10]  794 	ld	hl, #(_alex + 2)
      000410 36 00            [10]  795 	ld	(hl), #0x00
      000412                        796 00112$:
                                    797 ;./alex.c:41: if (alex.oriented)
      000412 3Ar09r00         [13]  798 	ld	a, (#(_alex + 4) + 0)
      000415 B7               [ 4]  799 	or	a, a
      000416 CAr2Cr06         [10]  800 	jp	Z,00180$
                                    801 ;./alex.c:42: alex.frame = 8;
      000419 21r07r00         [10]  802 	ld	hl, #(_alex + 2)
      00041C 36 08            [10]  803 	ld	(hl), #0x08
                                    804 ;./alex.c:44: return;
      00041E C3r2Cr06         [10]  805 	jp	00180$
      000421                        806 00118$:
                                    807 ;./alex.c:47: if (alex.state == PUÑETAZO_SALTANDO) {
      000421 79               [ 4]  808 	ld	a, c
      000422 D6 10            [ 7]  809 	sub	a, #0x10
      000424 20 27            [12]  810 	jr	NZ, 00125$
                                    811 ;./alex.c:48: alex.lastChangeFrame++;
      000426 3Ar08r00         [13]  812 	ld	a, (#(_alex + 3) + 0)
      000429 3C               [ 4]  813 	inc	a
      00042A 32r08r00         [13]  814 	ld	(#(_alex + 3)),a
                                    815 ;./alex.c:49: if (alex.lastChangeFrame % 16 == 0)
      00042D E6 0F            [ 7]  816 	and	a, #0x0f
      00042F C2r2Cr06         [10]  817 	jp	NZ,00180$
                                    818 ;./alex.c:51: alex.state = SALTANDO;
      000432 21r0Ar00         [10]  819 	ld	hl, #(_alex + 5)
      000435 36 04            [10]  820 	ld	(hl), #0x04
                                    821 ;./alex.c:52: if (!alex.oriented)
      000437 3Ar09r00         [13]  822 	ld	a, (#(_alex + 4) + 0)
      00043A B7               [ 4]  823 	or	a, a
      00043B 20 08            [12]  824 	jr	NZ, 00120$
                                    825 ;./alex.c:53: alex.frame = 5;
      00043D 21r07r00         [10]  826 	ld	hl, #(_alex + 2)
      000440 36 05            [10]  827 	ld	(hl), #0x05
      000442 C3r2Cr06         [10]  828 	jp	00180$
      000445                        829 00120$:
                                    830 ;./alex.c:55: alex.frame = 13; 
      000445 21r07r00         [10]  831 	ld	hl, #(_alex + 2)
      000448 36 0D            [10]  832 	ld	(hl), #0x0d
                                    833 ;./alex.c:57: return;
      00044A C3r2Cr06         [10]  834 	jp	00180$
      00044D                        835 00125$:
                                    836 ;./alex.c:61: if ((keys & PORT_A_KEY_LEFT) && alex.x > 8 )
      00044D AF               [ 4]  837 	xor	a, a
      00044E DD B6 FA         [19]  838 	or	a, -6 (ix)
      000451 28 27            [12]  839 	jr	Z, 00136$
      000453 21r05r00         [10]  840 	ld	hl, #_alex
      000456 4E               [ 7]  841 	ld	c, (hl)
      000457 3E 08            [ 7]  842 	ld	a, #0x08
      000459 91               [ 4]  843 	sub	a, c
      00045A 30 1E            [12]  844 	jr	NC, 00136$
                                    845 ;./alex.c:63: player_v_x = -1;
      00045C DD 36 FD FF      [19]  846 	ld	-3 (ix), #0xff
                                    847 ;./alex.c:64: alex.oriented = 1;
      000460 21r09r00         [10]  848 	ld	hl, #(_alex + 4)
      000463 36 01            [10]  849 	ld	(hl), #0x01
                                    850 ;./alex.c:65: if (alex.frame < 8 || alex.frame > 11)
      000465 21r07r00         [10]  851 	ld	hl, #(_alex + 2)
      000468 4E               [ 7]  852 	ld	c, (hl)
      000469 79               [ 4]  853 	ld	a, c
      00046A D6 08            [ 7]  854 	sub	a, #0x08
      00046C 38 05            [12]  855 	jr	C, 00126$
      00046E 3E 0B            [ 7]  856 	ld	a, #0x0b
      000470 91               [ 4]  857 	sub	a, c
      000471 30 35            [12]  858 	jr	NC, 00137$
      000473                        859 00126$:
                                    860 ;./alex.c:66: alex.frame = 8;
      000473 21r07r00         [10]  861 	ld	hl, #(_alex + 2)
      000476 36 08            [10]  862 	ld	(hl), #0x08
      000478 18 2E            [12]  863 	jr	00137$
      00047A                        864 00136$:
                                    865 ;./alex.c:68: else if ((keys & PORT_A_KEY_RIGHT) && alex.x <240)
      00047A AF               [ 4]  866 	xor	a, a
      00047B DD B6 FC         [19]  867 	or	a, -4 (ix)
      00047E 28 12            [12]  868 	jr	Z, 00132$
      000480 3Ar05r00         [13]  869 	ld	a, (#_alex + 0)
      000483 D6 F0            [ 7]  870 	sub	a, #0xf0
      000485 30 0B            [12]  871 	jr	NC, 00132$
                                    872 ;./alex.c:70: player_v_x = 1;
      000487 DD 36 FD 01      [19]  873 	ld	-3 (ix), #0x01
                                    874 ;./alex.c:71: alex.oriented = 0;
      00048B 21r09r00         [10]  875 	ld	hl, #(_alex + 4)
      00048E 36 00            [10]  876 	ld	(hl), #0x00
      000490 18 16            [12]  877 	jr	00137$
      000492                        878 00132$:
                                    879 ;./alex.c:74: player_v_x = 0;
      000492 DD 36 FD 00      [19]  880 	ld	-3 (ix), #0x00
                                    881 ;./alex.c:75: alex.frame = 4;
      000496 21r07r00         [10]  882 	ld	hl, #(_alex + 2)
      000499 36 04            [10]  883 	ld	(hl), #0x04
                                    884 ;./alex.c:76: if (alex.oriented)
      00049B 3Ar09r00         [13]  885 	ld	a, (#(_alex + 4) + 0)
      00049E B7               [ 4]  886 	or	a, a
      00049F 28 02            [12]  887 	jr	Z, 00130$
                                    888 ;./alex.c:77: alex.frame = 12;
      0004A1 36 0C            [10]  889 	ld	(hl), #0x0c
      0004A3                        890 00130$:
                                    891 ;./alex.c:78: alex.lastChangeFrame = 15;
      0004A3 21r08r00         [10]  892 	ld	hl, #(_alex + 3)
      0004A6 36 0F            [10]  893 	ld	(hl), #0x0f
      0004A8                        894 00137$:
                                    895 ;./alex.c:80: alex.x = alex.x + player_v_x;
      0004A8 3Ar05r00         [13]  896 	ld	a, (#_alex + 0)
      0004AB DD 4E FD         [19]  897 	ld	c, -3 (ix)
      0004AE 81               [ 4]  898 	add	a, c
      0004AF 32r05r00         [13]  899 	ld	(#_alex),a
                                    900 ;./alex.c:81: if (player_v_x != 0){
      0004B2 DD 7E FD         [19]  901 	ld	a, -3 (ix)
      0004B5 B7               [ 4]  902 	or	a, a
      0004B6 28 40            [12]  903 	jr	Z, 00148$
                                    904 ;./alex.c:82: alex.lastChangeFrame++;
      0004B8 3Ar08r00         [13]  905 	ld	a, (#(_alex + 3) + 0)
      0004BB DD 77 FD         [19]  906 	ld	-3 (ix), a
      0004BE DD 34 FD         [23]  907 	inc	-3 (ix)
      0004C1 21r08r00         [10]  908 	ld	hl, #(_alex + 3)
      0004C4 DD 7E FD         [19]  909 	ld	a, -3 (ix)
      0004C7 77               [ 7]  910 	ld	(hl), a
                                    911 ;./alex.c:83: if (alex.lastChangeFrame % 16 == 0)
      0004C8 DD 7E FD         [19]  912 	ld	a, -3 (ix)
      0004CB E6 0F            [ 7]  913 	and	a, #0x0f
      0004CD 20 29            [12]  914 	jr	NZ, 00148$
                                    915 ;./alex.c:85: alex.frame++;
      0004CF 21r07r00         [10]  916 	ld	hl, #(_alex + 2)
      0004D2 4E               [ 7]  917 	ld	c, (hl)
      0004D3 0C               [ 4]  918 	inc	c
      0004D4 21r07r00         [10]  919 	ld	hl, #(_alex + 2)
      0004D7 71               [ 7]  920 	ld	(hl), c
                                    921 ;./alex.c:86: if (alex.frame > 3 && !alex.oriented)
      0004D8 3E 03            [ 7]  922 	ld	a, #0x03
      0004DA 91               [ 4]  923 	sub	a, c
      0004DB 30 07            [12]  924 	jr	NC, 00140$
      0004DD 3Ar09r00         [13]  925 	ld	a, (#(_alex + 4) + 0)
                                    926 ;./alex.c:87: alex.frame = 0;
      0004E0 B7               [ 4]  927 	or	a,a
      0004E1 20 01            [12]  928 	jr	NZ, 00140$
      0004E3 77               [ 7]  929 	ld	(hl),a
      0004E4                        930 00140$:
                                    931 ;./alex.c:88: if (alex.frame > 11 && alex.oriented)
      0004E4 21r07r00         [10]  932 	ld	hl, #(_alex + 2)
      0004E7 4E               [ 7]  933 	ld	c, (hl)
      0004E8 3E 0B            [ 7]  934 	ld	a, #0x0b
      0004EA 91               [ 4]  935 	sub	a, c
      0004EB 30 0B            [12]  936 	jr	NC, 00148$
      0004ED 3Ar09r00         [13]  937 	ld	a, (#(_alex + 4) + 0)
      0004F0 B7               [ 4]  938 	or	a, a
      0004F1 28 05            [12]  939 	jr	Z, 00148$
                                    940 ;./alex.c:89: alex.frame = 8;
      0004F3 21r07r00         [10]  941 	ld	hl, #(_alex + 2)
      0004F6 36 08            [10]  942 	ld	(hl), #0x08
      0004F8                        943 00148$:
                                    944 ;./alex.c:95: finSalto = alex.y - 70;
                                    945 ;./alex.c:93: if ((keys & PORT_A_KEY_1) && alex.state == EN_SUELO) {
      0004F8 DD CB FE 66      [20]  946 	bit	4, -2 (ix)
      0004FC 28 2E            [12]  947 	jr	Z, 00150$
      0004FE 3Ar0Ar00         [13]  948 	ld	a, (#(_alex + 5) + 0)
      000501 D6 02            [ 7]  949 	sub	a, #0x02
      000503 20 27            [12]  950 	jr	NZ, 00150$
                                    951 ;./alex.c:94: alex.state = SALTANDO;
      000505 21r0Ar00         [10]  952 	ld	hl, #(_alex + 5)
      000508 36 04            [10]  953 	ld	(hl), #0x04
                                    954 ;./alex.c:95: finSalto = alex.y - 70;
      00050A 3Ar06r00         [13]  955 	ld	a, (#(_alex + 1) + 0)
      00050D DD 77 FD         [19]  956 	ld	-3 (ix), a
      000510 DD 77 FC         [19]  957 	ld	-4 (ix), a
      000513 DD 36 FD 00      [19]  958 	ld	-3 (ix), #0x00
      000517 21r00r00         [10]  959 	ld	hl, #_finSalto
      00051A DD 7E FC         [19]  960 	ld	a, -4 (ix)
      00051D C6 BA            [ 7]  961 	add	a, #0xba
      00051F 77               [ 7]  962 	ld	(hl), a
      000520 23               [ 6]  963 	inc	hl
      000521 3E 00            [ 7]  964 	ld	a, #0x00
      000523 CE FF            [ 7]  965 	adc	a, #0xff
      000525 77               [ 7]  966 	ld	(hl), a
                                    967 ;./alex.c:96: vY = -2;
      000526 21 FE FF         [10]  968 	ld	hl, #0xfffe
      000529 22r02r00         [16]  969 	ld	(_vY), hl
      00052C                        970 00150$:
                                    971 ;./alex.c:34: if (alex.state == PUÑETAZO) {
      00052C 3Ar0Ar00         [13]  972 	ld	a, (#(_alex + 5) + 0)
                                    973 ;./alex.c:98: if (alex.state == SALTANDO || alex.state == PUÑETAZO_SALTANDO) {
      00052F DD 77 FC         [19]  974 	ld	-4 (ix), a
      000532 D6 04            [ 7]  975 	sub	a, #0x04
      000534 3E 01            [ 7]  976 	ld	a, #0x01
      000536 28 01            [12]  977 	jr	Z, 00472$
      000538 AF               [ 4]  978 	xor	a, a
      000539                        979 00472$:
      000539 DD 77 FD         [19]  980 	ld	-3 (ix), a
      00053C B7               [ 4]  981 	or	a, a
      00053D 20 07            [12]  982 	jr	NZ, 00165$
      00053F DD 7E FC         [19]  983 	ld	a, -4 (ix)
      000542 D6 10            [ 7]  984 	sub	a, #0x10
      000544 20 6D            [12]  985 	jr	NZ, 00166$
      000546                        986 00165$:
                                    987 ;./alex.c:99: if(alex.state == SALTANDO) {
      000546 DD 7E FD         [19]  988 	ld	a, -3 (ix)
      000549 B7               [ 4]  989 	or	a, a
      00054A 28 15            [12]  990 	jr	Z, 00156$
                                    991 ;./alex.c:100: if (!alex.oriented)
      00054C 3Ar09r00         [13]  992 	ld	a, (#(_alex + 4) + 0)
      00054F DD 77 FD         [19]  993 	ld	-3 (ix), a
      000552 B7               [ 4]  994 	or	a, a
      000553 20 07            [12]  995 	jr	NZ, 00153$
                                    996 ;./alex.c:101: alex.frame = 6;
      000555 21r07r00         [10]  997 	ld	hl, #(_alex + 2)
      000558 36 06            [10]  998 	ld	(hl), #0x06
      00055A 18 05            [12]  999 	jr	00156$
      00055C                       1000 00153$:
                                   1001 ;./alex.c:103: alex.frame = 14;
      00055C 21r07r00         [10] 1002 	ld	hl, #(_alex + 2)
      00055F 36 0E            [10] 1003 	ld	(hl), #0x0e
      000561                       1004 00156$:
                                   1005 ;./alex.c:105: if(alex.y == EN_SUELO || alex.y == 1 || alex.y < finSalto) {
      000561 21r06r00         [10] 1006 	ld	hl, #(_alex + 1)
      000564 5E               [ 7] 1007 	ld	e, (hl)
      000565 7B               [ 4] 1008 	ld	a,e
      000566 FE 02            [ 7] 1009 	cp	a,#0x02
      000568 28 15            [12] 1010 	jr	Z, 00157$
      00056A 3D               [ 4] 1011 	dec	a
      00056B 28 12            [12] 1012 	jr	Z, 00157$
      00056D 0E 00            [ 7] 1013 	ld	c, #0x00
      00056F 21r00r00         [10] 1014 	ld	hl, #_finSalto
      000572 7B               [ 4] 1015 	ld	a, e
      000573 96               [ 7] 1016 	sub	a, (hl)
      000574 23               [ 6] 1017 	inc	hl
      000575 79               [ 4] 1018 	ld	a, c
      000576 9E               [ 7] 1019 	sbc	a, (hl)
      000577 E2r7Cr05         [10] 1020 	jp	PO, 00477$
      00057A EE 80            [ 7] 1021 	xor	a, #0x80
      00057C                       1022 00477$:
      00057C F2r85r05         [10] 1023 	jp	P, 00158$
      00057F                       1024 00157$:
                                   1025 ;./alex.c:106: vY = 2;
      00057F 21 02 00         [10] 1026 	ld	hl, #0x0002
      000582 22r02r00         [16] 1027 	ld	(_vY), hl
      000585                       1028 00158$:
                                   1029 ;./alex.c:108: if ((alex.y == 150 || alex.y == 151) && vY > 0) {
      000585 3Ar06r00         [13] 1030 	ld	a, (#(_alex + 1) + 0)
      000588 FE 96            [ 7] 1031 	cp	a, #0x96
      00058A 28 04            [12] 1032 	jr	Z, 00164$
      00058C D6 97            [ 7] 1033 	sub	a, #0x97
      00058E 20 23            [12] 1034 	jr	NZ, 00166$
      000590                       1035 00164$:
      000590 AF               [ 4] 1036 	xor	a, a
      000591 FD 21r02r00      [14] 1037 	ld	iy, #_vY
      000595 FD BE 00         [19] 1038 	cp	a, 0 (iy)
      000598 FD 9E 01         [19] 1039 	sbc	a, 1 (iy)
      00059B E2rA0r05         [10] 1040 	jp	PO, 00481$
      00059E EE 80            [ 7] 1041 	xor	a, #0x80
      0005A0                       1042 00481$:
      0005A0 F2rB3r05         [10] 1043 	jp	P, 00166$
                                   1044 ;./alex.c:109: alex.state = EN_SUELO;
      0005A3 21r0Ar00         [10] 1045 	ld	hl, #(_alex + 5)
      0005A6 36 02            [10] 1046 	ld	(hl), #0x02
                                   1047 ;./alex.c:110: vY = 0;
      0005A8 21 00 00         [10] 1048 	ld	hl, #0x0000
      0005AB 22r02r00         [16] 1049 	ld	(_vY), hl
                                   1050 ;./alex.c:111: alex.frame = 0;
      0005AE 21r07r00         [10] 1051 	ld	hl, #(_alex + 2)
      0005B1 36 00            [10] 1052 	ld	(hl), #0x00
      0005B3                       1053 00166$:
                                   1054 ;./alex.c:114: alex.y += vY;
      0005B3 21r06r00         [10] 1055 	ld	hl, #(_alex + 1)
      0005B6 4E               [ 7] 1056 	ld	c, (hl)
      0005B7 3Ar02r00         [13] 1057 	ld	a, (_vY+0)
      0005BA DD 77 FB         [19] 1058 	ld	-5 (ix), a
      0005BD DD 71 FD         [19] 1059 	ld	-3 (ix), c
      0005C0 79               [ 4] 1060 	ld	a, c
      0005C1 DD 86 FB         [19] 1061 	add	a, -5 (ix)
      0005C4 DD 77 FD         [19] 1062 	ld	-3 (ix), a
      0005C7 21r06r00         [10] 1063 	ld	hl, #(_alex + 1)
      0005CA DD 7E FD         [19] 1064 	ld	a, -3 (ix)
      0005CD 77               [ 7] 1065 	ld	(hl), a
                                   1066 ;./alex.c:115: if ((keys & PORT_A_KEY_2) && alex.state == EN_SUELO){
      0005CE DD 7E FE         [19] 1067 	ld	a, -2 (ix)
      0005D1 E6 20            [ 7] 1068 	and	a, #0x20
      0005D3 DD 77 FC         [19] 1069 	ld	-4 (ix), a
      0005D6 DD 36 FD 00      [19] 1070 	ld	-3 (ix), #0x00
      0005DA AF               [ 4] 1071 	xor	a, a
      0005DB DD B6 FC         [19] 1072 	or	a, -4 (ix)
      0005DE 28 23            [12] 1073 	jr	Z, 00172$
      0005E0 3Ar0Ar00         [13] 1074 	ld	a, (#(_alex + 5) + 0)
      0005E3 D6 02            [ 7] 1075 	sub	a, #0x02
      0005E5 20 1C            [12] 1076 	jr	NZ, 00172$
                                   1077 ;./alex.c:116: alex.state = PUÑETAZO;
      0005E7 21r0Ar00         [10] 1078 	ld	hl, #(_alex + 5)
      0005EA 36 08            [10] 1079 	ld	(hl), #0x08
                                   1080 ;./alex.c:117: if (!alex.oriented)
      0005EC 3Ar09r00         [13] 1081 	ld	a, (#(_alex + 4) + 0)
      0005EF B7               [ 4] 1082 	or	a, a
      0005F0 20 07            [12] 1083 	jr	NZ, 00169$
                                   1084 ;./alex.c:118: alex.frame = 5;
      0005F2 21r07r00         [10] 1085 	ld	hl, #(_alex + 2)
      0005F5 36 05            [10] 1086 	ld	(hl), #0x05
      0005F7 18 05            [12] 1087 	jr	00170$
      0005F9                       1088 00169$:
                                   1089 ;./alex.c:120: alex.frame = 13; 
      0005F9 21r07r00         [10] 1090 	ld	hl, #(_alex + 2)
      0005FC 36 0D            [10] 1091 	ld	(hl), #0x0d
      0005FE                       1092 00170$:
                                   1093 ;./alex.c:121: alex.lastChangeFrame = 0;
      0005FE 21r08r00         [10] 1094 	ld	hl, #(_alex + 3)
      000601 36 00            [10] 1095 	ld	(hl), #0x00
      000603                       1096 00172$:
                                   1097 ;./alex.c:123: if ((keys & PORT_A_KEY_2) && alex.state == SALTANDO){
      000603 AF               [ 4] 1098 	xor	a, a
      000604 DD B6 FC         [19] 1099 	or	a, -4 (ix)
      000607 28 23            [12] 1100 	jr	Z, 00180$
      000609 3Ar0Ar00         [13] 1101 	ld	a, (#(_alex + 5) + 0)
      00060C D6 04            [ 7] 1102 	sub	a, #0x04
      00060E 20 1C            [12] 1103 	jr	NZ, 00180$
                                   1104 ;./alex.c:124: alex.state = PUÑETAZO_SALTANDO;
      000610 21r0Ar00         [10] 1105 	ld	hl, #(_alex + 5)
      000613 36 10            [10] 1106 	ld	(hl), #0x10
                                   1107 ;./alex.c:125: if (!alex.oriented)
      000615 3Ar09r00         [13] 1108 	ld	a, (#(_alex + 4) + 0)
      000618 B7               [ 4] 1109 	or	a, a
      000619 20 07            [12] 1110 	jr	NZ, 00175$
                                   1111 ;./alex.c:126: alex.frame = 5;
      00061B 21r07r00         [10] 1112 	ld	hl, #(_alex + 2)
      00061E 36 05            [10] 1113 	ld	(hl), #0x05
      000620 18 05            [12] 1114 	jr	00176$
      000622                       1115 00175$:
                                   1116 ;./alex.c:128: alex.frame = 13; 
      000622 21r07r00         [10] 1117 	ld	hl, #(_alex + 2)
      000625 36 0D            [10] 1118 	ld	(hl), #0x0d
      000627                       1119 00176$:
                                   1120 ;./alex.c:129: alex.lastChangeFrame = 0;
      000627 21r08r00         [10] 1121 	ld	hl, #(_alex + 3)
      00062A 36 00            [10] 1122 	ld	(hl), #0x00
      00062C                       1123 00180$:
                                   1124 ;./alex.c:132: }
      00062C DD F9            [10] 1125 	ld	sp, ix
      00062E DD E1            [14] 1126 	pop	ix
      000630 C9               [10] 1127 	ret
                                   1128 ;./alex.c:135: unsigned char canUp(){
                                   1129 ;	---------------------------------
                                   1130 ; Function canUp
                                   1131 ; ---------------------------------
      000631                       1132 _canUp::
                                   1133 ;./alex.c:136: if (alex.x < 2)
      000631 3Ar05r00         [13] 1134 	ld	a, (#_alex + 0)
      000634 D6 02            [ 7] 1135 	sub	a, #0x02
      000636 30 02            [12] 1136 	jr	NC, 00102$
                                   1137 ;./alex.c:137: return 0;
      000638 AF               [ 4] 1138 	xor	a, a
      000639 C9               [10] 1139 	ret
      00063A                       1140 00102$:
                                   1141 ;./alex.c:138: return 1;
      00063A 3E 01            [ 7] 1142 	ld	a, #0x01
                                   1143 ;./alex.c:139: }
      00063C C9               [10] 1144 	ret
                                   1145 ;./alex.c:141: unsigned char canDown() {
                                   1146 ;	---------------------------------
                                   1147 ; Function canDown
                                   1148 ; ---------------------------------
      00063D                       1149 _canDown::
                                   1150 ;./alex.c:142: if (alex.y > 155)
      00063D 21r06r00         [10] 1151 	ld	hl, #_alex+1
      000640 4E               [ 7] 1152 	ld	c, (hl)
      000641 3E 9B            [ 7] 1153 	ld	a, #0x9b
      000643 91               [ 4] 1154 	sub	a, c
      000644 30 02            [12] 1155 	jr	NC, 00102$
                                   1156 ;./alex.c:143: return 0;
      000646 AF               [ 4] 1157 	xor	a, a
      000647 C9               [10] 1158 	ret
      000648                       1159 00102$:
                                   1160 ;./alex.c:144: return 1;
      000648 3E 01            [ 7] 1161 	ld	a, #0x01
                                   1162 ;./alex.c:145: }
      00064A C9               [10] 1163 	ret
                                   1164 ;./alex.c:147: unsigned char canLeft() {
                                   1165 ;	---------------------------------
                                   1166 ; Function canLeft
                                   1167 ; ---------------------------------
      00064B                       1168 _canLeft::
                                   1169 ;./alex.c:148: if (alex.x < 9)
      00064B 3Ar05r00         [13] 1170 	ld	a, (#_alex + 0)
      00064E D6 09            [ 7] 1171 	sub	a, #0x09
      000650 30 02            [12] 1172 	jr	NC, 00102$
                                   1173 ;./alex.c:149: return 0;
      000652 AF               [ 4] 1174 	xor	a, a
      000653 C9               [10] 1175 	ret
      000654                       1176 00102$:
                                   1177 ;./alex.c:150: return 1;
      000654 3E 01            [ 7] 1178 	ld	a, #0x01
                                   1179 ;./alex.c:151: }
      000656 C9               [10] 1180 	ret
                                   1181 ;./alex.c:153: unsigned char canRight() {
                                   1182 ;	---------------------------------
                                   1183 ; Function canRight
                                   1184 ; ---------------------------------
      000657                       1185 _canRight::
                                   1186 ;./alex.c:154: if (alex.x > 238)
      000657 21r05r00         [10] 1187 	ld	hl, #_alex+0
      00065A 4E               [ 7] 1188 	ld	c, (hl)
      00065B 3E EE            [ 7] 1189 	ld	a, #0xee
      00065D 91               [ 4] 1190 	sub	a, c
      00065E 30 02            [12] 1191 	jr	NC, 00102$
                                   1192 ;./alex.c:155: return 0;
      000660 AF               [ 4] 1193 	xor	a, a
      000661 C9               [10] 1194 	ret
      000662                       1195 00102$:
                                   1196 ;./alex.c:156: return 1;
      000662 3E 01            [ 7] 1197 	ld	a, #0x01
                                   1198 ;./alex.c:157: }
      000664 C9               [10] 1199 	ret
                                   1200 ;./alex.c:159: void moveAlexSuelo(int keys) {
                                   1201 ;	---------------------------------
                                   1202 ; Function moveAlexSuelo
                                   1203 ; ---------------------------------
      000665                       1204 _moveAlexSuelo::
      000665 DD E5            [15] 1205 	push	ix
      000667 DD 21 00 00      [14] 1206 	ld	ix,#0
      00066B DD 39            [15] 1207 	add	ix,sp
      00066D F5               [11] 1208 	push	af
      00066E F5               [11] 1209 	push	af
      00066F F5               [11] 1210 	push	af
      000670 DD 75 FE         [19] 1211 	ld	-2 (ix), l
      000673 DD 74 FF         [19] 1212 	ld	-1 (ix), h
                                   1213 ;./alex.c:161: if (keys & PORT_A_KEY_LEFT)
      000676 DD 7E FE         [19] 1214 	ld	a, -2 (ix)
      000679 E6 04            [ 7] 1215 	and	a, #0x04
      00067B DD 77 FA         [19] 1216 	ld	-6 (ix), a
      00067E DD 36 FB 00      [19] 1217 	ld	-5 (ix), #0x00
                                   1218 ;./alex.c:163: if (keys & PORT_A_KEY_RIGHT)
      000682 DD 7E FE         [19] 1219 	ld	a, -2 (ix)
      000685 E6 08            [ 7] 1220 	and	a, #0x08
      000687 DD 77 FC         [19] 1221 	ld	-4 (ix), a
      00068A DD 36 FD 00      [19] 1222 	ld	-3 (ix), #0x00
                                   1223 ;./alex.c:160: if ((keys & PORT_A_KEY_DOWN)){
      00068E DD CB FE 4E      [20] 1224 	bit	1, -2 (ix)
      000692 28 33            [12] 1225 	jr	Z, 00109$
                                   1226 ;./alex.c:161: if (keys & PORT_A_KEY_LEFT)
      000694 AF               [ 4] 1227 	xor	a, a
      000695 DD B6 FA         [19] 1228 	or	a, -6 (ix)
      000698 28 05            [12] 1229 	jr	Z, 00102$
                                   1230 ;./alex.c:162: alex.oriented = 1;
      00069A 21r09r00         [10] 1231 	ld	hl, #_alex+4
      00069D 36 01            [10] 1232 	ld	(hl), #0x01
      00069F                       1233 00102$:
                                   1234 ;./alex.c:163: if (keys & PORT_A_KEY_RIGHT)
      00069F AF               [ 4] 1235 	xor	a, a
      0006A0 DD B6 FC         [19] 1236 	or	a, -4 (ix)
      0006A3 28 05            [12] 1237 	jr	Z, 00104$
                                   1238 ;./alex.c:164: alex.oriented = 0;
      0006A5 21r09r00         [10] 1239 	ld	hl, #_alex+4
      0006A8 36 00            [10] 1240 	ld	(hl), #0x00
      0006AA                       1241 00104$:
                                   1242 ;./alex.c:165: if (!alex.oriented)
      0006AA 3Ar09r00         [13] 1243 	ld	a,(#_alex + 4)
                                   1244 ;./alex.c:166: alex.frame = 7;
                                   1245 ;./alex.c:165: if (!alex.oriented)
      0006AD DD 77 FD         [19] 1246 	ld	-3 (ix), a
      0006B0 B7               [ 4] 1247 	or	a, a
      0006B1 20 07            [12] 1248 	jr	NZ, 00106$
                                   1249 ;./alex.c:166: alex.frame = 7;
      0006B3 21r07r00         [10] 1250 	ld	hl, #(_alex + 2)
      0006B6 36 07            [10] 1251 	ld	(hl), #0x07
      0006B8 18 05            [12] 1252 	jr	00107$
      0006BA                       1253 00106$:
                                   1254 ;./alex.c:168: alex.frame = 15;
      0006BA 21r07r00         [10] 1255 	ld	hl, #(_alex + 2)
      0006BD 36 0F            [10] 1256 	ld	(hl), #0x0f
      0006BF                       1257 00107$:
                                   1258 ;./alex.c:169: alex.lastChangeFrame = 15;
      0006BF 21r08r00         [10] 1259 	ld	hl, #_alex + 3
      0006C2 36 0F            [10] 1260 	ld	(hl), #0x0f
                                   1261 ;./alex.c:170: return; // not move
      0006C4 C3r63r07         [10] 1262 	jp	00135$
      0006C7                       1263 00109$:
                                   1264 ;./alex.c:173: if (keys & PORT_A_KEY_2) {
      0006C7 DD CB FE 6E      [20] 1265 	bit	5, -2 (ix)
      0006CB 28 1D            [12] 1266 	jr	Z, 00114$
                                   1267 ;./alex.c:174: if (alex.y > 100)
      0006CD 01r06r00         [10] 1268 	ld	bc, #_alex+1
      0006D0 0A               [ 7] 1269 	ld	a, (bc)
      0006D1 5F               [ 4] 1270 	ld	e, a
      0006D2 3E 64            [ 7] 1271 	ld	a, #0x64
      0006D4 93               [ 4] 1272 	sub	a, e
      0006D5 30 09            [12] 1273 	jr	NC, 00111$
                                   1274 ;./alex.c:175: maxSalto = alex.y - 100;
      0006D7 7B               [ 4] 1275 	ld	a, e
      0006D8 21r04r00         [10] 1276 	ld	hl, #_maxSalto
      0006DB C6 9C            [ 7] 1277 	add	a, #0x9c
      0006DD 77               [ 7] 1278 	ld	(hl), a
      0006DE 18 05            [12] 1279 	jr	00112$
      0006E0                       1280 00111$:
                                   1281 ;./alex.c:177: maxSalto = 0;
      0006E0 21r04r00         [10] 1282 	ld	hl, #_maxSalto
      0006E3 36 00            [10] 1283 	ld	(hl), #0x00
      0006E5                       1284 00112$:
                                   1285 ;./alex.c:178: alex.y--;
      0006E5 0A               [ 7] 1286 	ld	a, (bc)
      0006E6 3D               [ 4] 1287 	dec	a
      0006E7 02               [ 7] 1288 	ld	(bc), a
                                   1289 ;./alex.c:179: return;
      0006E8 18 79            [12] 1290 	jr	00135$
      0006EA                       1291 00114$:
                                   1292 ;./alex.c:181: if ((keys & PORT_A_KEY_LEFT) && alex.x > 8 )
      0006EA AF               [ 4] 1293 	xor	a, a
      0006EB DD B6 FA         [19] 1294 	or	a, -6 (ix)
      0006EE 28 31            [12] 1295 	jr	Z, 00132$
      0006F0 21r05r00         [10] 1296 	ld	hl, #_alex+0
      0006F3 4E               [ 7] 1297 	ld	c, (hl)
      0006F4 3E 08            [ 7] 1298 	ld	a, #0x08
      0006F6 91               [ 4] 1299 	sub	a, c
      0006F7 30 28            [12] 1300 	jr	NC, 00132$
                                   1301 ;./alex.c:183: alex.x -= 1;
      0006F9 0D               [ 4] 1302 	dec	c
      0006FA 71               [ 7] 1303 	ld	(hl), c
                                   1304 ;./alex.c:184: alex.oriented = 1;
      0006FB 21r09r00         [10] 1305 	ld	hl, #_alex + 4
      0006FE 36 01            [10] 1306 	ld	(hl), #0x01
                                   1307 ;./alex.c:185: alex.lastChangeFrame++;
      000700 21r08r00         [10] 1308 	ld	hl, #_alex + 3
      000703 34               [11] 1309 	inc	(hl)
      000704 7E               [ 7] 1310 	ld	a, (hl)
                                   1311 ;./alex.c:188: alex.frame++;
      000705 11r07r00         [10] 1312 	ld	de, #_alex + 2
                                   1313 ;./alex.c:186: if (alex.lastChangeFrame == 11) {
                                   1314 ;./alex.c:187: alex.lastChangeFrame = 0;
      000708 D6 0B            [ 7] 1315 	sub	a, #0x0b
      00070A 20 04            [12] 1316 	jr	NZ, 00116$
      00070C 77               [ 7] 1317 	ld	(hl), a
                                   1318 ;./alex.c:188: alex.frame++;
      00070D 1A               [ 7] 1319 	ld	a, (de)
      00070E 3C               [ 4] 1320 	inc	a
      00070F 12               [ 7] 1321 	ld	(de), a
      000710                       1322 00116$:
                                   1323 ;./alex.c:190: if (alex.frame > 11 || alex.frame < 8)
      000710 1A               [ 7] 1324 	ld	a, (de)
      000711 4F               [ 4] 1325 	ld	c, a
      000712 3E 0B            [ 7] 1326 	ld	a, #0x0b
      000714 91               [ 4] 1327 	sub	a, c
      000715 38 05            [12] 1328 	jr	C, 00117$
      000717 79               [ 4] 1329 	ld	a, c
      000718 D6 08            [ 7] 1330 	sub	a, #0x08
      00071A 30 47            [12] 1331 	jr	NC, 00135$
      00071C                       1332 00117$:
                                   1333 ;./alex.c:191: alex.frame = 8;
      00071C 3E 08            [ 7] 1334 	ld	a, #0x08
      00071E 12               [ 7] 1335 	ld	(de), a
      00071F 18 42            [12] 1336 	jr	00135$
      000721                       1337 00132$:
                                   1338 ;./alex.c:193: else if ((keys & PORT_A_KEY_RIGHT) && alex.x <240)
      000721 AF               [ 4] 1339 	xor	a, a
      000722 DD B6 FC         [19] 1340 	or	a, -4 (ix)
      000725 28 2A            [12] 1341 	jr	Z, 00128$
      000727 01r05r00         [10] 1342 	ld	bc, #_alex+0
      00072A 0A               [ 7] 1343 	ld	a, (bc)
      00072B FE F0            [ 7] 1344 	cp	a, #0xf0
      00072D 30 22            [12] 1345 	jr	NC, 00128$
                                   1346 ;./alex.c:195: alex.x += 1;
      00072F 3C               [ 4] 1347 	inc	a
      000730 02               [ 7] 1348 	ld	(bc), a
                                   1349 ;./alex.c:196: alex.oriented = 0;
      000731 21r09r00         [10] 1350 	ld	hl, #_alex + 4
      000734 36 00            [10] 1351 	ld	(hl), #0x00
                                   1352 ;./alex.c:197: alex.lastChangeFrame++;
      000736 21r08r00         [10] 1353 	ld	hl, #_alex + 3
      000739 34               [11] 1354 	inc	(hl)
      00073A 7E               [ 7] 1355 	ld	a, (hl)
                                   1356 ;./alex.c:200: alex.frame++;
      00073B 11r07r00         [10] 1357 	ld	de, #_alex + 2
                                   1358 ;./alex.c:198: if (alex.lastChangeFrame == 11) {
                                   1359 ;./alex.c:199: alex.lastChangeFrame = 0;
      00073E D6 0B            [ 7] 1360 	sub	a, #0x0b
      000740 20 04            [12] 1361 	jr	NZ, 00121$
      000742 77               [ 7] 1362 	ld	(hl), a
                                   1363 ;./alex.c:200: alex.frame++;
      000743 1A               [ 7] 1364 	ld	a, (de)
      000744 3C               [ 4] 1365 	inc	a
      000745 12               [ 7] 1366 	ld	(de), a
      000746                       1367 00121$:
                                   1368 ;./alex.c:202: if (alex.frame > 3 || alex.frame < 0)
      000746 1A               [ 7] 1369 	ld	a, (de)
      000747 4F               [ 4] 1370 	ld	c, a
      000748 3E 03            [ 7] 1371 	ld	a, #0x03
      00074A 91               [ 4] 1372 	sub	a, c
      00074B 30 16            [12] 1373 	jr	NC, 00135$
                                   1374 ;./alex.c:203: alex.frame = 0;
      00074D AF               [ 4] 1375 	xor	a, a
      00074E 12               [ 7] 1376 	ld	(de), a
      00074F 18 12            [12] 1377 	jr	00135$
      000751                       1378 00128$:
                                   1379 ;./alex.c:207: alex.frame = 4;
      000751 21r07r00         [10] 1380 	ld	hl, #(_alex + 2)
      000754 36 04            [10] 1381 	ld	(hl), #0x04
                                   1382 ;./alex.c:208: if (alex.oriented)
      000756 3Ar09r00         [13] 1383 	ld	a, (#_alex + 4)
      000759 B7               [ 4] 1384 	or	a, a
      00075A 28 02            [12] 1385 	jr	Z, 00126$
                                   1386 ;./alex.c:209: alex.frame = 12;
      00075C 36 0C            [10] 1387 	ld	(hl), #0x0c
      00075E                       1388 00126$:
                                   1389 ;./alex.c:210: alex.lastChangeFrame = 10;
      00075E 21r08r00         [10] 1390 	ld	hl, #_alex + 3
      000761 36 0A            [10] 1391 	ld	(hl), #0x0a
      000763                       1392 00135$:
                                   1393 ;./alex.c:212: }
      000763 DD F9            [10] 1394 	ld	sp, ix
      000765 DD E1            [14] 1395 	pop	ix
      000767 C9               [10] 1396 	ret
                                   1397 ;./alex.c:214: void moveAlexAire(int keys, unsigned char puedeSubir, unsigned char puedeDerecha, unsigned char puedeIzquieda) {
                                   1398 ;	---------------------------------
                                   1399 ; Function moveAlexAire
                                   1400 ; ---------------------------------
      000768                       1401 _moveAlexAire::
      000768 DD E5            [15] 1402 	push	ix
      00076A DD 21 00 00      [14] 1403 	ld	ix,#0
      00076E DD 39            [15] 1404 	add	ix,sp
      000770 EB               [ 4] 1405 	ex	de, hl
                                   1406 ;./alex.c:215: if (keys & PORT_A_KEY_LEFT) {
      000771 CB 53            [ 8] 1407 	bit	2, e
      000773 28 12            [12] 1408 	jr	Z, 00104$
                                   1409 ;./alex.c:216: alex.oriented = 1;
      000775 01r05r00         [10] 1410 	ld	bc, #_alex+0
      000778 21r09r00         [10] 1411 	ld	hl, #(_alex + 4)
      00077B 36 01            [10] 1412 	ld	(hl), #0x01
                                   1413 ;./alex.c:217: if (puedeIzquieda)
      00077D DD 7E 06         [19] 1414 	ld	a, 6 (ix)
      000780 B7               [ 4] 1415 	or	a, a
      000781 28 04            [12] 1416 	jr	Z, 00104$
                                   1417 ;./alex.c:218: alex.x -= 2;
      000783 0A               [ 7] 1418 	ld	a, (bc)
      000784 3D               [ 4] 1419 	dec	a
      000785 3D               [ 4] 1420 	dec	a
      000786 02               [ 7] 1421 	ld	(bc), a
      000787                       1422 00104$:
                                   1423 ;./alex.c:220: if (keys & PORT_A_KEY_RIGHT) {
      000787 CB 5B            [ 8] 1424 	bit	3, e
      000789 28 12            [12] 1425 	jr	Z, 00108$
                                   1426 ;./alex.c:221: alex.oriented = 0;
      00078B 01r05r00         [10] 1427 	ld	bc, #_alex+0
      00078E 21r09r00         [10] 1428 	ld	hl, #(_alex + 4)
      000791 36 00            [10] 1429 	ld	(hl), #0x00
                                   1430 ;./alex.c:222: if (puedeDerecha)
      000793 DD 7E 05         [19] 1431 	ld	a, 5 (ix)
      000796 B7               [ 4] 1432 	or	a, a
      000797 28 04            [12] 1433 	jr	Z, 00108$
                                   1434 ;./alex.c:223: alex.x += 2;
      000799 0A               [ 7] 1435 	ld	a, (bc)
      00079A C6 02            [ 7] 1436 	add	a, #0x02
      00079C 02               [ 7] 1437 	ld	(bc), a
      00079D                       1438 00108$:
                                   1439 ;./alex.c:225: if (!alex.oriented)
      00079D 21r09r00         [10] 1440 	ld	hl, #_alex + 4
      0007A0 46               [ 7] 1441 	ld	b, (hl)
                                   1442 ;./alex.c:226: alex.frame = 6;
      0007A1 21r07r00         [10] 1443 	ld	hl, #_alex + 2
                                   1444 ;./alex.c:225: if (!alex.oriented)
      0007A4 78               [ 4] 1445 	ld	a, b
      0007A5 B7               [ 4] 1446 	or	a, a
      0007A6 20 04            [12] 1447 	jr	NZ, 00110$
                                   1448 ;./alex.c:226: alex.frame = 6;
      0007A8 36 06            [10] 1449 	ld	(hl), #0x06
      0007AA 18 02            [12] 1450 	jr	00111$
      0007AC                       1451 00110$:
                                   1452 ;./alex.c:228: alex.frame = 14;
      0007AC 36 0E            [10] 1453 	ld	(hl), #0x0e
      0007AE                       1454 00111$:
                                   1455 ;./alex.c:229: if (alex.y > maxSalto) {
      0007AE 01r06r00         [10] 1456 	ld	bc, #_alex + 1
      0007B1 0A               [ 7] 1457 	ld	a, (bc)
      0007B2 57               [ 4] 1458 	ld	d, a
                                   1459 ;./alex.c:230: alex.y -= 2;
      0007B3 5A               [ 4] 1460 	ld	e, d
                                   1461 ;./alex.c:229: if (alex.y > maxSalto) {
      0007B4 3Ar04r00         [13] 1462 	ld	a, (_maxSalto+0)
      0007B7 92               [ 4] 1463 	sub	a, d
      0007B8 30 06            [12] 1464 	jr	NC, 00113$
                                   1465 ;./alex.c:230: alex.y -= 2;
      0007BA 7B               [ 4] 1466 	ld	a, e
      0007BB 3D               [ 4] 1467 	dec	a
      0007BC 3D               [ 4] 1468 	dec	a
      0007BD 02               [ 7] 1469 	ld	(bc), a
      0007BE 18 0C            [12] 1470 	jr	00115$
      0007C0                       1471 00113$:
                                   1472 ;./alex.c:233: alex.y += 2; // bajando
      0007C0 7B               [ 4] 1473 	ld	a, e
      0007C1 3C               [ 4] 1474 	inc	a
      0007C2 3C               [ 4] 1475 	inc	a
      0007C3 02               [ 7] 1476 	ld	(bc), a
                                   1477 ;./alex.c:234: maxSalto = 255;
      0007C4 FD 21r04r00      [14] 1478 	ld	iy, #_maxSalto
      0007C8 FD 36 00 FF      [19] 1479 	ld	0 (iy), #0xff
      0007CC                       1480 00115$:
                                   1481 ;./alex.c:236: }
      0007CC DD E1            [14] 1482 	pop	ix
      0007CE E1               [10] 1483 	pop	hl
      0007CF F1               [10] 1484 	pop	af
      0007D0 33               [ 6] 1485 	inc	sp
      0007D1 E9               [ 4] 1486 	jp	(hl)
                                   1487 ;./alex.c:239: void moveAlex(int keys) {
                                   1488 ;	---------------------------------
                                   1489 ; Function moveAlex
                                   1490 ; ---------------------------------
      0007D2                       1491 _moveAlex::
      0007D2 DD E5            [15] 1492 	push	ix
      0007D4 DD 21 00 00      [14] 1493 	ld	ix,#0
      0007D8 DD 39            [15] 1494 	add	ix,sp
      0007DA 3B               [ 6] 1495 	dec	sp
                                   1496 ;./alex.c:240: unsigned char puedeBajar = canDown();
      0007DB E5               [11] 1497 	push	hl
      0007DC CDr3Dr06         [17] 1498 	call	_canDown
      0007DF 4F               [ 4] 1499 	ld	c, a
      0007E0 C5               [11] 1500 	push	bc
      0007E1 CDr31r06         [17] 1501 	call	_canUp
      0007E4 DD 77 FF         [19] 1502 	ld	-1 (ix), a
      0007E7 CDr57r06         [17] 1503 	call	_canRight
      0007EA 5F               [ 4] 1504 	ld	e, a
      0007EB D5               [11] 1505 	push	de
      0007EC CDr4Br06         [17] 1506 	call	_canLeft
      0007EF D1               [10] 1507 	pop	de
      0007F0 C1               [10] 1508 	pop	bc
      0007F1 E1               [10] 1509 	pop	hl
                                   1510 ;./alex.c:244: if (puedeBajar)
      0007F2 0C               [ 4] 1511 	inc	c
      0007F3 0D               [ 4] 1512 	dec	c
      0007F4 28 0C            [12] 1513 	jr	Z, 00102$
                                   1514 ;./alex.c:245: moveAlexAire(keys, puedeSubir, puedeDerecha, puedeIzquierda);
      0007F6 57               [ 4] 1515 	ld	d,a
      0007F7 D5               [11] 1516 	push	de
      0007F8 DD 7E FF         [19] 1517 	ld	a, -1 (ix)
      0007FB F5               [11] 1518 	push	af
      0007FC 33               [ 6] 1519 	inc	sp
      0007FD CDr68r07         [17] 1520 	call	_moveAlexAire
      000800 18 03            [12] 1521 	jr	00104$
      000802                       1522 00102$:
                                   1523 ;./alex.c:247: moveAlexSuelo(keys);
      000802 CDr65r06         [17] 1524 	call	_moveAlexSuelo
      000805                       1525 00104$:
                                   1526 ;./alex.c:248: }
      000805 33               [ 6] 1527 	inc	sp
      000806 DD E1            [14] 1528 	pop	ix
      000808 C9               [10] 1529 	ret
                                   1530 ;main.c:15: void inicializaPajaros()
                                   1531 ;	---------------------------------
                                   1532 ; Function inicializaPajaros
                                   1533 ; ---------------------------------
      000809                       1534 _inicializaPajaros::
      000809 DD E5            [15] 1535 	push	ix
      00080B DD 21 00 00      [14] 1536 	ld	ix,#0
      00080F DD 39            [15] 1537 	add	ix,sp
      000811 F5               [11] 1538 	push	af
                                   1539 ;main.c:18: for (i = 0; i < NUM_PAJAROS; i++)
      000812 0E 00            [ 7] 1540 	ld	c, #0x00
      000814                       1541 00102$:
                                   1542 ;main.c:20: pajaros[i].x = 15 + 32 * i;
      000814 06 00            [ 7] 1543 	ld	b, #0x00
      000816 69               [ 4] 1544 	ld	l, c
      000817 60               [ 4] 1545 	ld	h, b
      000818 29               [11] 1546 	add	hl, hl
      000819 09               [11] 1547 	add	hl, bc
      00081A 29               [11] 1548 	add	hl, hl
      00081B EB               [ 4] 1549 	ex	de, hl
      00081C 21r02r00         [10] 1550 	ld	hl, #_pajaros
      00081F 19               [11] 1551 	add	hl, de
      000820 EB               [ 4] 1552 	ex	de, hl
      000821 79               [ 4] 1553 	ld	a, c
      000822 0F               [ 4] 1554 	rrca
      000823 0F               [ 4] 1555 	rrca
      000824 0F               [ 4] 1556 	rrca
      000825 E6 E0            [ 7] 1557 	and	a, #0xe0
      000827 C6 0F            [ 7] 1558 	add	a, #0x0f
      000829 12               [ 7] 1559 	ld	(de), a
                                   1560 ;main.c:21: pajaros[i].y = 15 + 16 * (i / 2);
      00082A 6B               [ 4] 1561 	ld	l, e
      00082B 62               [ 4] 1562 	ld	h, d
      00082C 23               [ 6] 1563 	inc	hl
      00082D E3               [19] 1564 	ex	(sp), hl
      00082E 69               [ 4] 1565 	ld	l, c
                                   1566 ;	spillPairReg hl
                                   1567 ;	spillPairReg hl
      00082F 26 00            [ 7] 1568 	ld	h, #0x00
                                   1569 ;	spillPairReg hl
                                   1570 ;	spillPairReg hl
      000831 CB 2C            [ 8] 1571 	sra	h
      000833 CB 1D            [ 8] 1572 	rr	l
      000835 7D               [ 4] 1573 	ld	a, l
      000836 87               [ 4] 1574 	add	a, a
      000837 87               [ 4] 1575 	add	a, a
      000838 87               [ 4] 1576 	add	a, a
      000839 87               [ 4] 1577 	add	a, a
      00083A C6 0F            [ 7] 1578 	add	a, #0x0f
      00083C E1               [10] 1579 	pop	hl
      00083D E5               [11] 1580 	push	hl
      00083E 77               [ 7] 1581 	ld	(hl), a
                                   1582 ;main.c:22: pajaros[i].lastChangeFrame = i * 3;
      00083F 13               [ 6] 1583 	inc	de
      000840 13               [ 6] 1584 	inc	de
      000841 13               [ 6] 1585 	inc	de
      000842 79               [ 4] 1586 	ld	a, c
      000843 87               [ 4] 1587 	add	a, a
      000844 81               [ 4] 1588 	add	a, c
      000845 12               [ 7] 1589 	ld	(de), a
                                   1590 ;main.c:18: for (i = 0; i < NUM_PAJAROS; i++)
      000846 0C               [ 4] 1591 	inc	c
      000847 79               [ 4] 1592 	ld	a, c
      000848 D6 0A            [ 7] 1593 	sub	a, #0x0a
      00084A 38 C8            [12] 1594 	jr	C, 00102$
                                   1595 ;main.c:24: }
      00084C DD F9            [10] 1596 	ld	sp, ix
      00084E DD E1            [14] 1597 	pop	ix
      000850 C9               [10] 1598 	ret
                                   1599 ;main.c:26: void loadGrapVRAM()
                                   1600 ;	---------------------------------
                                   1601 ; Function loadGrapVRAM
                                   1602 ; ---------------------------------
      000851                       1603 _loadGrapVRAM::
      000851 DD E5            [15] 1604 	push	ix
      000853 DD 21 00 00      [14] 1605 	ld	ix,#0
      000857 DD 39            [15] 1606 	add	ix,sp
      000859 21 EC FF         [10] 1607 	ld	hl, #-20
      00085C 39               [11] 1608 	add	hl, sp
      00085D F9               [ 6] 1609 	ld	sp, hl
                                   1610 ;main.c:28: SMS_init();
      00085E CDr00r00         [17] 1611 	call	_SMS_init
                                   1612 ;main.c:29: inicializaPajaros();
      000861 CDr09r08         [17] 1613 	call	_inicializaPajaros
                                   1614 ;main.c:31: SMS_setSpriteMode(SPRITEMODE_TALL);
      000864 2E 01            [ 7] 1615 	ld	l, #0x01
                                   1616 ;	spillPairReg hl
                                   1617 ;	spillPairReg hl
      000866 CDr00r00         [17] 1618 	call	_SMS_setSpriteMode
                                   1619 ;main.c:32: SMS_displayOn();
      000869 21 40 01         [10] 1620 	ld	hl, #0x0140
      00086C CDr00r00         [17] 1621 	call	_SMS_VDPturnOnFeature
                                   1622 ;main.c:33: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      00086F 21 20 00         [10] 1623 	ld	hl, #0x0020
      000872 CDr00r00         [17] 1624 	call	_SMS_VDPturnOnFeature
                                   1625 ;main.c:34: SMS_loadBGPalette(sonicpalette_inc);
      000875 21r00r00         [10] 1626 	ld	hl, #_sonicpalette_inc
      000878 CDr00r00         [17] 1627 	call	_SMS_loadBGPalette
                                   1628 ;main.c:35: SMS_loadSpritePalette(palleteAlex_inc);
      00087B 21r00r00         [10] 1629 	ld	hl, #_palleteAlex_inc
      00087E CDr00r00         [17] 1630 	call	_SMS_loadSpritePalette
                                   1631 ;main.c:36: SMS_loadTiles(sonictiles_inc, 0, sonictiles_inc_size);
      000881 21 C0 14         [10] 1632 	ld	hl, #0x14c0
      000884 E5               [11] 1633 	push	hl
      000885 11r00r00         [10] 1634 	ld	de, #_sonictiles_inc
      000888 21 00 40         [10] 1635 	ld	hl, #0x4000
      00088B CDr00r00         [17] 1636 	call	_SMS_VRAMmemcpy
                                   1637 ;main.c:37: spriteAlex = generateSpriteNoRAM(2, 2, spriteAlex_inc_size, spriteAlex_inc);
      00088E 21r00r00         [10] 1638 	ld	hl, #_spriteAlex_inc
      000891 E5               [11] 1639 	push	hl
      000892 21 00 10         [10] 1640 	ld	hl, #0x1000
      000895 E5               [11] 1641 	push	hl
                                   1642 ;	spillPairReg hl
                                   1643 ;	spillPairReg hl
      000896 3E 02            [ 7] 1644 	ld	a,#0x02
      000898 6F               [ 4] 1645 	ld	l,a
      000899 E5               [11] 1646 	push	hl
      00089A 21 06 00         [10] 1647 	ld	hl, #0x0006
      00089D 39               [11] 1648 	add	hl, sp
      00089E EB               [ 4] 1649 	ex	de,hl
      00089F E1               [10] 1650 	pop	hl
      0008A0 D5               [11] 1651 	push	de
      0008A1 CDrAAr00         [17] 1652 	call	_generateSpriteNoRAM
      0008A4 F1               [10] 1653 	pop	af
      0008A5 F1               [10] 1654 	pop	af
      0008A6 F1               [10] 1655 	pop	af
      0008A7 11r0Br00         [10] 1656 	ld	de, #_spriteAlex
      0008AA 21 00 00         [10] 1657 	ld	hl, #0
      0008AD 39               [11] 1658 	add	hl, sp
      0008AE 01 0A 00         [10] 1659 	ld	bc, #0x000a
      0008B1 ED B0            [21] 1660 	ldir
                                   1661 ;main.c:38: spritePajaro = generateSprite(3, 1, spritePajaro_inc_size, spritePajaro_inc);
      0008B3 21r00r00         [10] 1662 	ld	hl, #_spritePajaro_inc
      0008B6 E5               [11] 1663 	push	hl
      0008B7 21 80 01         [10] 1664 	ld	hl, #0x0180
      0008BA E5               [11] 1665 	push	hl
      0008BB 2E 01            [ 7] 1666 	ld	l, #0x01
                                   1667 ;	spillPairReg hl
                                   1668 ;	spillPairReg hl
      0008BD 3E 03            [ 7] 1669 	ld	a, #0x03
      0008BF E5               [11] 1670 	push	hl
      0008C0 21 10 00         [10] 1671 	ld	hl, #0x0010
      0008C3 39               [11] 1672 	add	hl, sp
      0008C4 EB               [ 4] 1673 	ex	de,hl
      0008C5 E1               [10] 1674 	pop	hl
      0008C6 D5               [11] 1675 	push	de
      0008C7 CDr00r00         [17] 1676 	call	_generateSprite
      0008CA F1               [10] 1677 	pop	af
      0008CB F1               [10] 1678 	pop	af
      0008CC F1               [10] 1679 	pop	af
      0008CD 11r15r00         [10] 1680 	ld	de, #_spritePajaro
      0008D0 21 0A 00         [10] 1681 	ld	hl, #10
      0008D3 39               [11] 1682 	add	hl, sp
      0008D4 01 0A 00         [10] 1683 	ld	bc, #0x000a
      0008D7 ED B0            [21] 1684 	ldir
                                   1685 ;main.c:39: SMS_loadTileMap(0, 0, sonictilemap_inc, sonictilemap_inc_size);
      0008D9 21 00 06         [10] 1686 	ld	hl, #0x0600
      0008DC E5               [11] 1687 	push	hl
      0008DD 11r00r00         [10] 1688 	ld	de, #_sonictilemap_inc
      0008E0 26 78            [ 7] 1689 	ld	h, #0x78
      0008E2 CDr00r00         [17] 1690 	call	_SMS_VRAMmemcpy
                                   1691 ;main.c:40: }
      0008E5 DD F9            [10] 1692 	ld	sp, ix
      0008E7 DD E1            [14] 1693 	pop	ix
      0008E9 C9               [10] 1694 	ret
                                   1695 ;main.c:42: void dibujaPajaros()
                                   1696 ;	---------------------------------
                                   1697 ; Function dibujaPajaros
                                   1698 ; ---------------------------------
      0008EA                       1699 _dibujaPajaros::
      0008EA DD E5            [15] 1700 	push	ix
      0008EC DD 21 00 00      [14] 1701 	ld	ix,#0
      0008F0 DD 39            [15] 1702 	add	ix,sp
      0008F2 F5               [11] 1703 	push	af
                                   1704 ;main.c:45: for (i = 0; i < NUM_PAJAROS; i++)
      0008F3 DD 36 FF 00      [19] 1705 	ld	-1 (ix), #0x00
      0008F7                       1706 00106$:
                                   1707 ;main.c:47: pajaros[i].x++;
      0008F7 DD 4E FF         [19] 1708 	ld	c, -1 (ix)
      0008FA 06 00            [ 7] 1709 	ld	b, #0x00
      0008FC 69               [ 4] 1710 	ld	l, c
      0008FD 60               [ 4] 1711 	ld	h, b
      0008FE 29               [11] 1712 	add	hl, hl
      0008FF 09               [11] 1713 	add	hl, bc
      000900 29               [11] 1714 	add	hl, hl
      000901 EB               [ 4] 1715 	ex	de, hl
      000902 21r02r00         [10] 1716 	ld	hl, #_pajaros
      000905 19               [11] 1717 	add	hl, de
      000906 EB               [ 4] 1718 	ex	de, hl
      000907 1A               [ 7] 1719 	ld	a, (de)
      000908 3C               [ 4] 1720 	inc	a
      000909 12               [ 7] 1721 	ld	(de), a
                                   1722 ;main.c:48: pajaros[i].lastChangeFrame++;
      00090A 4B               [ 4] 1723 	ld	c, e
      00090B 42               [ 4] 1724 	ld	b, d
      00090C 03               [ 6] 1725 	inc	bc
      00090D 03               [ 6] 1726 	inc	bc
      00090E 03               [ 6] 1727 	inc	bc
      00090F 0A               [ 7] 1728 	ld	a, (bc)
      000910 3C               [ 4] 1729 	inc	a
      000911 02               [ 7] 1730 	ld	(bc), a
                                   1731 ;main.c:49: if (pajaros[i].lastChangeFrame == 20)
      000912 D6 14            [ 7] 1732 	sub	a, #0x14
      000914 20 15            [12] 1733 	jr	NZ, 00104$
                                   1734 ;main.c:51: pajaros[i].frame++;
      000916 6B               [ 4] 1735 	ld	l, e
                                   1736 ;	spillPairReg hl
                                   1737 ;	spillPairReg hl
      000917 62               [ 4] 1738 	ld	h, d
                                   1739 ;	spillPairReg hl
                                   1740 ;	spillPairReg hl
      000918 23               [ 6] 1741 	inc	hl
      000919 23               [ 6] 1742 	inc	hl
      00091A 7E               [ 7] 1743 	ld	a, (hl)
      00091B 3C               [ 4] 1744 	inc	a
      00091C DD 77 FE         [19] 1745 	ld	-2 (ix), a
      00091F 77               [ 7] 1746 	ld	(hl), a
                                   1747 ;main.c:52: if (pajaros[i].frame > 1)
      000920 3E 01            [ 7] 1748 	ld	a, #0x01
      000922 DD 96 FE         [19] 1749 	sub	a, -2 (ix)
      000925 30 02            [12] 1750 	jr	NC, 00102$
                                   1751 ;main.c:53: pajaros[i].frame = 0;
      000927 36 00            [10] 1752 	ld	(hl), #0x00
      000929                       1753 00102$:
                                   1754 ;main.c:54: pajaros[i].lastChangeFrame = 0;
      000929 AF               [ 4] 1755 	xor	a, a
      00092A 02               [ 7] 1756 	ld	(bc), a
      00092B                       1757 00104$:
                                   1758 ;main.c:56: draw_entidad(&(pajaros[i]), &spritePajaro);
      00092B EB               [ 4] 1759 	ex	de, hl
      00092C 11r15r00         [10] 1760 	ld	de, #_spritePajaro
      00092F CDr59r01         [17] 1761 	call	_draw_entidad
                                   1762 ;main.c:45: for (i = 0; i < NUM_PAJAROS; i++)
      000932 DD 34 FF         [23] 1763 	inc	-1 (ix)
      000935 DD 7E FF         [19] 1764 	ld	a, -1 (ix)
      000938 D6 0A            [ 7] 1765 	sub	a, #0x0a
      00093A 38 BB            [12] 1766 	jr	C, 00106$
                                   1767 ;main.c:58: }
      00093C DD F9            [10] 1768 	ld	sp, ix
      00093E DD E1            [14] 1769 	pop	ix
      000940 C9               [10] 1770 	ret
                                   1771 ;main.c:61: void main(void)
                                   1772 ;	---------------------------------
                                   1773 ; Function main
                                   1774 ; ---------------------------------
      000941                       1775 _main::
      000941 DD E5            [15] 1776 	push	ix
      000943 DD 21 00 00      [14] 1777 	ld	ix,#0
      000947 DD 39            [15] 1778 	add	ix,sp
      000949 F5               [11] 1779 	push	af
                                   1780 ;main.c:66: SMS_VRAMmemsetW(0, 0x0000, 16384);
      00094A DD 36 FF 00      [19] 1781 	ld	-1 (ix), #0x00
      00094E DD 36 FE 00      [19] 1782 	ld	-2 (ix), #0x00
      000952 21 00 40         [10] 1783 	ld	hl, #0x4000
      000955 E5               [11] 1784 	push	hl
      000956 11 00 00         [10] 1785 	ld	de, #0x0000
      000959 65               [ 4] 1786 	ld	h, l
      00095A CDr00r00         [17] 1787 	call	_SMS_VRAMmemsetW
                                   1788 ;main.c:76: printf("Hello, World! [1/3]");
      00095D 21rF0r09         [10] 1789 	ld	hl, #___str_0
      000960 E5               [11] 1790 	push	hl
      000961 CDr00r00         [17] 1791 	call	_printf
      000964 F1               [10] 1792 	pop	af
                                   1793 ;main.c:80: loadGrapVRAM();
      000965 CDr51r08         [17] 1794 	call	_loadGrapVRAM
                                   1795 ;main.c:82: SMS_displayOn();
      000968 21 40 01         [10] 1796 	ld	hl, #0x0140
      00096B CDr00r00         [17] 1797 	call	_SMS_VDPturnOnFeature
                                   1798 ;main.c:83: SMS_setBGScrollX(scroll_x);
      00096E 2E 00            [ 7] 1799 	ld	l, #0x00
                                   1800 ;	spillPairReg hl
                                   1801 ;	spillPairReg hl
      000970 CDr00r00         [17] 1802 	call	_SMS_setBGScrollX
                                   1803 ;main.c:84: SMS_setBGScrollY(scroll_y);
      000973 2E 00            [ 7] 1804 	ld	l, #0x00
                                   1805 ;	spillPairReg hl
                                   1806 ;	spillPairReg hl
      000975 CDr00r00         [17] 1807 	call	_SMS_setBGScrollY
                                   1808 ;main.c:85: SMS_init();
      000978 CDr00r00         [17] 1809 	call	_SMS_init
                                   1810 ;main.c:91: PSGPlay(titulo_psg);
      00097B 21r00r00         [10] 1811 	ld	hl, #_titulo_psg
      00097E CDr00r00         [17] 1812 	call	_PSGPlay
                                   1813 ;main.c:92: SMS_VDPturnOnFeature(VDPFEATURE_LEFTCOLBLANK);
      000981 21 20 00         [10] 1814 	ld	hl, #0x0020
      000984 CDr00r00         [17] 1815 	call	_SMS_VDPturnOnFeature
      000987                       1816 00111$:
                                   1817 ;main.c:97: if (SMS_queryPauseRequested())
      000987 CDr00r00         [17] 1818 	call	_SMS_queryPauseRequested
      00098A CB 47            [ 8] 1819 	bit	0,a
      00098C 28 15            [12] 1820 	jr	Z, 00105$
                                   1821 ;main.c:99: SMS_resetPauseRequest();
      00098E CDr00r00         [17] 1822 	call	_SMS_resetPauseRequest
                                   1823 ;main.c:100: while (!SMS_queryPauseRequested())
      000991                       1824 00101$:
      000991 CDr00r00         [17] 1825 	call	_SMS_queryPauseRequested
      000994 CB 47            [ 8] 1826 	bit	0,a
      000996 20 08            [12] 1827 	jr	NZ, 00103$
                                   1828 ;main.c:102: SMS_waitForVBlank();
      000998 CDr00r00         [17] 1829 	call	_SMS_waitForVBlank
                                   1830 ;main.c:103: PSGFrame();
      00099B CDr00r00         [17] 1831 	call	_PSGFrame
      00099E 18 F1            [12] 1832 	jr	00101$
      0009A0                       1833 00103$:
                                   1834 ;main.c:105: SMS_resetPauseRequest();
      0009A0 CDr00r00         [17] 1835 	call	_SMS_resetPauseRequest
      0009A3                       1836 00105$:
                                   1837 ;main.c:109: int keys = SMS_getKeysHeld();
      0009A3 CDr00r00         [17] 1838 	call	_SMS_getKeysHeld
                                   1839 ;main.c:110: moveAlex(keys);
      0009A6 EB               [ 4] 1840 	ex	de, hl
      0009A7 CDrD2r07         [17] 1841 	call	_moveAlex
                                   1842 ;main.c:111: SMS_initSprites();
      0009AA CDr00r00         [17] 1843 	call	_SMS_initSprites
                                   1844 ;main.c:112: draw_entidad(&alex, &spriteAlex);
      0009AD 11r0Br00         [10] 1845 	ld	de, #_spriteAlex
      0009B0 21r05r00         [10] 1846 	ld	hl, #_alex
      0009B3 CDr59r01         [17] 1847 	call	_draw_entidad
                                   1848 ;main.c:113: dibujaPajaros();
      0009B6 CDrEAr08         [17] 1849 	call	_dibujaPajaros
                                   1850 ;main.c:115: SMS_finalizeSprites();
      0009B9 CDr00r00         [17] 1851 	call	_SMS_finalizeSprites
                                   1852 ;main.c:118: SMS_waitForVBlank();
      0009BC CDr00r00         [17] 1853 	call	_SMS_waitForVBlank
                                   1854 ;main.c:119: SMS_copySpritestoSAT();
      0009BF CDr00r00         [17] 1855 	call	_SMS_copySpritestoSAT
                                   1856 ;main.c:120: PSGFrame();
      0009C2 CDr00r00         [17] 1857 	call	_PSGFrame
                                   1858 ;main.c:121: SMS_displayOff();
      0009C5 21 40 01         [10] 1859 	ld	hl, #0x0140
      0009C8 CDr00r00         [17] 1860 	call	_SMS_VDPturnOffFeature
                                   1861 ;main.c:122: if (scroll_y % 2 == 0)
      0009CB DD CB FF 46      [20] 1862 	bit	0, -1 (ix)
      0009CF 20 03            [12] 1863 	jr	NZ, 00107$
                                   1864 ;main.c:123: scroll_x += 1;
      0009D1 DD 34 FE         [23] 1865 	inc	-2 (ix)
      0009D4                       1866 00107$:
                                   1867 ;main.c:124: scroll_y++;
      0009D4 DD 34 FF         [23] 1868 	inc	-1 (ix)
                                   1869 ;main.c:125: if (scroll_y == 224)
      0009D7 DD 7E FF         [19] 1870 	ld	a, -1 (ix)
      0009DA D6 E0            [ 7] 1871 	sub	a, #0xe0
      0009DC 20 04            [12] 1872 	jr	NZ, 00109$
                                   1873 ;main.c:126: scroll_y = 0;
      0009DE DD 36 FF 00      [19] 1874 	ld	-1 (ix), #0x00
      0009E2                       1875 00109$:
                                   1876 ;main.c:128: SMS_setBGScrollX(scroll_x);
      0009E2 DD 6E FE         [19] 1877 	ld	l, -2 (ix)
                                   1878 ;	spillPairReg hl
                                   1879 ;	spillPairReg hl
      0009E5 CDr00r00         [17] 1880 	call	_SMS_setBGScrollX
                                   1881 ;main.c:130: SMS_displayOn();
      0009E8 21 40 01         [10] 1882 	ld	hl, #0x0140
      0009EB CDr00r00         [17] 1883 	call	_SMS_VDPturnOnFeature
                                   1884 ;main.c:132: }
      0009EE 18 97            [12] 1885 	jr	00111$
      0009F0                       1886 ___str_0:
      0009F0 48 65 6C 6C 6F 2C 20  1887 	.ascii "Hello, World! [1/3]"
             57 6F 72 6C 64 21 20
             5B 31 2F 33 5D
      000A03 00                    1888 	.db 0x00
                                   1889 	.area _CODE
      000A04                       1890 __str_1:
      000A04 72 61 70 68 6E 65 74  1891 	.ascii "raphnet"
      000A0B 00                    1892 	.db 0x00
      000A0C                       1893 __str_2:
      000A0C 62 61 73 69 63 20 65  1894 	.ascii "basic example"
             78 61 6D 70 6C 65
      000A19 00                    1895 	.db 0x00
      000A1A                       1896 __str_3:
      000A1A 41 20 73 69 6D 70 6C  1897 	.ascii "A simple example"
             65 20 65 78 61 6D 70
             6C 65
      000A2A 00                    1898 	.db 0x00
                                   1899 	.area _INITIALIZER
      000000                       1900 __xinit__nextVRAMsprites:
      000000 00 01                 1901 	.dw #0x0100
      000002                       1902 __xinit__vY:
      000002 00 00                 1903 	.dw #0x0000
      000004                       1904 __xinit__maxSalto:
      000004 FF                    1905 	.db #0xff	; 255
      000005                       1906 __xinit__alex:
      000005 1E                    1907 	.db #0x1e	; 30
      000006 14                    1908 	.db #0x14	; 20
      000007 00                    1909 	.db #0x00	; 0
      000008 00                    1910 	.db #0x00	; 0
      000009 02                    1911 	.db #0x02	; 2
      00000A 00                    1912 	.db #0x00	; 0
      00000B                       1913 __xinit__spriteAlex:
      00000B 02                    1914 	.db #0x02	; 2
      00000C 02                    1915 	.db #0x02	; 2
      00000D 08                    1916 	.db #0x08	; 8
      00000E 00                    1917 	.db #0x00	; 0
      00000F 00 00                 1918 	.dw #0x0000
      000011 00                    1919 	.db #0x00	; 0
      000012 00 00                 1920 	.dw #0x0000
      000014 00                    1921 	.db #0x00	; 0
      000015                       1922 __xinit__spritePajaro:
      000015 02                    1923 	.db #0x02	; 2
      000016 02                    1924 	.db #0x02	; 2
      000017 08                    1925 	.db #0x08	; 8
      000018 00                    1926 	.db #0x00	; 0
      000019 00 00                 1927 	.dw #0x0000
      00001B 00                    1928 	.db #0x00	; 0
      00001C 00 00                 1929 	.dw #0x0000
      00001E 00                    1930 	.db #0x00	; 0
                                   1931 	.area _CABS (ABS)
      007FF0                       1932 	.org 0x7FF0
      007FF0                       1933 ___SMS__SEGA_signature:
      007FF0 54                    1934 	.db #0x54	; 84	'T'
      007FF1 4D                    1935 	.db #0x4d	; 77	'M'
      007FF2 52                    1936 	.db #0x52	; 82	'R'
      007FF3 20                    1937 	.db #0x20	; 32
      007FF4 53                    1938 	.db #0x53	; 83	'S'
      007FF5 45                    1939 	.db #0x45	; 69	'E'
      007FF6 47                    1940 	.db #0x47	; 71	'G'
      007FF7 41                    1941 	.db #0x41	; 65	'A'
      007FF8 FF                    1942 	.db #0xff	; 255
      007FF9 FF                    1943 	.db #0xff	; 255
      007FFA FF                    1944 	.db #0xff	; 255
      007FFB FF                    1945 	.db #0xff	; 255
      007FFC 99                    1946 	.db #0x99	; 153
      007FFD 99                    1947 	.db #0x99	; 153
      007FFE 00                    1948 	.db #0x00	; 0
      007FFF 4C                    1949 	.db #0x4c	; 76	'L'
      007FD8                       1950 	.org 0x7FD8
      007FD8                       1951 ___SMS__SDSC_author:
      007FD8 72 61 70 68 6E 65 74  1952 	.ascii "raphnet"
      007FDF 00                    1953 	.db 0x00
      007FCA                       1954 	.org 0x7FCA
      007FCA                       1955 ___SMS__SDSC_name:
      007FCA 62 61 73 69 63 20 65  1956 	.ascii "basic example"
             78 61 6D 70 6C 65
      007FD7 00                    1957 	.db 0x00
      007FB9                       1958 	.org 0x7FB9
      007FB9                       1959 ___SMS__SDSC_descr:
      007FB9 41 20 73 69 6D 70 6C  1960 	.ascii "A simple example"
             65 20 65 78 61 6D 70
             6C 65
      007FC9 00                    1961 	.db 0x00
      007FE0                       1962 	.org 0x7FE0
      007FE0                       1963 ___SMS__SDSC_signature:
      007FE0 53                    1964 	.db #0x53	; 83	'S'
      007FE1 44                    1965 	.db #0x44	; 68	'D'
      007FE2 53                    1966 	.db #0x53	; 83	'S'
      007FE3 43                    1967 	.db #0x43	; 67	'C'
      007FE4 01                    1968 	.db #0x01	; 1
      007FE5 00                    1969 	.db #0x00	; 0
      007FE6 00                    1970 	.db #0x00	; 0
      007FE7 00                    1971 	.db #0x00	; 0
      007FE8 00                    1972 	.db #0x00	; 0
      007FE9 00                    1973 	.db #0x00	; 0
      007FEA D8                    1974 	.db #0xd8	; 216
      007FEB 7F                    1975 	.db #0x7f	; 127
      007FEC CA                    1976 	.db #0xca	; 202
      007FED 7F                    1977 	.db #0x7f	; 127
      007FEE B9                    1978 	.db #0xb9	; 185
      007FEF 7F                    1979 	.db #0x7f	; 127
